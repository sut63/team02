/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBonedisease,
    ControllersBonediseaseFromJSON,
    ControllersBonediseaseToJSON,
    ControllersChecksymptoms,
    ControllersChecksymptomsFromJSON,
    ControllersChecksymptomsToJSON,
    ControllersSurgeryappointment,
    ControllersSurgeryappointmentFromJSON,
    ControllersSurgeryappointmentToJSON,
    EntAntenatalinformation,
    EntAntenatalinformationFromJSON,
    EntAntenatalinformationToJSON,
    EntBonedisease,
    EntBonediseaseFromJSON,
    EntBonediseaseToJSON,
    EntChecksymptoms,
    EntChecksymptomsFromJSON,
    EntChecksymptomsToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntDoctorOrderSheet,
    EntDoctorOrderSheetFromJSON,
    EntDoctorOrderSheetToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPersonnel,
    EntPersonnelFromJSON,
    EntPersonnelToJSON,
    EntPregnancystatus,
    EntPregnancystatusFromJSON,
    EntPregnancystatusToJSON,
    EntRemedy,
    EntRemedyFromJSON,
    EntRemedyToJSON,
    EntRisks,
    EntRisksFromJSON,
    EntRisksToJSON,
    EntSurgeryappointment,
    EntSurgeryappointmentFromJSON,
    EntSurgeryappointmentToJSON,
    EntSurgerytype,
    EntSurgerytypeFromJSON,
    EntSurgerytypeToJSON,
} from '../models';

export interface CreateAntenatalinformationRequest {
    antenatalinformation: EntAntenatalinformation;
}

export interface CreateBonediseaseRequest {
    bonedisease: ControllersBonedisease;
}

export interface CreateChecksymptomsRequest {
    checksymptoms: ControllersChecksymptoms;
}

export interface CreateDiseaseRequest {
    disease: EntDisease;
}

export interface CreateDoctorordersheetRequest {
    doctorordersheet: EntDoctorOrderSheet;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePersonnelRequest {
    personnel: EntPersonnel;
}

export interface CreatePregnancystatusRequest {
    pregnancystatus: EntPregnancystatus;
}

export interface CreateRemedyRequest {
    remedy: EntRemedy;
}

export interface CreateRisksRequest {
    risks: EntRisks;
}

export interface CreateSurgeryappointmentRequest {
    surgeryappointment: ControllersSurgeryappointment;
}

export interface DeleteAntenatalinformationRequest {
    id: number;
}

export interface DeleteBonediseaseRequest {
    id: number;
}

export interface DeleteDiseaseRequest {
    id: number;
}

export interface DeleteDoctorordersheetRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeletePersonnelRequest {
    id: number;
}

export interface DeleteRemedyRequest {
    id: number;
}

export interface DeleteSurgeryappointmentRequest {
    id: number;
}

export interface DeleteSurgerytypeRequest {
    id: number;
}

export interface GetAntenatalinformationRequest {
    id: number;
}

export interface GetDiseaseRequest {
    id: number;
}

export interface GetDoctorordersheetRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPersonnelRequest {
    id: number;
}

export interface GetPregnancystatusRequest {
    id: number;
}

export interface GetRemedyRequest {
    id: number;
}

export interface GetRisksRequest {
    id: number;
}

export interface GetSurgeryappointmentRequest {
    id: number;
}

export interface GetSurgerytypeRequest {
    id: number;
}

export interface ListAntenatalinformationRequest {
    limit?: number;
    offset?: number;
}

export interface ListBonediseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListChecksymptomsRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorordersheetRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPersonnelRequest {
    limit?: number;
    offset?: number;
}

export interface ListPregnancystatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListRemedyRequest {
    limit?: number;
    offset?: number;
}

export interface ListRisksRequest {
    limit?: number;
    offset?: number;
}

export interface ListSurgeryappointmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListSurgerytypeRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAntenatalinformationRequest {
    id: number;
    antenatalinformation: EntAntenatalinformation;
}

export interface UpdateDiseaseRequest {
    id: number;
    disease: EntDisease;
}

export interface UpdateDoctorordersheetRequest {
    id: number;
    doctorordersheet: EntDoctorOrderSheet;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdatePersonnelRequest {
    id: number;
    personnel: EntPersonnel;
}

export interface UpdateRemedyRequest {
    id: number;
    remedy: EntRemedy;
}

export interface UpdateSurgeryappointmentRequest {
    id: number;
    surgeryappointment: EntSurgeryappointment;
}

export interface UpdateSurgerytypeRequest {
    id: number;
    surgerytype: EntSurgerytype;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create antenatalinformation
     * Create antenatalinformation
     */
    async createAntenatalinformationRaw(requestParameters: CreateAntenatalinformationRequest): Promise<runtime.ApiResponse<EntAntenatalinformation>> {
        if (requestParameters.antenatalinformation === null || requestParameters.antenatalinformation === undefined) {
            throw new runtime.RequiredError('antenatalinformation','Required parameter requestParameters.antenatalinformation was null or undefined when calling createAntenatalinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/antenatalinformations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAntenatalinformationToJSON(requestParameters.antenatalinformation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAntenatalinformationFromJSON(jsonValue));
    }

    /**
     * Create antenatalinformation
     * Create antenatalinformation
     */
    async createAntenatalinformation(requestParameters: CreateAntenatalinformationRequest): Promise<EntAntenatalinformation> {
        const response = await this.createAntenatalinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bonedisease
     * Create bonedisease
     */
    async createBonediseaseRaw(requestParameters: CreateBonediseaseRequest): Promise<runtime.ApiResponse<EntBonedisease>> {
        if (requestParameters.bonedisease === null || requestParameters.bonedisease === undefined) {
            throw new runtime.RequiredError('bonedisease','Required parameter requestParameters.bonedisease was null or undefined when calling createBonedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bonediseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBonediseaseToJSON(requestParameters.bonedisease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBonediseaseFromJSON(jsonValue));
    }

    /**
     * Create bonedisease
     * Create bonedisease
     */
    async createBonedisease(requestParameters: CreateBonediseaseRequest): Promise<EntBonedisease> {
        const response = await this.createBonediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create checksymptoms
     * Create checksymptoms
     */
    async createChecksymptomsRaw(requestParameters: CreateChecksymptomsRequest): Promise<runtime.ApiResponse<EntChecksymptoms>> {
        if (requestParameters.checksymptoms === null || requestParameters.checksymptoms === undefined) {
            throw new runtime.RequiredError('checksymptoms','Required parameter requestParameters.checksymptoms was null or undefined when calling createChecksymptoms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checksymptomss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersChecksymptomsToJSON(requestParameters.checksymptoms),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntChecksymptomsFromJSON(jsonValue));
    }

    /**
     * Create checksymptoms
     * Create checksymptoms
     */
    async createChecksymptoms(requestParameters: CreateChecksymptomsRequest): Promise<EntChecksymptoms> {
        const response = await this.createChecksymptomsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create disease
     * Create disease
     */
    async createDiseaseRaw(requestParameters: CreateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling createDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * Create disease
     * Create disease
     */
    async createDisease(requestParameters: CreateDiseaseRequest): Promise<EntDisease> {
        const response = await this.createDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctorordersheet
     * Create doctorordersheet
     */
    async createDoctorordersheetRaw(requestParameters: CreateDoctorordersheetRequest): Promise<runtime.ApiResponse<EntDoctorOrderSheet>> {
        if (requestParameters.doctorordersheet === null || requestParameters.doctorordersheet === undefined) {
            throw new runtime.RequiredError('doctorordersheet','Required parameter requestParameters.doctorordersheet was null or undefined when calling createDoctorordersheet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctorordersheets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorOrderSheetToJSON(requestParameters.doctorordersheet),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorOrderSheetFromJSON(jsonValue));
    }

    /**
     * Create doctorordersheet
     * Create doctorordersheet
     */
    async createDoctorordersheet(requestParameters: CreateDoctorordersheetRequest): Promise<EntDoctorOrderSheet> {
        const response = await this.createDoctorordersheetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create personnel
     * Create personnel
     */
    async createPersonnelRaw(requestParameters: CreatePersonnelRequest): Promise<runtime.ApiResponse<EntPersonnel>> {
        if (requestParameters.personnel === null || requestParameters.personnel === undefined) {
            throw new runtime.RequiredError('personnel','Required parameter requestParameters.personnel was null or undefined when calling createPersonnel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/personnels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPersonnelToJSON(requestParameters.personnel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonnelFromJSON(jsonValue));
    }

    /**
     * Create personnel
     * Create personnel
     */
    async createPersonnel(requestParameters: CreatePersonnelRequest): Promise<EntPersonnel> {
        const response = await this.createPersonnelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create pregnancystatus
     * Create pregnancystatus
     */
    async createPregnancystatusRaw(requestParameters: CreatePregnancystatusRequest): Promise<runtime.ApiResponse<EntPregnancystatus>> {
        if (requestParameters.pregnancystatus === null || requestParameters.pregnancystatus === undefined) {
            throw new runtime.RequiredError('pregnancystatus','Required parameter requestParameters.pregnancystatus was null or undefined when calling createPregnancystatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Pregnancystatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPregnancystatusToJSON(requestParameters.pregnancystatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPregnancystatusFromJSON(jsonValue));
    }

    /**
     * Create pregnancystatus
     * Create pregnancystatus
     */
    async createPregnancystatus(requestParameters: CreatePregnancystatusRequest): Promise<EntPregnancystatus> {
        const response = await this.createPregnancystatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create remedy
     * Create remedy
     */
    async createRemedyRaw(requestParameters: CreateRemedyRequest): Promise<runtime.ApiResponse<EntRemedy>> {
        if (requestParameters.remedy === null || requestParameters.remedy === undefined) {
            throw new runtime.RequiredError('remedy','Required parameter requestParameters.remedy was null or undefined when calling createRemedy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/remedys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRemedyToJSON(requestParameters.remedy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRemedyFromJSON(jsonValue));
    }

    /**
     * Create remedy
     * Create remedy
     */
    async createRemedy(requestParameters: CreateRemedyRequest): Promise<EntRemedy> {
        const response = await this.createRemedyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create risks
     * Create risks
     */
    async createRisksRaw(requestParameters: CreateRisksRequest): Promise<runtime.ApiResponse<EntRisks>> {
        if (requestParameters.risks === null || requestParameters.risks === undefined) {
            throw new runtime.RequiredError('risks','Required parameter requestParameters.risks was null or undefined when calling createRisks.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Riskss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRisksToJSON(requestParameters.risks),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRisksFromJSON(jsonValue));
    }

    /**
     * Create risks
     * Create risks
     */
    async createRisks(requestParameters: CreateRisksRequest): Promise<EntRisks> {
        const response = await this.createRisksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Surgeryappointment
     * Create Surgeryappointment
     */
    async createSurgeryappointmentRaw(requestParameters: CreateSurgeryappointmentRequest): Promise<runtime.ApiResponse<EntSurgeryappointment>> {
        if (requestParameters.surgeryappointment === null || requestParameters.surgeryappointment === undefined) {
            throw new runtime.RequiredError('surgeryappointment','Required parameter requestParameters.surgeryappointment was null or undefined when calling createSurgeryappointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Surgeryappointments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersSurgeryappointmentToJSON(requestParameters.surgeryappointment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSurgeryappointmentFromJSON(jsonValue));
    }

    /**
     * Create Surgeryappointment
     * Create Surgeryappointment
     */
    async createSurgeryappointment(requestParameters: CreateSurgeryappointmentRequest): Promise<EntSurgeryappointment> {
        const response = await this.createSurgeryappointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get antenatalinformation by ID
     * Delete a antenatalinformation entity by ID
     */
    async deleteAntenatalinformationRaw(requestParameters: DeleteAntenatalinformationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAntenatalinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/antenatalinformations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get antenatalinformation by ID
     * Delete a antenatalinformation entity by ID
     */
    async deleteAntenatalinformation(requestParameters: DeleteAntenatalinformationRequest): Promise<object> {
        const response = await this.deleteAntenatalinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bonedisease by ID
     * Delete a bonedisease entity by ID
     */
    async deleteBonediseaseRaw(requestParameters: DeleteBonediseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBonedisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bonediseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bonedisease by ID
     * Delete a bonedisease entity by ID
     */
    async deleteBonedisease(requestParameters: DeleteBonediseaseRequest): Promise<object> {
        const response = await this.deleteBonediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDiseaseRaw(requestParameters: DeleteDiseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDisease(requestParameters: DeleteDiseaseRequest): Promise<object> {
        const response = await this.deleteDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctorordersheet by ID
     * Delete a doctorordersheet entity by ID
     */
    async deleteDoctorordersheetRaw(requestParameters: DeleteDoctorordersheetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctorordersheet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorordersheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctorordersheet by ID
     * Delete a doctorordersheet entity by ID
     */
    async deleteDoctorordersheet(requestParameters: DeleteDoctorordersheetRequest): Promise<object> {
        const response = await this.deleteDoctorordersheetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personnel by ID
     * Delete a personnel entity by ID
     */
    async deletePersonnelRaw(requestParameters: DeletePersonnelRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePersonnel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personnels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get personnel by ID
     * Delete a personnel entity by ID
     */
    async deletePersonnel(requestParameters: DeletePersonnelRequest): Promise<object> {
        const response = await this.deletePersonnelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get remedy by ID
     * Delete a remedy entity by ID
     */
    async deleteRemedyRaw(requestParameters: DeleteRemedyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRemedy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remedys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get remedy by ID
     * Delete a remedy entity by ID
     */
    async deleteRemedy(requestParameters: DeleteRemedyRequest): Promise<object> {
        const response = await this.deleteRemedyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get surgeryappointment by ID
     * Delete a surgeryappointment entity by ID
     */
    async deleteSurgeryappointmentRaw(requestParameters: DeleteSurgeryappointmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSurgeryappointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgeryappointments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get surgeryappointment by ID
     * Delete a surgeryappointment entity by ID
     */
    async deleteSurgeryappointment(requestParameters: DeleteSurgeryappointmentRequest): Promise<object> {
        const response = await this.deleteSurgeryappointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get surgerytype by ID
     * Delete a surgerytype entity by ID
     */
    async deleteSurgerytypeRaw(requestParameters: DeleteSurgerytypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSurgerytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgerytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get surgerytype by ID
     * Delete a surgerytype entity by ID
     */
    async deleteSurgerytype(requestParameters: DeleteSurgerytypeRequest): Promise<object> {
        const response = await this.deleteSurgerytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get antenatalinformation by ID
     * Get a antenatalinformation entity by ID
     */
    async getAntenatalinformationRaw(requestParameters: GetAntenatalinformationRequest): Promise<runtime.ApiResponse<EntAntenatalinformation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAntenatalinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/antenatalinformations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAntenatalinformationFromJSON(jsonValue));
    }

    /**
     * get antenatalinformation by ID
     * Get a antenatalinformation entity by ID
     */
    async getAntenatalinformation(requestParameters: GetAntenatalinformationRequest): Promise<EntAntenatalinformation> {
        const response = await this.getAntenatalinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDiseaseRaw(requestParameters: GetDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDisease(requestParameters: GetDiseaseRequest): Promise<EntDisease> {
        const response = await this.getDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctorordersheet by ID
     * Get a doctorordersheet entity by ID
     */
    async getDoctorordersheetRaw(requestParameters: GetDoctorordersheetRequest): Promise<runtime.ApiResponse<EntDoctorOrderSheet>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctorordersheet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorordersheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorOrderSheetFromJSON(jsonValue));
    }

    /**
     * get doctorordersheet by ID
     * Get a doctorordersheet entity by ID
     */
    async getDoctorordersheet(requestParameters: GetDoctorordersheetRequest): Promise<EntDoctorOrderSheet> {
        const response = await this.getDoctorordersheetRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientNames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personnel by ID
     * Get a personnel entity by ID
     */
    async getPersonnelRaw(requestParameters: GetPersonnelRequest): Promise<runtime.ApiResponse<EntPersonnel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonnel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personnelNames/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonnelFromJSON(jsonValue));
    }

    /**
     * get personnel by ID
     * Get a personnel entity by ID
     */
    async getPersonnel(requestParameters: GetPersonnelRequest): Promise<EntPersonnel> {
        const response = await this.getPersonnelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pregnancystatus by ID
     * Get a pregnancystatus entity by ID
     */
    async getPregnancystatusRaw(requestParameters: GetPregnancystatusRequest): Promise<runtime.ApiResponse<EntPregnancystatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPregnancystatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pregnancystatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPregnancystatusFromJSON(jsonValue));
    }

    /**
     * get pregnancystatus by ID
     * Get a pregnancystatus entity by ID
     */
    async getPregnancystatus(requestParameters: GetPregnancystatusRequest): Promise<EntPregnancystatus> {
        const response = await this.getPregnancystatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get remedy by ID
     * Get a remedy entity by ID
     */
    async getRemedyRaw(requestParameters: GetRemedyRequest): Promise<runtime.ApiResponse<EntRemedy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRemedy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remedys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRemedyFromJSON(jsonValue));
    }

    /**
     * get remedy by ID
     * Get a remedy entity by ID
     */
    async getRemedy(requestParameters: GetRemedyRequest): Promise<EntRemedy> {
        const response = await this.getRemedyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get risks by ID
     * Get a risks entity by ID
     */
    async getRisksRaw(requestParameters: GetRisksRequest): Promise<runtime.ApiResponse<EntRisks>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRisks.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/riskss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRisksFromJSON(jsonValue));
    }

    /**
     * get risks by ID
     * Get a risks entity by ID
     */
    async getRisks(requestParameters: GetRisksRequest): Promise<EntRisks> {
        const response = await this.getRisksRaw(requestParameters);
        return await response.value();
    }

    /**
     * get surgeryappointment by ID
     * Get a surgeryappointment entity by ID
     */
    async getSurgeryappointmentRaw(requestParameters: GetSurgeryappointmentRequest): Promise<runtime.ApiResponse<EntSurgeryappointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSurgeryappointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgeryappointments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSurgeryappointmentFromJSON(jsonValue));
    }

    /**
     * get surgeryappointment by ID
     * Get a surgeryappointment entity by ID
     */
    async getSurgeryappointment(requestParameters: GetSurgeryappointmentRequest): Promise<EntSurgeryappointment> {
        const response = await this.getSurgeryappointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get surgerytype by ID
     * Get a surgerytype entity by ID
     */
    async getSurgerytypeRaw(requestParameters: GetSurgerytypeRequest): Promise<runtime.ApiResponse<EntSurgerytype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSurgerytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgerytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSurgerytypeFromJSON(jsonValue));
    }

    /**
     * get surgerytype by ID
     * Get a surgerytype entity by ID
     */
    async getSurgerytype(requestParameters: GetSurgerytypeRequest): Promise<EntSurgerytype> {
        const response = await this.getSurgerytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list antenatalinformation entities
     * List antenatalinformation entities
     */
    async listAntenatalinformationRaw(requestParameters: ListAntenatalinformationRequest): Promise<runtime.ApiResponse<Array<EntAntenatalinformation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/antenatalinformations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAntenatalinformationFromJSON));
    }

    /**
     * list antenatalinformation entities
     * List antenatalinformation entities
     */
    async listAntenatalinformation(requestParameters: ListAntenatalinformationRequest): Promise<Array<EntAntenatalinformation>> {
        const response = await this.listAntenatalinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bonedisease entities
     * List bonedisease entities
     */
    async listBonediseaseRaw(requestParameters: ListBonediseaseRequest): Promise<runtime.ApiResponse<Array<EntBonedisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bonediseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBonediseaseFromJSON));
    }

    /**
     * list bonedisease entities
     * List bonedisease entities
     */
    async listBonedisease(requestParameters: ListBonediseaseRequest): Promise<Array<EntBonedisease>> {
        const response = await this.listBonediseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list checksymptoms entities
     * List checksymptoms entities
     */
    async listChecksymptomsRaw(requestParameters: ListChecksymptomsRequest): Promise<runtime.ApiResponse<Array<EntChecksymptoms>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checksymptomss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntChecksymptomsFromJSON));
    }

    /**
     * list checksymptoms entities
     * List checksymptoms entities
     */
    async listChecksymptoms(requestParameters: ListChecksymptomsRequest): Promise<Array<EntChecksymptoms>> {
        const response = await this.listChecksymptomsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctorordersheet entities
     * List doctorordersheet entities
     */
    async listDoctorordersheetRaw(requestParameters: ListDoctorordersheetRequest): Promise<runtime.ApiResponse<Array<EntDoctorOrderSheet>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctorordersheets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorOrderSheetFromJSON));
    }

    /**
     * list doctorordersheet entities
     * List doctorordersheet entities
     */
    async listDoctorordersheet(requestParameters: ListDoctorordersheetRequest): Promise<Array<EntDoctorOrderSheet>> {
        const response = await this.listDoctorordersheetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list personnel entities
     * List personnel entities
     */
    async listPersonnelRaw(requestParameters: ListPersonnelRequest): Promise<runtime.ApiResponse<Array<EntPersonnel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personnels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPersonnelFromJSON));
    }

    /**
     * list personnel entities
     * List personnel entities
     */
    async listPersonnel(requestParameters: ListPersonnelRequest): Promise<Array<EntPersonnel>> {
        const response = await this.listPersonnelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list pregnancystatus entities
     * List pregnancystatus entities
     */
    async listPregnancystatusRaw(requestParameters: ListPregnancystatusRequest): Promise<runtime.ApiResponse<Array<EntPregnancystatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pregnancystatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPregnancystatusFromJSON));
    }

    /**
     * list pregnancystatus entities
     * List pregnancystatus entities
     */
    async listPregnancystatus(requestParameters: ListPregnancystatusRequest): Promise<Array<EntPregnancystatus>> {
        const response = await this.listPregnancystatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list remedy entities
     * List remedy entities
     */
    async listRemedyRaw(requestParameters: ListRemedyRequest): Promise<runtime.ApiResponse<Array<EntRemedy>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remedys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRemedyFromJSON));
    }

    /**
     * list remedy entities
     * List remedy entities
     */
    async listRemedy(requestParameters: ListRemedyRequest): Promise<Array<EntRemedy>> {
        const response = await this.listRemedyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list risks entities
     * List risks entities
     */
    async listRisksRaw(requestParameters: ListRisksRequest): Promise<runtime.ApiResponse<Array<EntRisks>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/riskss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRisksFromJSON));
    }

    /**
     * list risks entities
     * List risks entities
     */
    async listRisks(requestParameters: ListRisksRequest): Promise<Array<EntRisks>> {
        const response = await this.listRisksRaw(requestParameters);
        return await response.value();
    }

    /**
     * list surgeryappointment entities
     * List surgeryappointment entities
     */
    async listSurgeryappointmentRaw(requestParameters: ListSurgeryappointmentRequest): Promise<runtime.ApiResponse<Array<EntSurgeryappointment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgeryappointments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSurgeryappointmentFromJSON));
    }

    /**
     * list surgeryappointment entities
     * List surgeryappointment entities
     */
    async listSurgeryappointment(requestParameters: ListSurgeryappointmentRequest): Promise<Array<EntSurgeryappointment>> {
        const response = await this.listSurgeryappointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list surgerytype entities
     * List surgerytype entities
     */
    async listSurgerytypeRaw(requestParameters: ListSurgerytypeRequest): Promise<runtime.ApiResponse<Array<EntSurgerytype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/surgerytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSurgerytypeFromJSON));
    }

    /**
     * list surgerytype entities
     * List surgerytype entities
     */
    async listSurgerytype(requestParameters: ListSurgerytypeRequest): Promise<Array<EntSurgerytype>> {
        const response = await this.listSurgerytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update antenatalinformation by ID
     * Update a antenatalinformation entity by ID
     */
    async updateAntenatalinformationRaw(requestParameters: UpdateAntenatalinformationRequest): Promise<runtime.ApiResponse<EntAntenatalinformation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAntenatalinformation.');
        }

        if (requestParameters.antenatalinformation === null || requestParameters.antenatalinformation === undefined) {
            throw new runtime.RequiredError('antenatalinformation','Required parameter requestParameters.antenatalinformation was null or undefined when calling updateAntenatalinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/antenatalinformations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAntenatalinformationToJSON(requestParameters.antenatalinformation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAntenatalinformationFromJSON(jsonValue));
    }

    /**
     * update antenatalinformation by ID
     * Update a antenatalinformation entity by ID
     */
    async updateAntenatalinformation(requestParameters: UpdateAntenatalinformationRequest): Promise<EntAntenatalinformation> {
        const response = await this.updateAntenatalinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDiseaseRaw(requestParameters: UpdateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisease.');
        }

        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling updateDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDisease(requestParameters: UpdateDiseaseRequest): Promise<EntDisease> {
        const response = await this.updateDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctorordersheet by ID
     */
    async updateDoctorordersheetRaw(requestParameters: UpdateDoctorordersheetRequest): Promise<runtime.ApiResponse<EntDoctorOrderSheet>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctorordersheet.');
        }

        if (requestParameters.doctorordersheet === null || requestParameters.doctorordersheet === undefined) {
            throw new runtime.RequiredError('doctorordersheet','Required parameter requestParameters.doctorordersheet was null or undefined when calling updateDoctorordersheet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctorordersheets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorOrderSheetToJSON(requestParameters.doctorordersheet),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorOrderSheetFromJSON(jsonValue));
    }

    /**
     * update doctorordersheet by ID
     */
    async updateDoctorordersheet(requestParameters: UpdateDoctorordersheetRequest): Promise<EntDoctorOrderSheet> {
        const response = await this.updateDoctorordersheetRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update personnel by ID
     * Update a personnel entity by ID
     */
    async updatePersonnelRaw(requestParameters: UpdatePersonnelRequest): Promise<runtime.ApiResponse<EntPersonnel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePersonnel.');
        }

        if (requestParameters.personnel === null || requestParameters.personnel === undefined) {
            throw new runtime.RequiredError('personnel','Required parameter requestParameters.personnel was null or undefined when calling updatePersonnel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/personnels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPersonnelToJSON(requestParameters.personnel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonnelFromJSON(jsonValue));
    }

    /**
     * update personnel by ID
     * Update a personnel entity by ID
     */
    async updatePersonnel(requestParameters: UpdatePersonnelRequest): Promise<EntPersonnel> {
        const response = await this.updatePersonnelRaw(requestParameters);
        return await response.value();
    }

    /**
     * update remedy by ID
     * Update a remedy entity by ID
     */
    async updateRemedyRaw(requestParameters: UpdateRemedyRequest): Promise<runtime.ApiResponse<EntRemedy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRemedy.');
        }

        if (requestParameters.remedy === null || requestParameters.remedy === undefined) {
            throw new runtime.RequiredError('remedy','Required parameter requestParameters.remedy was null or undefined when calling updateRemedy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/remedys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRemedyToJSON(requestParameters.remedy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRemedyFromJSON(jsonValue));
    }

    /**
     * update remedy by ID
     * Update a remedy entity by ID
     */
    async updateRemedy(requestParameters: UpdateRemedyRequest): Promise<EntRemedy> {
        const response = await this.updateRemedyRaw(requestParameters);
        return await response.value();
    }

    /**
     * update surgeryappointment by ID
     * Update a surgeryappointment entity by ID
     */
    async updateSurgeryappointmentRaw(requestParameters: UpdateSurgeryappointmentRequest): Promise<runtime.ApiResponse<EntSurgeryappointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSurgeryappointment.');
        }

        if (requestParameters.surgeryappointment === null || requestParameters.surgeryappointment === undefined) {
            throw new runtime.RequiredError('surgeryappointment','Required parameter requestParameters.surgeryappointment was null or undefined when calling updateSurgeryappointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/surgeryappointments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSurgeryappointmentToJSON(requestParameters.surgeryappointment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSurgeryappointmentFromJSON(jsonValue));
    }

    /**
     * update surgeryappointment by ID
     * Update a surgeryappointment entity by ID
     */
    async updateSurgeryappointment(requestParameters: UpdateSurgeryappointmentRequest): Promise<EntSurgeryappointment> {
        const response = await this.updateSurgeryappointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update surgerytype by ID
     * Update a surgerytype entity by ID
     */
    async updateSurgerytypeRaw(requestParameters: UpdateSurgerytypeRequest): Promise<runtime.ApiResponse<EntSurgerytype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSurgerytype.');
        }

        if (requestParameters.surgerytype === null || requestParameters.surgerytype === undefined) {
            throw new runtime.RequiredError('surgerytype','Required parameter requestParameters.surgerytype was null or undefined when calling updateSurgerytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/surgerytypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSurgerytypeToJSON(requestParameters.surgerytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSurgerytypeFromJSON(jsonValue));
    }

    /**
     * update surgerytype by ID
     * Update a surgerytype entity by ID
     */
    async updateSurgerytype(requestParameters: UpdateSurgerytypeRequest): Promise<EntSurgerytype> {
        const response = await this.updateSurgerytypeRaw(requestParameters);
        return await response.value();
    }

}
