// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/remedy"
)

// BonediseaseUpdate is the builder for updating Bonedisease entities.
type BonediseaseUpdate struct {
	config
	hooks    []Hook
	mutation *BonediseaseMutation
}

// Where adds a new predicate for the BonediseaseUpdate builder.
func (bu *BonediseaseUpdate) Where(ps ...predicate.Bonedisease) *BonediseaseUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetAddedTime sets the "addedTime" field.
func (bu *BonediseaseUpdate) SetAddedTime(t time.Time) *BonediseaseUpdate {
	bu.mutation.SetAddedTime(t)
	return bu
}

// SetNillableAddedTime sets the "addedTime" field if the given value is not nil.
func (bu *BonediseaseUpdate) SetNillableAddedTime(t *time.Time) *BonediseaseUpdate {
	if t != nil {
		bu.SetAddedTime(*t)
	}
	return bu
}

// SetAdvice sets the "advice" field.
func (bu *BonediseaseUpdate) SetAdvice(s string) *BonediseaseUpdate {
	bu.mutation.SetAdvice(s)
	return bu
}

// SetTel sets the "tel" field.
func (bu *BonediseaseUpdate) SetTel(s string) *BonediseaseUpdate {
	bu.mutation.SetTel(s)
	return bu
}

// SetIdentificationCard sets the "identificationCard" field.
func (bu *BonediseaseUpdate) SetIdentificationCard(s string) *BonediseaseUpdate {
	bu.mutation.SetIdentificationCard(s)
	return bu
}

// SetRemedyID sets the "remedy" edge to the Remedy entity by ID.
func (bu *BonediseaseUpdate) SetRemedyID(id int) *BonediseaseUpdate {
	bu.mutation.SetRemedyID(id)
	return bu
}

// SetNillableRemedyID sets the "remedy" edge to the Remedy entity by ID if the given value is not nil.
func (bu *BonediseaseUpdate) SetNillableRemedyID(id *int) *BonediseaseUpdate {
	if id != nil {
		bu = bu.SetRemedyID(*id)
	}
	return bu
}

// SetRemedy sets the "remedy" edge to the Remedy entity.
func (bu *BonediseaseUpdate) SetRemedy(r *Remedy) *BonediseaseUpdate {
	return bu.SetRemedyID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bu *BonediseaseUpdate) SetPatientID(id int) *BonediseaseUpdate {
	bu.mutation.SetPatientID(id)
	return bu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bu *BonediseaseUpdate) SetNillablePatientID(id *int) *BonediseaseUpdate {
	if id != nil {
		bu = bu.SetPatientID(*id)
	}
	return bu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bu *BonediseaseUpdate) SetPatient(p *Patient) *BonediseaseUpdate {
	return bu.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (bu *BonediseaseUpdate) SetPersonnelID(id int) *BonediseaseUpdate {
	bu.mutation.SetPersonnelID(id)
	return bu
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (bu *BonediseaseUpdate) SetNillablePersonnelID(id *int) *BonediseaseUpdate {
	if id != nil {
		bu = bu.SetPersonnelID(*id)
	}
	return bu
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (bu *BonediseaseUpdate) SetPersonnel(p *Personnel) *BonediseaseUpdate {
	return bu.SetPersonnelID(p.ID)
}

// Mutation returns the BonediseaseMutation object of the builder.
func (bu *BonediseaseUpdate) Mutation() *BonediseaseMutation {
	return bu.mutation
}

// ClearRemedy clears the "remedy" edge to the Remedy entity.
func (bu *BonediseaseUpdate) ClearRemedy() *BonediseaseUpdate {
	bu.mutation.ClearRemedy()
	return bu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (bu *BonediseaseUpdate) ClearPatient() *BonediseaseUpdate {
	bu.mutation.ClearPatient()
	return bu
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (bu *BonediseaseUpdate) ClearPersonnel() *BonediseaseUpdate {
	bu.mutation.ClearPersonnel()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BonediseaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BonediseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BonediseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BonediseaseUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BonediseaseUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BonediseaseUpdate) check() error {
	if v, ok := bu.mutation.Advice(); ok {
		if err := bonedisease.AdviceValidator(v); err != nil {
			return &ValidationError{Name: "advice", err: fmt.Errorf("ent: validator failed for field \"advice\": %w", err)}
		}
	}
	if v, ok := bu.mutation.Tel(); ok {
		if err := bonedisease.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf("ent: validator failed for field \"tel\": %w", err)}
		}
	}
	if v, ok := bu.mutation.IdentificationCard(); ok {
		if err := bonedisease.IdentificationCardValidator(v); err != nil {
			return &ValidationError{Name: "identificationCard", err: fmt.Errorf("ent: validator failed for field \"identificationCard\": %w", err)}
		}
	}
	return nil
}

func (bu *BonediseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bonedisease.Table,
			Columns: bonedisease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bonedisease.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bonedisease.FieldAddedTime,
		})
	}
	if value, ok := bu.mutation.Advice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldAdvice,
		})
	}
	if value, ok := bu.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldTel,
		})
	}
	if value, ok := bu.mutation.IdentificationCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldIdentificationCard,
		})
	}
	if bu.mutation.RemedyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.RemedyTable,
			Columns: []string{bonedisease.RemedyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remedy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemedyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.RemedyTable,
			Columns: []string{bonedisease.RemedyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remedy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PatientTable,
			Columns: []string{bonedisease.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PatientTable,
			Columns: []string{bonedisease.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PersonnelTable,
			Columns: []string{bonedisease.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PersonnelTable,
			Columns: []string{bonedisease.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bonedisease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BonediseaseUpdateOne is the builder for updating a single Bonedisease entity.
type BonediseaseUpdateOne struct {
	config
	hooks    []Hook
	mutation *BonediseaseMutation
}

// SetAddedTime sets the "addedTime" field.
func (buo *BonediseaseUpdateOne) SetAddedTime(t time.Time) *BonediseaseUpdateOne {
	buo.mutation.SetAddedTime(t)
	return buo
}

// SetNillableAddedTime sets the "addedTime" field if the given value is not nil.
func (buo *BonediseaseUpdateOne) SetNillableAddedTime(t *time.Time) *BonediseaseUpdateOne {
	if t != nil {
		buo.SetAddedTime(*t)
	}
	return buo
}

// SetAdvice sets the "advice" field.
func (buo *BonediseaseUpdateOne) SetAdvice(s string) *BonediseaseUpdateOne {
	buo.mutation.SetAdvice(s)
	return buo
}

// SetTel sets the "tel" field.
func (buo *BonediseaseUpdateOne) SetTel(s string) *BonediseaseUpdateOne {
	buo.mutation.SetTel(s)
	return buo
}

// SetIdentificationCard sets the "identificationCard" field.
func (buo *BonediseaseUpdateOne) SetIdentificationCard(s string) *BonediseaseUpdateOne {
	buo.mutation.SetIdentificationCard(s)
	return buo
}

// SetRemedyID sets the "remedy" edge to the Remedy entity by ID.
func (buo *BonediseaseUpdateOne) SetRemedyID(id int) *BonediseaseUpdateOne {
	buo.mutation.SetRemedyID(id)
	return buo
}

// SetNillableRemedyID sets the "remedy" edge to the Remedy entity by ID if the given value is not nil.
func (buo *BonediseaseUpdateOne) SetNillableRemedyID(id *int) *BonediseaseUpdateOne {
	if id != nil {
		buo = buo.SetRemedyID(*id)
	}
	return buo
}

// SetRemedy sets the "remedy" edge to the Remedy entity.
func (buo *BonediseaseUpdateOne) SetRemedy(r *Remedy) *BonediseaseUpdateOne {
	return buo.SetRemedyID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (buo *BonediseaseUpdateOne) SetPatientID(id int) *BonediseaseUpdateOne {
	buo.mutation.SetPatientID(id)
	return buo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (buo *BonediseaseUpdateOne) SetNillablePatientID(id *int) *BonediseaseUpdateOne {
	if id != nil {
		buo = buo.SetPatientID(*id)
	}
	return buo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (buo *BonediseaseUpdateOne) SetPatient(p *Patient) *BonediseaseUpdateOne {
	return buo.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (buo *BonediseaseUpdateOne) SetPersonnelID(id int) *BonediseaseUpdateOne {
	buo.mutation.SetPersonnelID(id)
	return buo
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (buo *BonediseaseUpdateOne) SetNillablePersonnelID(id *int) *BonediseaseUpdateOne {
	if id != nil {
		buo = buo.SetPersonnelID(*id)
	}
	return buo
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (buo *BonediseaseUpdateOne) SetPersonnel(p *Personnel) *BonediseaseUpdateOne {
	return buo.SetPersonnelID(p.ID)
}

// Mutation returns the BonediseaseMutation object of the builder.
func (buo *BonediseaseUpdateOne) Mutation() *BonediseaseMutation {
	return buo.mutation
}

// ClearRemedy clears the "remedy" edge to the Remedy entity.
func (buo *BonediseaseUpdateOne) ClearRemedy() *BonediseaseUpdateOne {
	buo.mutation.ClearRemedy()
	return buo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (buo *BonediseaseUpdateOne) ClearPatient() *BonediseaseUpdateOne {
	buo.mutation.ClearPatient()
	return buo
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (buo *BonediseaseUpdateOne) ClearPersonnel() *BonediseaseUpdateOne {
	buo.mutation.ClearPersonnel()
	return buo
}

// Save executes the query and returns the updated Bonedisease entity.
func (buo *BonediseaseUpdateOne) Save(ctx context.Context) (*Bonedisease, error) {
	var (
		err  error
		node *Bonedisease
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BonediseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BonediseaseUpdateOne) SaveX(ctx context.Context) *Bonedisease {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BonediseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BonediseaseUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BonediseaseUpdateOne) check() error {
	if v, ok := buo.mutation.Advice(); ok {
		if err := bonedisease.AdviceValidator(v); err != nil {
			return &ValidationError{Name: "advice", err: fmt.Errorf("ent: validator failed for field \"advice\": %w", err)}
		}
	}
	if v, ok := buo.mutation.Tel(); ok {
		if err := bonedisease.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf("ent: validator failed for field \"tel\": %w", err)}
		}
	}
	if v, ok := buo.mutation.IdentificationCard(); ok {
		if err := bonedisease.IdentificationCardValidator(v); err != nil {
			return &ValidationError{Name: "identificationCard", err: fmt.Errorf("ent: validator failed for field \"identificationCard\": %w", err)}
		}
	}
	return nil
}

func (buo *BonediseaseUpdateOne) sqlSave(ctx context.Context) (_node *Bonedisease, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bonedisease.Table,
			Columns: bonedisease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bonedisease.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bonedisease.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bonedisease.FieldAddedTime,
		})
	}
	if value, ok := buo.mutation.Advice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldAdvice,
		})
	}
	if value, ok := buo.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldTel,
		})
	}
	if value, ok := buo.mutation.IdentificationCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldIdentificationCard,
		})
	}
	if buo.mutation.RemedyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.RemedyTable,
			Columns: []string{bonedisease.RemedyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remedy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemedyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.RemedyTable,
			Columns: []string{bonedisease.RemedyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remedy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PatientTable,
			Columns: []string{bonedisease.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PatientTable,
			Columns: []string{bonedisease.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PersonnelTable,
			Columns: []string{bonedisease.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PersonnelTable,
			Columns: []string{bonedisease.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bonedisease{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bonedisease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
