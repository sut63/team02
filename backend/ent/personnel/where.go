// Code generated by entc, DO NOT EDIT.

package personnel

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/to63/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Department applies equality check predicate on the "department" field. It's identical to DepartmentEQ.
func Department(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartment), v))
	})
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartment), v))
	})
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartment), v))
	})
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepartment), v...))
	})
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepartment), v...))
	})
}

// DepartmentGT applies the GT predicate on the "department" field.
func DepartmentGT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartment), v))
	})
}

// DepartmentGTE applies the GTE predicate on the "department" field.
func DepartmentGTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartment), v))
	})
}

// DepartmentLT applies the LT predicate on the "department" field.
func DepartmentLT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartment), v))
	})
}

// DepartmentLTE applies the LTE predicate on the "department" field.
func DepartmentLTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartment), v))
	})
}

// DepartmentContains applies the Contains predicate on the "department" field.
func DepartmentContains(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDepartment), v))
	})
}

// DepartmentHasPrefix applies the HasPrefix predicate on the "department" field.
func DepartmentHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDepartment), v))
	})
}

// DepartmentHasSuffix applies the HasSuffix predicate on the "department" field.
func DepartmentHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDepartment), v))
	})
}

// DepartmentEqualFold applies the EqualFold predicate on the "department" field.
func DepartmentEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDepartment), v))
	})
}

// DepartmentContainsFold applies the ContainsFold predicate on the "department" field.
func DepartmentContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDepartment), v))
	})
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUser), v))
	})
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUser), v...))
	})
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUser), v...))
	})
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUser), v))
	})
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUser), v))
	})
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUser), v))
	})
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUser), v))
	})
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUser), v))
	})
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUser), v))
	})
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUser), v))
	})
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUser), v))
	})
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUser), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Personnel {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Personnel(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// HasPhysicaltherapyrecord applies the HasEdge predicate on the "physicaltherapyrecord" edge.
func HasPhysicaltherapyrecord() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicaltherapyrecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhysicaltherapyrecordTable, PhysicaltherapyrecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhysicaltherapyrecordWith applies the HasEdge predicate on the "physicaltherapyrecord" edge with a given conditions (other predicates).
func HasPhysicaltherapyrecordWith(preds ...predicate.Physicaltherapyrecord) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicaltherapyrecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhysicaltherapyrecordTable, PhysicaltherapyrecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBonedisease applies the HasEdge predicate on the "Bonedisease" edge.
func HasBonedisease() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BonediseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BonediseaseTable, BonediseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBonediseaseWith applies the HasEdge predicate on the "Bonedisease" edge with a given conditions (other predicates).
func HasBonediseaseWith(preds ...predicate.Bonedisease) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BonediseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BonediseaseTable, BonediseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChecksymptom applies the HasEdge predicate on the "Checksymptom" edge.
func HasChecksymptom() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChecksymptomTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChecksymptomTable, ChecksymptomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChecksymptomWith applies the HasEdge predicate on the "Checksymptom" edge with a given conditions (other predicates).
func HasChecksymptomWith(preds ...predicate.Checksymptom) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChecksymptomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChecksymptomTable, ChecksymptomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDentalappointment applies the HasEdge predicate on the "Dentalappointment" edge.
func HasDentalappointment() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentalappointmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentalappointmentTable, DentalappointmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDentalappointmentWith applies the HasEdge predicate on the "Dentalappointment" edge with a given conditions (other predicates).
func HasDentalappointmentWith(preds ...predicate.Dentalappointment) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentalappointmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentalappointmentTable, DentalappointmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurgeryappointment applies the HasEdge predicate on the "Surgeryappointment" edge.
func HasSurgeryappointment() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SurgeryappointmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurgeryappointmentTable, SurgeryappointmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurgeryappointmentWith applies the HasEdge predicate on the "Surgeryappointment" edge with a given conditions (other predicates).
func HasSurgeryappointmentWith(preds ...predicate.Surgeryappointment) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SurgeryappointmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurgeryappointmentTable, SurgeryappointmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAntenatalinformation applies the HasEdge predicate on the "Antenatalinformation" edge.
func HasAntenatalinformation() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AntenatalinformationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AntenatalinformationTable, AntenatalinformationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAntenatalinformationWith applies the HasEdge predicate on the "Antenatalinformation" edge with a given conditions (other predicates).
func HasAntenatalinformationWith(preds ...predicate.Antenatalinformation) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AntenatalinformationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AntenatalinformationTable, AntenatalinformationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		p(s.Not())
	})
}
