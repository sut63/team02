// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/checksymptom"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/dentalkind"
	"github.com/to63/app/ent/disease"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/physicaltherapyrecord"
	"github.com/to63/app/ent/physicaltherapyroom"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/remedy"
	"github.com/to63/app/ent/risks"
	"github.com/to63/app/ent/status"
	"github.com/to63/app/ent/surgeryappointment"
	"github.com/to63/app/ent/surgerytype"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAntenatalinformation  = "Antenatalinformation"
	TypeBonedisease           = "Bonedisease"
	TypeChecksymptom          = "Checksymptom"
	TypeDentalappointment     = "Dentalappointment"
	TypeDentalkind            = "Dentalkind"
	TypeDisease               = "Disease"
	TypeDoctorordersheet      = "Doctorordersheet"
	TypePatient               = "Patient"
	TypePersonnel             = "Personnel"
	TypePhysicaltherapyrecord = "Physicaltherapyrecord"
	TypePhysicaltherapyroom   = "Physicaltherapyroom"
	TypePregnancystatus       = "Pregnancystatus"
	TypeRemedy                = "Remedy"
	TypeRisks                 = "Risks"
	TypeStatus                = "Status"
	TypeSurgeryappointment    = "Surgeryappointment"
	TypeSurgerytype           = "Surgerytype"
)

// AntenatalinformationMutation represents an operation that mutates the Antenatalinformation nodes in the graph.
type AntenatalinformationMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	gestationalage          *int
	addgestationalage       *int
	time                    *time.Time
	clearedFields           map[string]struct{}
	_Personnel              *int
	cleared_Personnel       bool
	_Patient                *int
	cleared_Patient         bool
	_Pregnancystatus        *int
	cleared_Pregnancystatus bool
	_Risks                  *int
	cleared_Risks           bool
	done                    bool
	oldValue                func(context.Context) (*Antenatalinformation, error)
	predicates              []predicate.Antenatalinformation
}

var _ ent.Mutation = (*AntenatalinformationMutation)(nil)

// antenatalinformationOption allows management of the mutation configuration using functional options.
type antenatalinformationOption func(*AntenatalinformationMutation)

// newAntenatalinformationMutation creates new mutation for the Antenatalinformation entity.
func newAntenatalinformationMutation(c config, op Op, opts ...antenatalinformationOption) *AntenatalinformationMutation {
	m := &AntenatalinformationMutation{
		config:        c,
		op:            op,
		typ:           TypeAntenatalinformation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAntenatalinformationID sets the ID field of the mutation.
func withAntenatalinformationID(id int) antenatalinformationOption {
	return func(m *AntenatalinformationMutation) {
		var (
			err   error
			once  sync.Once
			value *Antenatalinformation
		)
		m.oldValue = func(ctx context.Context) (*Antenatalinformation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Antenatalinformation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAntenatalinformation sets the old Antenatalinformation of the mutation.
func withAntenatalinformation(node *Antenatalinformation) antenatalinformationOption {
	return func(m *AntenatalinformationMutation) {
		m.oldValue = func(context.Context) (*Antenatalinformation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AntenatalinformationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AntenatalinformationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AntenatalinformationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGestationalage sets the "gestationalage" field.
func (m *AntenatalinformationMutation) SetGestationalage(i int) {
	m.gestationalage = &i
	m.addgestationalage = nil
}

// Gestationalage returns the value of the "gestationalage" field in the mutation.
func (m *AntenatalinformationMutation) Gestationalage() (r int, exists bool) {
	v := m.gestationalage
	if v == nil {
		return
	}
	return *v, true
}

// OldGestationalage returns the old "gestationalage" field's value of the Antenatalinformation entity.
// If the Antenatalinformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AntenatalinformationMutation) OldGestationalage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGestationalage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGestationalage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGestationalage: %w", err)
	}
	return oldValue.Gestationalage, nil
}

// AddGestationalage adds i to the "gestationalage" field.
func (m *AntenatalinformationMutation) AddGestationalage(i int) {
	if m.addgestationalage != nil {
		*m.addgestationalage += i
	} else {
		m.addgestationalage = &i
	}
}

// AddedGestationalage returns the value that was added to the "gestationalage" field in this mutation.
func (m *AntenatalinformationMutation) AddedGestationalage() (r int, exists bool) {
	v := m.addgestationalage
	if v == nil {
		return
	}
	return *v, true
}

// ResetGestationalage resets all changes to the "gestationalage" field.
func (m *AntenatalinformationMutation) ResetGestationalage() {
	m.gestationalage = nil
	m.addgestationalage = nil
}

// SetTime sets the "time" field.
func (m *AntenatalinformationMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *AntenatalinformationMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Antenatalinformation entity.
// If the Antenatalinformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AntenatalinformationMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *AntenatalinformationMutation) ResetTime() {
	m.time = nil
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by id.
func (m *AntenatalinformationMutation) SetPersonnelID(id int) {
	m._Personnel = &id
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (m *AntenatalinformationMutation) ClearPersonnel() {
	m.cleared_Personnel = true
}

// PersonnelCleared returns if the "Personnel" edge to the Personnel entity was cleared.
func (m *AntenatalinformationMutation) PersonnelCleared() bool {
	return m.cleared_Personnel
}

// PersonnelID returns the "Personnel" edge ID in the mutation.
func (m *AntenatalinformationMutation) PersonnelID() (id int, exists bool) {
	if m._Personnel != nil {
		return *m._Personnel, true
	}
	return
}

// PersonnelIDs returns the "Personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *AntenatalinformationMutation) PersonnelIDs() (ids []int) {
	if id := m._Personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "Personnel" edge.
func (m *AntenatalinformationMutation) ResetPersonnel() {
	m._Personnel = nil
	m.cleared_Personnel = false
}

// SetPatientID sets the "Patient" edge to the Patient entity by id.
func (m *AntenatalinformationMutation) SetPatientID(id int) {
	m._Patient = &id
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (m *AntenatalinformationMutation) ClearPatient() {
	m.cleared_Patient = true
}

// PatientCleared returns if the "Patient" edge to the Patient entity was cleared.
func (m *AntenatalinformationMutation) PatientCleared() bool {
	return m.cleared_Patient
}

// PatientID returns the "Patient" edge ID in the mutation.
func (m *AntenatalinformationMutation) PatientID() (id int, exists bool) {
	if m._Patient != nil {
		return *m._Patient, true
	}
	return
}

// PatientIDs returns the "Patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *AntenatalinformationMutation) PatientIDs() (ids []int) {
	if id := m._Patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "Patient" edge.
func (m *AntenatalinformationMutation) ResetPatient() {
	m._Patient = nil
	m.cleared_Patient = false
}

// SetPregnancystatusID sets the "Pregnancystatus" edge to the Pregnancystatus entity by id.
func (m *AntenatalinformationMutation) SetPregnancystatusID(id int) {
	m._Pregnancystatus = &id
}

// ClearPregnancystatus clears the "Pregnancystatus" edge to the Pregnancystatus entity.
func (m *AntenatalinformationMutation) ClearPregnancystatus() {
	m.cleared_Pregnancystatus = true
}

// PregnancystatusCleared returns if the "Pregnancystatus" edge to the Pregnancystatus entity was cleared.
func (m *AntenatalinformationMutation) PregnancystatusCleared() bool {
	return m.cleared_Pregnancystatus
}

// PregnancystatusID returns the "Pregnancystatus" edge ID in the mutation.
func (m *AntenatalinformationMutation) PregnancystatusID() (id int, exists bool) {
	if m._Pregnancystatus != nil {
		return *m._Pregnancystatus, true
	}
	return
}

// PregnancystatusIDs returns the "Pregnancystatus" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PregnancystatusID instead. It exists only for internal usage by the builders.
func (m *AntenatalinformationMutation) PregnancystatusIDs() (ids []int) {
	if id := m._Pregnancystatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPregnancystatus resets all changes to the "Pregnancystatus" edge.
func (m *AntenatalinformationMutation) ResetPregnancystatus() {
	m._Pregnancystatus = nil
	m.cleared_Pregnancystatus = false
}

// SetRisksID sets the "Risks" edge to the Risks entity by id.
func (m *AntenatalinformationMutation) SetRisksID(id int) {
	m._Risks = &id
}

// ClearRisks clears the "Risks" edge to the Risks entity.
func (m *AntenatalinformationMutation) ClearRisks() {
	m.cleared_Risks = true
}

// RisksCleared returns if the "Risks" edge to the Risks entity was cleared.
func (m *AntenatalinformationMutation) RisksCleared() bool {
	return m.cleared_Risks
}

// RisksID returns the "Risks" edge ID in the mutation.
func (m *AntenatalinformationMutation) RisksID() (id int, exists bool) {
	if m._Risks != nil {
		return *m._Risks, true
	}
	return
}

// RisksIDs returns the "Risks" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RisksID instead. It exists only for internal usage by the builders.
func (m *AntenatalinformationMutation) RisksIDs() (ids []int) {
	if id := m._Risks; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRisks resets all changes to the "Risks" edge.
func (m *AntenatalinformationMutation) ResetRisks() {
	m._Risks = nil
	m.cleared_Risks = false
}

// Op returns the operation name.
func (m *AntenatalinformationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Antenatalinformation).
func (m *AntenatalinformationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AntenatalinformationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.gestationalage != nil {
		fields = append(fields, antenatalinformation.FieldGestationalage)
	}
	if m.time != nil {
		fields = append(fields, antenatalinformation.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AntenatalinformationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case antenatalinformation.FieldGestationalage:
		return m.Gestationalage()
	case antenatalinformation.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AntenatalinformationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case antenatalinformation.FieldGestationalage:
		return m.OldGestationalage(ctx)
	case antenatalinformation.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown Antenatalinformation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AntenatalinformationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case antenatalinformation.FieldGestationalage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGestationalage(v)
		return nil
	case antenatalinformation.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown Antenatalinformation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AntenatalinformationMutation) AddedFields() []string {
	var fields []string
	if m.addgestationalage != nil {
		fields = append(fields, antenatalinformation.FieldGestationalage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AntenatalinformationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case antenatalinformation.FieldGestationalage:
		return m.AddedGestationalage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AntenatalinformationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case antenatalinformation.FieldGestationalage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGestationalage(v)
		return nil
	}
	return fmt.Errorf("unknown Antenatalinformation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AntenatalinformationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AntenatalinformationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AntenatalinformationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Antenatalinformation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AntenatalinformationMutation) ResetField(name string) error {
	switch name {
	case antenatalinformation.FieldGestationalage:
		m.ResetGestationalage()
		return nil
	case antenatalinformation.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown Antenatalinformation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AntenatalinformationMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._Personnel != nil {
		edges = append(edges, antenatalinformation.EdgePersonnel)
	}
	if m._Patient != nil {
		edges = append(edges, antenatalinformation.EdgePatient)
	}
	if m._Pregnancystatus != nil {
		edges = append(edges, antenatalinformation.EdgePregnancystatus)
	}
	if m._Risks != nil {
		edges = append(edges, antenatalinformation.EdgeRisks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AntenatalinformationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case antenatalinformation.EdgePersonnel:
		if id := m._Personnel; id != nil {
			return []ent.Value{*id}
		}
	case antenatalinformation.EdgePatient:
		if id := m._Patient; id != nil {
			return []ent.Value{*id}
		}
	case antenatalinformation.EdgePregnancystatus:
		if id := m._Pregnancystatus; id != nil {
			return []ent.Value{*id}
		}
	case antenatalinformation.EdgeRisks:
		if id := m._Risks; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AntenatalinformationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AntenatalinformationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AntenatalinformationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_Personnel {
		edges = append(edges, antenatalinformation.EdgePersonnel)
	}
	if m.cleared_Patient {
		edges = append(edges, antenatalinformation.EdgePatient)
	}
	if m.cleared_Pregnancystatus {
		edges = append(edges, antenatalinformation.EdgePregnancystatus)
	}
	if m.cleared_Risks {
		edges = append(edges, antenatalinformation.EdgeRisks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AntenatalinformationMutation) EdgeCleared(name string) bool {
	switch name {
	case antenatalinformation.EdgePersonnel:
		return m.cleared_Personnel
	case antenatalinformation.EdgePatient:
		return m.cleared_Patient
	case antenatalinformation.EdgePregnancystatus:
		return m.cleared_Pregnancystatus
	case antenatalinformation.EdgeRisks:
		return m.cleared_Risks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AntenatalinformationMutation) ClearEdge(name string) error {
	switch name {
	case antenatalinformation.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case antenatalinformation.EdgePatient:
		m.ClearPatient()
		return nil
	case antenatalinformation.EdgePregnancystatus:
		m.ClearPregnancystatus()
		return nil
	case antenatalinformation.EdgeRisks:
		m.ClearRisks()
		return nil
	}
	return fmt.Errorf("unknown Antenatalinformation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AntenatalinformationMutation) ResetEdge(name string) error {
	switch name {
	case antenatalinformation.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case antenatalinformation.EdgePatient:
		m.ResetPatient()
		return nil
	case antenatalinformation.EdgePregnancystatus:
		m.ResetPregnancystatus()
		return nil
	case antenatalinformation.EdgeRisks:
		m.ResetRisks()
		return nil
	}
	return fmt.Errorf("unknown Antenatalinformation edge %s", name)
}

// BonediseaseMutation represents an operation that mutates the Bonedisease nodes in the graph.
type BonediseaseMutation struct {
	config
	op               Op
	typ              string
	id               *int
	addedTime        *time.Time
	advice           *string
	clearedFields    map[string]struct{}
	remedy           *int
	clearedremedy    bool
	patient          *int
	clearedpatient   bool
	personnel        *int
	clearedpersonnel bool
	done             bool
	oldValue         func(context.Context) (*Bonedisease, error)
	predicates       []predicate.Bonedisease
}

var _ ent.Mutation = (*BonediseaseMutation)(nil)

// bonediseaseOption allows management of the mutation configuration using functional options.
type bonediseaseOption func(*BonediseaseMutation)

// newBonediseaseMutation creates new mutation for the Bonedisease entity.
func newBonediseaseMutation(c config, op Op, opts ...bonediseaseOption) *BonediseaseMutation {
	m := &BonediseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeBonedisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBonediseaseID sets the ID field of the mutation.
func withBonediseaseID(id int) bonediseaseOption {
	return func(m *BonediseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Bonedisease
		)
		m.oldValue = func(ctx context.Context) (*Bonedisease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bonedisease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBonedisease sets the old Bonedisease of the mutation.
func withBonedisease(node *Bonedisease) bonediseaseOption {
	return func(m *BonediseaseMutation) {
		m.oldValue = func(context.Context) (*Bonedisease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BonediseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BonediseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *BonediseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the "addedTime" field.
func (m *BonediseaseMutation) SetAddedTime(t time.Time) {
	m.addedTime = &t
}

// AddedTime returns the value of the "addedTime" field in the mutation.
func (m *BonediseaseMutation) AddedTime() (r time.Time, exists bool) {
	v := m.addedTime
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old "addedTime" field's value of the Bonedisease entity.
// If the Bonedisease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonediseaseMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime resets all changes to the "addedTime" field.
func (m *BonediseaseMutation) ResetAddedTime() {
	m.addedTime = nil
}

// SetAdvice sets the "advice" field.
func (m *BonediseaseMutation) SetAdvice(s string) {
	m.advice = &s
}

// Advice returns the value of the "advice" field in the mutation.
func (m *BonediseaseMutation) Advice() (r string, exists bool) {
	v := m.advice
	if v == nil {
		return
	}
	return *v, true
}

// OldAdvice returns the old "advice" field's value of the Bonedisease entity.
// If the Bonedisease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonediseaseMutation) OldAdvice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdvice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdvice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdvice: %w", err)
	}
	return oldValue.Advice, nil
}

// ResetAdvice resets all changes to the "advice" field.
func (m *BonediseaseMutation) ResetAdvice() {
	m.advice = nil
}

// SetRemedyID sets the "remedy" edge to the Remedy entity by id.
func (m *BonediseaseMutation) SetRemedyID(id int) {
	m.remedy = &id
}

// ClearRemedy clears the "remedy" edge to the Remedy entity.
func (m *BonediseaseMutation) ClearRemedy() {
	m.clearedremedy = true
}

// RemedyCleared returns if the "remedy" edge to the Remedy entity was cleared.
func (m *BonediseaseMutation) RemedyCleared() bool {
	return m.clearedremedy
}

// RemedyID returns the "remedy" edge ID in the mutation.
func (m *BonediseaseMutation) RemedyID() (id int, exists bool) {
	if m.remedy != nil {
		return *m.remedy, true
	}
	return
}

// RemedyIDs returns the "remedy" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RemedyID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) RemedyIDs() (ids []int) {
	if id := m.remedy; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRemedy resets all changes to the "remedy" edge.
func (m *BonediseaseMutation) ResetRemedy() {
	m.remedy = nil
	m.clearedremedy = false
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *BonediseaseMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *BonediseaseMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the "patient" edge to the Patient entity was cleared.
func (m *BonediseaseMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *BonediseaseMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *BonediseaseMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by id.
func (m *BonediseaseMutation) SetPersonnelID(id int) {
	m.personnel = &id
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (m *BonediseaseMutation) ClearPersonnel() {
	m.clearedpersonnel = true
}

// PersonnelCleared returns if the "personnel" edge to the Personnel entity was cleared.
func (m *BonediseaseMutation) PersonnelCleared() bool {
	return m.clearedpersonnel
}

// PersonnelID returns the "personnel" edge ID in the mutation.
func (m *BonediseaseMutation) PersonnelID() (id int, exists bool) {
	if m.personnel != nil {
		return *m.personnel, true
	}
	return
}

// PersonnelIDs returns the "personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) PersonnelIDs() (ids []int) {
	if id := m.personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "personnel" edge.
func (m *BonediseaseMutation) ResetPersonnel() {
	m.personnel = nil
	m.clearedpersonnel = false
}

// Op returns the operation name.
func (m *BonediseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bonedisease).
func (m *BonediseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BonediseaseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.addedTime != nil {
		fields = append(fields, bonedisease.FieldAddedTime)
	}
	if m.advice != nil {
		fields = append(fields, bonedisease.FieldAdvice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BonediseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bonedisease.FieldAddedTime:
		return m.AddedTime()
	case bonedisease.FieldAdvice:
		return m.Advice()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BonediseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bonedisease.FieldAddedTime:
		return m.OldAddedTime(ctx)
	case bonedisease.FieldAdvice:
		return m.OldAdvice(ctx)
	}
	return nil, fmt.Errorf("unknown Bonedisease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonediseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bonedisease.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	case bonedisease.FieldAdvice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdvice(v)
		return nil
	}
	return fmt.Errorf("unknown Bonedisease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BonediseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BonediseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonediseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bonedisease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BonediseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BonediseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BonediseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bonedisease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BonediseaseMutation) ResetField(name string) error {
	switch name {
	case bonedisease.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	case bonedisease.FieldAdvice:
		m.ResetAdvice()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BonediseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.remedy != nil {
		edges = append(edges, bonedisease.EdgeRemedy)
	}
	if m.patient != nil {
		edges = append(edges, bonedisease.EdgePatient)
	}
	if m.personnel != nil {
		edges = append(edges, bonedisease.EdgePersonnel)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BonediseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bonedisease.EdgeRemedy:
		if id := m.remedy; id != nil {
			return []ent.Value{*id}
		}
	case bonedisease.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case bonedisease.EdgePersonnel:
		if id := m.personnel; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BonediseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BonediseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BonediseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedremedy {
		edges = append(edges, bonedisease.EdgeRemedy)
	}
	if m.clearedpatient {
		edges = append(edges, bonedisease.EdgePatient)
	}
	if m.clearedpersonnel {
		edges = append(edges, bonedisease.EdgePersonnel)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BonediseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case bonedisease.EdgeRemedy:
		return m.clearedremedy
	case bonedisease.EdgePatient:
		return m.clearedpatient
	case bonedisease.EdgePersonnel:
		return m.clearedpersonnel
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BonediseaseMutation) ClearEdge(name string) error {
	switch name {
	case bonedisease.EdgeRemedy:
		m.ClearRemedy()
		return nil
	case bonedisease.EdgePatient:
		m.ClearPatient()
		return nil
	case bonedisease.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BonediseaseMutation) ResetEdge(name string) error {
	switch name {
	case bonedisease.EdgeRemedy:
		m.ResetRemedy()
		return nil
	case bonedisease.EdgePatient:
		m.ResetPatient()
		return nil
	case bonedisease.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease edge %s", name)
}

// ChecksymptomMutation represents an operation that mutates the Checksymptom nodes in the graph.
type ChecksymptomMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	date                    *time.Time
	note                    *string
	_Identitycard           *string
	phone                   *string
	clearedFields           map[string]struct{}
	patient                 *int
	clearedpatient          bool
	personnel               *int
	clearedpersonnel        bool
	doctorordersheet        *int
	cleareddoctorordersheet bool
	disease                 *int
	cleareddisease          bool
	done                    bool
	oldValue                func(context.Context) (*Checksymptom, error)
	predicates              []predicate.Checksymptom
}

var _ ent.Mutation = (*ChecksymptomMutation)(nil)

// checksymptomOption allows management of the mutation configuration using functional options.
type checksymptomOption func(*ChecksymptomMutation)

// newChecksymptomMutation creates new mutation for the Checksymptom entity.
func newChecksymptomMutation(c config, op Op, opts ...checksymptomOption) *ChecksymptomMutation {
	m := &ChecksymptomMutation{
		config:        c,
		op:            op,
		typ:           TypeChecksymptom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChecksymptomID sets the ID field of the mutation.
func withChecksymptomID(id int) checksymptomOption {
	return func(m *ChecksymptomMutation) {
		var (
			err   error
			once  sync.Once
			value *Checksymptom
		)
		m.oldValue = func(ctx context.Context) (*Checksymptom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Checksymptom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChecksymptom sets the old Checksymptom of the mutation.
func withChecksymptom(node *Checksymptom) checksymptomOption {
	return func(m *ChecksymptomMutation) {
		m.oldValue = func(context.Context) (*Checksymptom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChecksymptomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChecksymptomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChecksymptomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the "date" field.
func (m *ChecksymptomMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ChecksymptomMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Checksymptom entity.
// If the Checksymptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChecksymptomMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ChecksymptomMutation) ResetDate() {
	m.date = nil
}

// SetNote sets the "note" field.
func (m *ChecksymptomMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *ChecksymptomMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Checksymptom entity.
// If the Checksymptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChecksymptomMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *ChecksymptomMutation) ResetNote() {
	m.note = nil
}

// SetIdentitycard sets the "Identitycard" field.
func (m *ChecksymptomMutation) SetIdentitycard(s string) {
	m._Identitycard = &s
}

// Identitycard returns the value of the "Identitycard" field in the mutation.
func (m *ChecksymptomMutation) Identitycard() (r string, exists bool) {
	v := m._Identitycard
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentitycard returns the old "Identitycard" field's value of the Checksymptom entity.
// If the Checksymptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChecksymptomMutation) OldIdentitycard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentitycard is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentitycard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentitycard: %w", err)
	}
	return oldValue.Identitycard, nil
}

// ResetIdentitycard resets all changes to the "Identitycard" field.
func (m *ChecksymptomMutation) ResetIdentitycard() {
	m._Identitycard = nil
}

// SetPhone sets the "phone" field.
func (m *ChecksymptomMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *ChecksymptomMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Checksymptom entity.
// If the Checksymptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChecksymptomMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *ChecksymptomMutation) ResetPhone() {
	m.phone = nil
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *ChecksymptomMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *ChecksymptomMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the "patient" edge to the Patient entity was cleared.
func (m *ChecksymptomMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *ChecksymptomMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *ChecksymptomMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *ChecksymptomMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by id.
func (m *ChecksymptomMutation) SetPersonnelID(id int) {
	m.personnel = &id
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (m *ChecksymptomMutation) ClearPersonnel() {
	m.clearedpersonnel = true
}

// PersonnelCleared returns if the "personnel" edge to the Personnel entity was cleared.
func (m *ChecksymptomMutation) PersonnelCleared() bool {
	return m.clearedpersonnel
}

// PersonnelID returns the "personnel" edge ID in the mutation.
func (m *ChecksymptomMutation) PersonnelID() (id int, exists bool) {
	if m.personnel != nil {
		return *m.personnel, true
	}
	return
}

// PersonnelIDs returns the "personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *ChecksymptomMutation) PersonnelIDs() (ids []int) {
	if id := m.personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "personnel" edge.
func (m *ChecksymptomMutation) ResetPersonnel() {
	m.personnel = nil
	m.clearedpersonnel = false
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the Doctorordersheet entity by id.
func (m *ChecksymptomMutation) SetDoctorordersheetID(id int) {
	m.doctorordersheet = &id
}

// ClearDoctorordersheet clears the "doctorordersheet" edge to the Doctorordersheet entity.
func (m *ChecksymptomMutation) ClearDoctorordersheet() {
	m.cleareddoctorordersheet = true
}

// DoctorordersheetCleared returns if the "doctorordersheet" edge to the Doctorordersheet entity was cleared.
func (m *ChecksymptomMutation) DoctorordersheetCleared() bool {
	return m.cleareddoctorordersheet
}

// DoctorordersheetID returns the "doctorordersheet" edge ID in the mutation.
func (m *ChecksymptomMutation) DoctorordersheetID() (id int, exists bool) {
	if m.doctorordersheet != nil {
		return *m.doctorordersheet, true
	}
	return
}

// DoctorordersheetIDs returns the "doctorordersheet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DoctorordersheetID instead. It exists only for internal usage by the builders.
func (m *ChecksymptomMutation) DoctorordersheetIDs() (ids []int) {
	if id := m.doctorordersheet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctorordersheet resets all changes to the "doctorordersheet" edge.
func (m *ChecksymptomMutation) ResetDoctorordersheet() {
	m.doctorordersheet = nil
	m.cleareddoctorordersheet = false
}

// SetDiseaseID sets the "disease" edge to the Disease entity by id.
func (m *ChecksymptomMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (m *ChecksymptomMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the "disease" edge to the Disease entity was cleared.
func (m *ChecksymptomMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the "disease" edge ID in the mutation.
func (m *ChecksymptomMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the "disease" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *ChecksymptomMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease resets all changes to the "disease" edge.
func (m *ChecksymptomMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// Op returns the operation name.
func (m *ChecksymptomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Checksymptom).
func (m *ChecksymptomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChecksymptomMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.date != nil {
		fields = append(fields, checksymptom.FieldDate)
	}
	if m.note != nil {
		fields = append(fields, checksymptom.FieldNote)
	}
	if m._Identitycard != nil {
		fields = append(fields, checksymptom.FieldIdentitycard)
	}
	if m.phone != nil {
		fields = append(fields, checksymptom.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChecksymptomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case checksymptom.FieldDate:
		return m.Date()
	case checksymptom.FieldNote:
		return m.Note()
	case checksymptom.FieldIdentitycard:
		return m.Identitycard()
	case checksymptom.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChecksymptomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case checksymptom.FieldDate:
		return m.OldDate(ctx)
	case checksymptom.FieldNote:
		return m.OldNote(ctx)
	case checksymptom.FieldIdentitycard:
		return m.OldIdentitycard(ctx)
	case checksymptom.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown Checksymptom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChecksymptomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case checksymptom.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case checksymptom.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case checksymptom.FieldIdentitycard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentitycard(v)
		return nil
	case checksymptom.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Checksymptom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChecksymptomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChecksymptomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChecksymptomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Checksymptom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChecksymptomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChecksymptomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChecksymptomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Checksymptom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChecksymptomMutation) ResetField(name string) error {
	switch name {
	case checksymptom.FieldDate:
		m.ResetDate()
		return nil
	case checksymptom.FieldNote:
		m.ResetNote()
		return nil
	case checksymptom.FieldIdentitycard:
		m.ResetIdentitycard()
		return nil
	case checksymptom.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown Checksymptom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChecksymptomMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.patient != nil {
		edges = append(edges, checksymptom.EdgePatient)
	}
	if m.personnel != nil {
		edges = append(edges, checksymptom.EdgePersonnel)
	}
	if m.doctorordersheet != nil {
		edges = append(edges, checksymptom.EdgeDoctorordersheet)
	}
	if m.disease != nil {
		edges = append(edges, checksymptom.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChecksymptomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case checksymptom.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case checksymptom.EdgePersonnel:
		if id := m.personnel; id != nil {
			return []ent.Value{*id}
		}
	case checksymptom.EdgeDoctorordersheet:
		if id := m.doctorordersheet; id != nil {
			return []ent.Value{*id}
		}
	case checksymptom.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChecksymptomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChecksymptomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChecksymptomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedpatient {
		edges = append(edges, checksymptom.EdgePatient)
	}
	if m.clearedpersonnel {
		edges = append(edges, checksymptom.EdgePersonnel)
	}
	if m.cleareddoctorordersheet {
		edges = append(edges, checksymptom.EdgeDoctorordersheet)
	}
	if m.cleareddisease {
		edges = append(edges, checksymptom.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChecksymptomMutation) EdgeCleared(name string) bool {
	switch name {
	case checksymptom.EdgePatient:
		return m.clearedpatient
	case checksymptom.EdgePersonnel:
		return m.clearedpersonnel
	case checksymptom.EdgeDoctorordersheet:
		return m.cleareddoctorordersheet
	case checksymptom.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChecksymptomMutation) ClearEdge(name string) error {
	switch name {
	case checksymptom.EdgePatient:
		m.ClearPatient()
		return nil
	case checksymptom.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case checksymptom.EdgeDoctorordersheet:
		m.ClearDoctorordersheet()
		return nil
	case checksymptom.EdgeDisease:
		m.ClearDisease()
		return nil
	}
	return fmt.Errorf("unknown Checksymptom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChecksymptomMutation) ResetEdge(name string) error {
	switch name {
	case checksymptom.EdgePatient:
		m.ResetPatient()
		return nil
	case checksymptom.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case checksymptom.EdgeDoctorordersheet:
		m.ResetDoctorordersheet()
		return nil
	case checksymptom.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Checksymptom edge %s", name)
}

// DentalappointmentMutation represents an operation that mutates the Dentalappointment nodes in the graph.
type DentalappointmentMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	appointtime        *time.Time
	amount             *int
	addamount          *int
	price              *int
	addprice           *int
	note               *string
	clearedFields      map[string]struct{}
	_Personnel         *int
	cleared_Personnel  bool
	_Patient           *int
	cleared_Patient    bool
	_Dentalkind        *int
	cleared_Dentalkind bool
	done               bool
	oldValue           func(context.Context) (*Dentalappointment, error)
	predicates         []predicate.Dentalappointment
}

var _ ent.Mutation = (*DentalappointmentMutation)(nil)

// dentalappointmentOption allows management of the mutation configuration using functional options.
type dentalappointmentOption func(*DentalappointmentMutation)

// newDentalappointmentMutation creates new mutation for the Dentalappointment entity.
func newDentalappointmentMutation(c config, op Op, opts ...dentalappointmentOption) *DentalappointmentMutation {
	m := &DentalappointmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDentalappointment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDentalappointmentID sets the ID field of the mutation.
func withDentalappointmentID(id int) dentalappointmentOption {
	return func(m *DentalappointmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Dentalappointment
		)
		m.oldValue = func(ctx context.Context) (*Dentalappointment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dentalappointment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDentalappointment sets the old Dentalappointment of the mutation.
func withDentalappointment(node *Dentalappointment) dentalappointmentOption {
	return func(m *DentalappointmentMutation) {
		m.oldValue = func(context.Context) (*Dentalappointment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DentalappointmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DentalappointmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DentalappointmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppointtime sets the "appointtime" field.
func (m *DentalappointmentMutation) SetAppointtime(t time.Time) {
	m.appointtime = &t
}

// Appointtime returns the value of the "appointtime" field in the mutation.
func (m *DentalappointmentMutation) Appointtime() (r time.Time, exists bool) {
	v := m.appointtime
	if v == nil {
		return
	}
	return *v, true
}

// OldAppointtime returns the old "appointtime" field's value of the Dentalappointment entity.
// If the Dentalappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DentalappointmentMutation) OldAppointtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppointtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppointtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppointtime: %w", err)
	}
	return oldValue.Appointtime, nil
}

// ResetAppointtime resets all changes to the "appointtime" field.
func (m *DentalappointmentMutation) ResetAppointtime() {
	m.appointtime = nil
}

// SetAmount sets the "amount" field.
func (m *DentalappointmentMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DentalappointmentMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Dentalappointment entity.
// If the Dentalappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DentalappointmentMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *DentalappointmentMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *DentalappointmentMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *DentalappointmentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPrice sets the "price" field.
func (m *DentalappointmentMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *DentalappointmentMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Dentalappointment entity.
// If the Dentalappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DentalappointmentMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *DentalappointmentMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *DentalappointmentMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *DentalappointmentMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetNote sets the "note" field.
func (m *DentalappointmentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *DentalappointmentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Dentalappointment entity.
// If the Dentalappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DentalappointmentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *DentalappointmentMutation) ResetNote() {
	m.note = nil
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by id.
func (m *DentalappointmentMutation) SetPersonnelID(id int) {
	m._Personnel = &id
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (m *DentalappointmentMutation) ClearPersonnel() {
	m.cleared_Personnel = true
}

// PersonnelCleared returns if the "Personnel" edge to the Personnel entity was cleared.
func (m *DentalappointmentMutation) PersonnelCleared() bool {
	return m.cleared_Personnel
}

// PersonnelID returns the "Personnel" edge ID in the mutation.
func (m *DentalappointmentMutation) PersonnelID() (id int, exists bool) {
	if m._Personnel != nil {
		return *m._Personnel, true
	}
	return
}

// PersonnelIDs returns the "Personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *DentalappointmentMutation) PersonnelIDs() (ids []int) {
	if id := m._Personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "Personnel" edge.
func (m *DentalappointmentMutation) ResetPersonnel() {
	m._Personnel = nil
	m.cleared_Personnel = false
}

// SetPatientID sets the "Patient" edge to the Patient entity by id.
func (m *DentalappointmentMutation) SetPatientID(id int) {
	m._Patient = &id
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (m *DentalappointmentMutation) ClearPatient() {
	m.cleared_Patient = true
}

// PatientCleared returns if the "Patient" edge to the Patient entity was cleared.
func (m *DentalappointmentMutation) PatientCleared() bool {
	return m.cleared_Patient
}

// PatientID returns the "Patient" edge ID in the mutation.
func (m *DentalappointmentMutation) PatientID() (id int, exists bool) {
	if m._Patient != nil {
		return *m._Patient, true
	}
	return
}

// PatientIDs returns the "Patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DentalappointmentMutation) PatientIDs() (ids []int) {
	if id := m._Patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "Patient" edge.
func (m *DentalappointmentMutation) ResetPatient() {
	m._Patient = nil
	m.cleared_Patient = false
}

// SetDentalkindID sets the "Dentalkind" edge to the Dentalkind entity by id.
func (m *DentalappointmentMutation) SetDentalkindID(id int) {
	m._Dentalkind = &id
}

// ClearDentalkind clears the "Dentalkind" edge to the Dentalkind entity.
func (m *DentalappointmentMutation) ClearDentalkind() {
	m.cleared_Dentalkind = true
}

// DentalkindCleared returns if the "Dentalkind" edge to the Dentalkind entity was cleared.
func (m *DentalappointmentMutation) DentalkindCleared() bool {
	return m.cleared_Dentalkind
}

// DentalkindID returns the "Dentalkind" edge ID in the mutation.
func (m *DentalappointmentMutation) DentalkindID() (id int, exists bool) {
	if m._Dentalkind != nil {
		return *m._Dentalkind, true
	}
	return
}

// DentalkindIDs returns the "Dentalkind" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DentalkindID instead. It exists only for internal usage by the builders.
func (m *DentalappointmentMutation) DentalkindIDs() (ids []int) {
	if id := m._Dentalkind; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDentalkind resets all changes to the "Dentalkind" edge.
func (m *DentalappointmentMutation) ResetDentalkind() {
	m._Dentalkind = nil
	m.cleared_Dentalkind = false
}

// Op returns the operation name.
func (m *DentalappointmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dentalappointment).
func (m *DentalappointmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DentalappointmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.appointtime != nil {
		fields = append(fields, dentalappointment.FieldAppointtime)
	}
	if m.amount != nil {
		fields = append(fields, dentalappointment.FieldAmount)
	}
	if m.price != nil {
		fields = append(fields, dentalappointment.FieldPrice)
	}
	if m.note != nil {
		fields = append(fields, dentalappointment.FieldNote)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DentalappointmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dentalappointment.FieldAppointtime:
		return m.Appointtime()
	case dentalappointment.FieldAmount:
		return m.Amount()
	case dentalappointment.FieldPrice:
		return m.Price()
	case dentalappointment.FieldNote:
		return m.Note()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DentalappointmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dentalappointment.FieldAppointtime:
		return m.OldAppointtime(ctx)
	case dentalappointment.FieldAmount:
		return m.OldAmount(ctx)
	case dentalappointment.FieldPrice:
		return m.OldPrice(ctx)
	case dentalappointment.FieldNote:
		return m.OldNote(ctx)
	}
	return nil, fmt.Errorf("unknown Dentalappointment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DentalappointmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dentalappointment.FieldAppointtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppointtime(v)
		return nil
	case dentalappointment.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case dentalappointment.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case dentalappointment.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	}
	return fmt.Errorf("unknown Dentalappointment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DentalappointmentMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, dentalappointment.FieldAmount)
	}
	if m.addprice != nil {
		fields = append(fields, dentalappointment.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DentalappointmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dentalappointment.FieldAmount:
		return m.AddedAmount()
	case dentalappointment.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DentalappointmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dentalappointment.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case dentalappointment.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Dentalappointment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DentalappointmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DentalappointmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DentalappointmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dentalappointment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DentalappointmentMutation) ResetField(name string) error {
	switch name {
	case dentalappointment.FieldAppointtime:
		m.ResetAppointtime()
		return nil
	case dentalappointment.FieldAmount:
		m.ResetAmount()
		return nil
	case dentalappointment.FieldPrice:
		m.ResetPrice()
		return nil
	case dentalappointment.FieldNote:
		m.ResetNote()
		return nil
	}
	return fmt.Errorf("unknown Dentalappointment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DentalappointmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Personnel != nil {
		edges = append(edges, dentalappointment.EdgePersonnel)
	}
	if m._Patient != nil {
		edges = append(edges, dentalappointment.EdgePatient)
	}
	if m._Dentalkind != nil {
		edges = append(edges, dentalappointment.EdgeDentalkind)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DentalappointmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dentalappointment.EdgePersonnel:
		if id := m._Personnel; id != nil {
			return []ent.Value{*id}
		}
	case dentalappointment.EdgePatient:
		if id := m._Patient; id != nil {
			return []ent.Value{*id}
		}
	case dentalappointment.EdgeDentalkind:
		if id := m._Dentalkind; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DentalappointmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DentalappointmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DentalappointmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Personnel {
		edges = append(edges, dentalappointment.EdgePersonnel)
	}
	if m.cleared_Patient {
		edges = append(edges, dentalappointment.EdgePatient)
	}
	if m.cleared_Dentalkind {
		edges = append(edges, dentalappointment.EdgeDentalkind)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DentalappointmentMutation) EdgeCleared(name string) bool {
	switch name {
	case dentalappointment.EdgePersonnel:
		return m.cleared_Personnel
	case dentalappointment.EdgePatient:
		return m.cleared_Patient
	case dentalappointment.EdgeDentalkind:
		return m.cleared_Dentalkind
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DentalappointmentMutation) ClearEdge(name string) error {
	switch name {
	case dentalappointment.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case dentalappointment.EdgePatient:
		m.ClearPatient()
		return nil
	case dentalappointment.EdgeDentalkind:
		m.ClearDentalkind()
		return nil
	}
	return fmt.Errorf("unknown Dentalappointment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DentalappointmentMutation) ResetEdge(name string) error {
	switch name {
	case dentalappointment.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case dentalappointment.EdgePatient:
		m.ResetPatient()
		return nil
	case dentalappointment.EdgeDentalkind:
		m.ResetDentalkind()
		return nil
	}
	return fmt.Errorf("unknown Dentalappointment edge %s", name)
}

// DentalkindMutation represents an operation that mutates the Dentalkind nodes in the graph.
type DentalkindMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	kindname                  *string
	clearedFields             map[string]struct{}
	_Dentalappointment        map[int]struct{}
	removed_Dentalappointment map[int]struct{}
	cleared_Dentalappointment bool
	done                      bool
	oldValue                  func(context.Context) (*Dentalkind, error)
	predicates                []predicate.Dentalkind
}

var _ ent.Mutation = (*DentalkindMutation)(nil)

// dentalkindOption allows management of the mutation configuration using functional options.
type dentalkindOption func(*DentalkindMutation)

// newDentalkindMutation creates new mutation for the Dentalkind entity.
func newDentalkindMutation(c config, op Op, opts ...dentalkindOption) *DentalkindMutation {
	m := &DentalkindMutation{
		config:        c,
		op:            op,
		typ:           TypeDentalkind,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDentalkindID sets the ID field of the mutation.
func withDentalkindID(id int) dentalkindOption {
	return func(m *DentalkindMutation) {
		var (
			err   error
			once  sync.Once
			value *Dentalkind
		)
		m.oldValue = func(ctx context.Context) (*Dentalkind, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dentalkind.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDentalkind sets the old Dentalkind of the mutation.
func withDentalkind(node *Dentalkind) dentalkindOption {
	return func(m *DentalkindMutation) {
		m.oldValue = func(context.Context) (*Dentalkind, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DentalkindMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DentalkindMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DentalkindMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKindname sets the "kindname" field.
func (m *DentalkindMutation) SetKindname(s string) {
	m.kindname = &s
}

// Kindname returns the value of the "kindname" field in the mutation.
func (m *DentalkindMutation) Kindname() (r string, exists bool) {
	v := m.kindname
	if v == nil {
		return
	}
	return *v, true
}

// OldKindname returns the old "kindname" field's value of the Dentalkind entity.
// If the Dentalkind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DentalkindMutation) OldKindname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKindname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKindname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKindname: %w", err)
	}
	return oldValue.Kindname, nil
}

// ResetKindname resets all changes to the "kindname" field.
func (m *DentalkindMutation) ResetKindname() {
	m.kindname = nil
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by ids.
func (m *DentalkindMutation) AddDentalappointmentIDs(ids ...int) {
	if m._Dentalappointment == nil {
		m._Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Dentalappointment[ids[i]] = struct{}{}
	}
}

// ClearDentalappointment clears the "Dentalappointment" edge to the Dentalappointment entity.
func (m *DentalkindMutation) ClearDentalappointment() {
	m.cleared_Dentalappointment = true
}

// DentalappointmentCleared returns if the "Dentalappointment" edge to the Dentalappointment entity was cleared.
func (m *DentalkindMutation) DentalappointmentCleared() bool {
	return m.cleared_Dentalappointment
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (m *DentalkindMutation) RemoveDentalappointmentIDs(ids ...int) {
	if m.removed_Dentalappointment == nil {
		m.removed_Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Dentalappointment[ids[i]] = struct{}{}
	}
}

// RemovedDentalappointment returns the removed IDs of the "Dentalappointment" edge to the Dentalappointment entity.
func (m *DentalkindMutation) RemovedDentalappointmentIDs() (ids []int) {
	for id := range m.removed_Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// DentalappointmentIDs returns the "Dentalappointment" edge IDs in the mutation.
func (m *DentalkindMutation) DentalappointmentIDs() (ids []int) {
	for id := range m._Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// ResetDentalappointment resets all changes to the "Dentalappointment" edge.
func (m *DentalkindMutation) ResetDentalappointment() {
	m._Dentalappointment = nil
	m.cleared_Dentalappointment = false
	m.removed_Dentalappointment = nil
}

// Op returns the operation name.
func (m *DentalkindMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dentalkind).
func (m *DentalkindMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DentalkindMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.kindname != nil {
		fields = append(fields, dentalkind.FieldKindname)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DentalkindMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dentalkind.FieldKindname:
		return m.Kindname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DentalkindMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dentalkind.FieldKindname:
		return m.OldKindname(ctx)
	}
	return nil, fmt.Errorf("unknown Dentalkind field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DentalkindMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dentalkind.FieldKindname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKindname(v)
		return nil
	}
	return fmt.Errorf("unknown Dentalkind field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DentalkindMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DentalkindMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DentalkindMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dentalkind numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DentalkindMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DentalkindMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DentalkindMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dentalkind nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DentalkindMutation) ResetField(name string) error {
	switch name {
	case dentalkind.FieldKindname:
		m.ResetKindname()
		return nil
	}
	return fmt.Errorf("unknown Dentalkind field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DentalkindMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Dentalappointment != nil {
		edges = append(edges, dentalkind.EdgeDentalappointment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DentalkindMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dentalkind.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m._Dentalappointment))
		for id := range m._Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DentalkindMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Dentalappointment != nil {
		edges = append(edges, dentalkind.EdgeDentalappointment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DentalkindMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dentalkind.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m.removed_Dentalappointment))
		for id := range m.removed_Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DentalkindMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Dentalappointment {
		edges = append(edges, dentalkind.EdgeDentalappointment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DentalkindMutation) EdgeCleared(name string) bool {
	switch name {
	case dentalkind.EdgeDentalappointment:
		return m.cleared_Dentalappointment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DentalkindMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dentalkind unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DentalkindMutation) ResetEdge(name string) error {
	switch name {
	case dentalkind.EdgeDentalappointment:
		m.ResetDentalappointment()
		return nil
	}
	return fmt.Errorf("unknown Dentalkind edge %s", name)
}

// DiseaseMutation represents an operation that mutates the Disease nodes in the graph.
type DiseaseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	disease              *string
	clearedFields        map[string]struct{}
	_Checksymptom        map[int]struct{}
	removed_Checksymptom map[int]struct{}
	cleared_Checksymptom bool
	done                 bool
	oldValue             func(context.Context) (*Disease, error)
	predicates           []predicate.Disease
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows management of the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for the Disease entity.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the ID field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDisease sets the "disease" field.
func (m *DiseaseMutation) SetDisease(s string) {
	m.disease = &s
}

// Disease returns the value of the "disease" field in the mutation.
func (m *DiseaseMutation) Disease() (r string, exists bool) {
	v := m.disease
	if v == nil {
		return
	}
	return *v, true
}

// OldDisease returns the old "disease" field's value of the Disease entity.
// If the Disease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DiseaseMutation) OldDisease(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDisease is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDisease requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisease: %w", err)
	}
	return oldValue.Disease, nil
}

// ResetDisease resets all changes to the "disease" field.
func (m *DiseaseMutation) ResetDisease() {
	m.disease = nil
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by ids.
func (m *DiseaseMutation) AddChecksymptomIDs(ids ...int) {
	if m._Checksymptom == nil {
		m._Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m._Checksymptom[ids[i]] = struct{}{}
	}
}

// ClearChecksymptom clears the "Checksymptom" edge to the Checksymptom entity.
func (m *DiseaseMutation) ClearChecksymptom() {
	m.cleared_Checksymptom = true
}

// ChecksymptomCleared returns if the "Checksymptom" edge to the Checksymptom entity was cleared.
func (m *DiseaseMutation) ChecksymptomCleared() bool {
	return m.cleared_Checksymptom
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to the Checksymptom entity by IDs.
func (m *DiseaseMutation) RemoveChecksymptomIDs(ids ...int) {
	if m.removed_Checksymptom == nil {
		m.removed_Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Checksymptom[ids[i]] = struct{}{}
	}
}

// RemovedChecksymptom returns the removed IDs of the "Checksymptom" edge to the Checksymptom entity.
func (m *DiseaseMutation) RemovedChecksymptomIDs() (ids []int) {
	for id := range m.removed_Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ChecksymptomIDs returns the "Checksymptom" edge IDs in the mutation.
func (m *DiseaseMutation) ChecksymptomIDs() (ids []int) {
	for id := range m._Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ResetChecksymptom resets all changes to the "Checksymptom" edge.
func (m *DiseaseMutation) ResetChecksymptom() {
	m._Checksymptom = nil
	m.cleared_Checksymptom = false
	m.removed_Checksymptom = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.disease != nil {
		fields = append(fields, disease.FieldDisease)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldDisease:
		return m.Disease()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldDisease:
		return m.OldDisease(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldDisease:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisease(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Checksymptom != nil {
		edges = append(edges, disease.EdgeChecksymptom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m._Checksymptom))
		for id := range m._Checksymptom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Checksymptom != nil {
		edges = append(edges, disease.EdgeChecksymptom)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m.removed_Checksymptom))
		for id := range m.removed_Checksymptom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Checksymptom {
		edges = append(edges, disease.EdgeChecksymptom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case disease.EdgeChecksymptom:
		return m.cleared_Checksymptom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeChecksymptom:
		m.ResetChecksymptom()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// DoctorordersheetMutation represents an operation that mutates the Doctorordersheet nodes in the graph.
type DoctorordersheetMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Name                *string
	clearedFields        map[string]struct{}
	_Checksymptom        map[int]struct{}
	removed_Checksymptom map[int]struct{}
	cleared_Checksymptom bool
	done                 bool
	oldValue             func(context.Context) (*Doctorordersheet, error)
	predicates           []predicate.Doctorordersheet
}

var _ ent.Mutation = (*DoctorordersheetMutation)(nil)

// doctorordersheetOption allows management of the mutation configuration using functional options.
type doctorordersheetOption func(*DoctorordersheetMutation)

// newDoctorordersheetMutation creates new mutation for the Doctorordersheet entity.
func newDoctorordersheetMutation(c config, op Op, opts ...doctorordersheetOption) *DoctorordersheetMutation {
	m := &DoctorordersheetMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctorordersheet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorordersheetID sets the ID field of the mutation.
func withDoctorordersheetID(id int) doctorordersheetOption {
	return func(m *DoctorordersheetMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctorordersheet
		)
		m.oldValue = func(ctx context.Context) (*Doctorordersheet, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctorordersheet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctorordersheet sets the old Doctorordersheet of the mutation.
func withDoctorordersheet(node *Doctorordersheet) doctorordersheetOption {
	return func(m *DoctorordersheetMutation) {
		m.oldValue = func(context.Context) (*Doctorordersheet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorordersheetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorordersheetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DoctorordersheetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "Name" field.
func (m *DoctorordersheetMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *DoctorordersheetMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Doctorordersheet entity.
// If the Doctorordersheet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DoctorordersheetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *DoctorordersheetMutation) ResetName() {
	m._Name = nil
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by ids.
func (m *DoctorordersheetMutation) AddChecksymptomIDs(ids ...int) {
	if m._Checksymptom == nil {
		m._Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m._Checksymptom[ids[i]] = struct{}{}
	}
}

// ClearChecksymptom clears the "Checksymptom" edge to the Checksymptom entity.
func (m *DoctorordersheetMutation) ClearChecksymptom() {
	m.cleared_Checksymptom = true
}

// ChecksymptomCleared returns if the "Checksymptom" edge to the Checksymptom entity was cleared.
func (m *DoctorordersheetMutation) ChecksymptomCleared() bool {
	return m.cleared_Checksymptom
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to the Checksymptom entity by IDs.
func (m *DoctorordersheetMutation) RemoveChecksymptomIDs(ids ...int) {
	if m.removed_Checksymptom == nil {
		m.removed_Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Checksymptom[ids[i]] = struct{}{}
	}
}

// RemovedChecksymptom returns the removed IDs of the "Checksymptom" edge to the Checksymptom entity.
func (m *DoctorordersheetMutation) RemovedChecksymptomIDs() (ids []int) {
	for id := range m.removed_Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ChecksymptomIDs returns the "Checksymptom" edge IDs in the mutation.
func (m *DoctorordersheetMutation) ChecksymptomIDs() (ids []int) {
	for id := range m._Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ResetChecksymptom resets all changes to the "Checksymptom" edge.
func (m *DoctorordersheetMutation) ResetChecksymptom() {
	m._Checksymptom = nil
	m.cleared_Checksymptom = false
	m.removed_Checksymptom = nil
}

// Op returns the operation name.
func (m *DoctorordersheetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctorordersheet).
func (m *DoctorordersheetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DoctorordersheetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, doctorordersheet.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DoctorordersheetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctorordersheet.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DoctorordersheetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctorordersheet.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Doctorordersheet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoctorordersheetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctorordersheet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Doctorordersheet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DoctorordersheetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DoctorordersheetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DoctorordersheetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctorordersheet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DoctorordersheetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DoctorordersheetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorordersheetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctorordersheet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DoctorordersheetMutation) ResetField(name string) error {
	switch name {
	case doctorordersheet.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Doctorordersheet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DoctorordersheetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Checksymptom != nil {
		edges = append(edges, doctorordersheet.EdgeChecksymptom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DoctorordersheetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctorordersheet.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m._Checksymptom))
		for id := range m._Checksymptom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DoctorordersheetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Checksymptom != nil {
		edges = append(edges, doctorordersheet.EdgeChecksymptom)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DoctorordersheetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctorordersheet.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m.removed_Checksymptom))
		for id := range m.removed_Checksymptom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DoctorordersheetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Checksymptom {
		edges = append(edges, doctorordersheet.EdgeChecksymptom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DoctorordersheetMutation) EdgeCleared(name string) bool {
	switch name {
	case doctorordersheet.EdgeChecksymptom:
		return m.cleared_Checksymptom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DoctorordersheetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctorordersheet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DoctorordersheetMutation) ResetEdge(name string) error {
	switch name {
	case doctorordersheet.EdgeChecksymptom:
		m.ResetChecksymptom()
		return nil
	}
	return fmt.Errorf("unknown Doctorordersheet edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	name                         *string
	birthday                     *string
	gender                       *string
	clearedFields                map[string]struct{}
	physicaltherapyrecord        map[int]struct{}
	removedphysicaltherapyrecord map[int]struct{}
	clearedphysicaltherapyrecord bool
	_Bonedisease                 map[int]struct{}
	removed_Bonedisease          map[int]struct{}
	cleared_Bonedisease          bool
	_Checksymptom                map[int]struct{}
	removed_Checksymptom         map[int]struct{}
	cleared_Checksymptom         bool
	_Dentalappointment           map[int]struct{}
	removed_Dentalappointment    map[int]struct{}
	cleared_Dentalappointment    bool
	_Antenatalinformation        map[int]struct{}
	removed_Antenatalinformation map[int]struct{}
	cleared_Antenatalinformation bool
	_Surgeryappointment          map[int]struct{}
	removed_Surgeryappointment   map[int]struct{}
	cleared_Surgeryappointment   bool
	done                         bool
	oldValue                     func(context.Context) (*Patient, error)
	predicates                   []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetBirthday sets the "birthday" field.
func (m *PatientMutation) SetBirthday(s string) {
	m.birthday = &s
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *PatientMutation) Birthday() (r string, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldBirthday(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *PatientMutation) ResetBirthday() {
	m.birthday = nil
}

// SetGender sets the "gender" field.
func (m *PatientMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PatientMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by ids.
func (m *PatientMutation) AddPhysicaltherapyrecordIDs(ids ...int) {
	if m.physicaltherapyrecord == nil {
		m.physicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.physicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// ClearPhysicaltherapyrecord clears the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PatientMutation) ClearPhysicaltherapyrecord() {
	m.clearedphysicaltherapyrecord = true
}

// PhysicaltherapyrecordCleared returns if the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity was cleared.
func (m *PatientMutation) PhysicaltherapyrecordCleared() bool {
	return m.clearedphysicaltherapyrecord
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (m *PatientMutation) RemovePhysicaltherapyrecordIDs(ids ...int) {
	if m.removedphysicaltherapyrecord == nil {
		m.removedphysicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.removedphysicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// RemovedPhysicaltherapyrecord returns the removed IDs of the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PatientMutation) RemovedPhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.removedphysicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// PhysicaltherapyrecordIDs returns the "physicaltherapyrecord" edge IDs in the mutation.
func (m *PatientMutation) PhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.physicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// ResetPhysicaltherapyrecord resets all changes to the "physicaltherapyrecord" edge.
func (m *PatientMutation) ResetPhysicaltherapyrecord() {
	m.physicaltherapyrecord = nil
	m.clearedphysicaltherapyrecord = false
	m.removedphysicaltherapyrecord = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *PatientMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *PatientMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *PatientMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *PatientMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *PatientMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *PatientMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *PatientMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by ids.
func (m *PatientMutation) AddChecksymptomIDs(ids ...int) {
	if m._Checksymptom == nil {
		m._Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m._Checksymptom[ids[i]] = struct{}{}
	}
}

// ClearChecksymptom clears the "Checksymptom" edge to the Checksymptom entity.
func (m *PatientMutation) ClearChecksymptom() {
	m.cleared_Checksymptom = true
}

// ChecksymptomCleared returns if the "Checksymptom" edge to the Checksymptom entity was cleared.
func (m *PatientMutation) ChecksymptomCleared() bool {
	return m.cleared_Checksymptom
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to the Checksymptom entity by IDs.
func (m *PatientMutation) RemoveChecksymptomIDs(ids ...int) {
	if m.removed_Checksymptom == nil {
		m.removed_Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Checksymptom[ids[i]] = struct{}{}
	}
}

// RemovedChecksymptom returns the removed IDs of the "Checksymptom" edge to the Checksymptom entity.
func (m *PatientMutation) RemovedChecksymptomIDs() (ids []int) {
	for id := range m.removed_Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ChecksymptomIDs returns the "Checksymptom" edge IDs in the mutation.
func (m *PatientMutation) ChecksymptomIDs() (ids []int) {
	for id := range m._Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ResetChecksymptom resets all changes to the "Checksymptom" edge.
func (m *PatientMutation) ResetChecksymptom() {
	m._Checksymptom = nil
	m.cleared_Checksymptom = false
	m.removed_Checksymptom = nil
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by ids.
func (m *PatientMutation) AddDentalappointmentIDs(ids ...int) {
	if m._Dentalappointment == nil {
		m._Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Dentalappointment[ids[i]] = struct{}{}
	}
}

// ClearDentalappointment clears the "Dentalappointment" edge to the Dentalappointment entity.
func (m *PatientMutation) ClearDentalappointment() {
	m.cleared_Dentalappointment = true
}

// DentalappointmentCleared returns if the "Dentalappointment" edge to the Dentalappointment entity was cleared.
func (m *PatientMutation) DentalappointmentCleared() bool {
	return m.cleared_Dentalappointment
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (m *PatientMutation) RemoveDentalappointmentIDs(ids ...int) {
	if m.removed_Dentalappointment == nil {
		m.removed_Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Dentalappointment[ids[i]] = struct{}{}
	}
}

// RemovedDentalappointment returns the removed IDs of the "Dentalappointment" edge to the Dentalappointment entity.
func (m *PatientMutation) RemovedDentalappointmentIDs() (ids []int) {
	for id := range m.removed_Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// DentalappointmentIDs returns the "Dentalappointment" edge IDs in the mutation.
func (m *PatientMutation) DentalappointmentIDs() (ids []int) {
	for id := range m._Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// ResetDentalappointment resets all changes to the "Dentalappointment" edge.
func (m *PatientMutation) ResetDentalappointment() {
	m._Dentalappointment = nil
	m.cleared_Dentalappointment = false
	m.removed_Dentalappointment = nil
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by ids.
func (m *PatientMutation) AddAntenatalinformationIDs(ids ...int) {
	if m._Antenatalinformation == nil {
		m._Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m._Antenatalinformation[ids[i]] = struct{}{}
	}
}

// ClearAntenatalinformation clears the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PatientMutation) ClearAntenatalinformation() {
	m.cleared_Antenatalinformation = true
}

// AntenatalinformationCleared returns if the "Antenatalinformation" edge to the Antenatalinformation entity was cleared.
func (m *PatientMutation) AntenatalinformationCleared() bool {
	return m.cleared_Antenatalinformation
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (m *PatientMutation) RemoveAntenatalinformationIDs(ids ...int) {
	if m.removed_Antenatalinformation == nil {
		m.removed_Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Antenatalinformation[ids[i]] = struct{}{}
	}
}

// RemovedAntenatalinformation returns the removed IDs of the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PatientMutation) RemovedAntenatalinformationIDs() (ids []int) {
	for id := range m.removed_Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// AntenatalinformationIDs returns the "Antenatalinformation" edge IDs in the mutation.
func (m *PatientMutation) AntenatalinformationIDs() (ids []int) {
	for id := range m._Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatalinformation resets all changes to the "Antenatalinformation" edge.
func (m *PatientMutation) ResetAntenatalinformation() {
	m._Antenatalinformation = nil
	m.cleared_Antenatalinformation = false
	m.removed_Antenatalinformation = nil
}

// AddSurgeryappointmentIDs adds the "Surgeryappointment" edge to the Surgeryappointment entity by ids.
func (m *PatientMutation) AddSurgeryappointmentIDs(ids ...int) {
	if m._Surgeryappointment == nil {
		m._Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Surgeryappointment[ids[i]] = struct{}{}
	}
}

// ClearSurgeryappointment clears the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *PatientMutation) ClearSurgeryappointment() {
	m.cleared_Surgeryappointment = true
}

// SurgeryappointmentCleared returns if the "Surgeryappointment" edge to the Surgeryappointment entity was cleared.
func (m *PatientMutation) SurgeryappointmentCleared() bool {
	return m.cleared_Surgeryappointment
}

// RemoveSurgeryappointmentIDs removes the "Surgeryappointment" edge to the Surgeryappointment entity by IDs.
func (m *PatientMutation) RemoveSurgeryappointmentIDs(ids ...int) {
	if m.removed_Surgeryappointment == nil {
		m.removed_Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Surgeryappointment[ids[i]] = struct{}{}
	}
}

// RemovedSurgeryappointment returns the removed IDs of the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *PatientMutation) RemovedSurgeryappointmentIDs() (ids []int) {
	for id := range m.removed_Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// SurgeryappointmentIDs returns the "Surgeryappointment" edge IDs in the mutation.
func (m *PatientMutation) SurgeryappointmentIDs() (ids []int) {
	for id := range m._Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// ResetSurgeryappointment resets all changes to the "Surgeryappointment" edge.
func (m *PatientMutation) ResetSurgeryappointment() {
	m._Surgeryappointment = nil
	m.cleared_Surgeryappointment = false
	m.removed_Surgeryappointment = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.birthday != nil {
		fields = append(fields, patient.FieldBirthday)
	}
	if m.gender != nil {
		fields = append(fields, patient.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldName:
		return m.Name()
	case patient.FieldBirthday:
		return m.Birthday()
	case patient.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldBirthday:
		return m.OldBirthday(ctx)
	case patient.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldBirthday:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case patient.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldBirthday:
		m.ResetBirthday()
		return nil
	case patient.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.physicaltherapyrecord != nil {
		edges = append(edges, patient.EdgePhysicaltherapyrecord)
	}
	if m._Bonedisease != nil {
		edges = append(edges, patient.EdgeBonedisease)
	}
	if m._Checksymptom != nil {
		edges = append(edges, patient.EdgeChecksymptom)
	}
	if m._Dentalappointment != nil {
		edges = append(edges, patient.EdgeDentalappointment)
	}
	if m._Antenatalinformation != nil {
		edges = append(edges, patient.EdgeAntenatalinformation)
	}
	if m._Surgeryappointment != nil {
		edges = append(edges, patient.EdgeSurgeryappointment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.physicaltherapyrecord))
		for id := range m.physicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m._Checksymptom))
		for id := range m._Checksymptom {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m._Dentalappointment))
		for id := range m._Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m._Antenatalinformation))
		for id := range m._Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m._Surgeryappointment))
		for id := range m._Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedphysicaltherapyrecord != nil {
		edges = append(edges, patient.EdgePhysicaltherapyrecord)
	}
	if m.removed_Bonedisease != nil {
		edges = append(edges, patient.EdgeBonedisease)
	}
	if m.removed_Checksymptom != nil {
		edges = append(edges, patient.EdgeChecksymptom)
	}
	if m.removed_Dentalappointment != nil {
		edges = append(edges, patient.EdgeDentalappointment)
	}
	if m.removed_Antenatalinformation != nil {
		edges = append(edges, patient.EdgeAntenatalinformation)
	}
	if m.removed_Surgeryappointment != nil {
		edges = append(edges, patient.EdgeSurgeryappointment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.removedphysicaltherapyrecord))
		for id := range m.removedphysicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m.removed_Checksymptom))
		for id := range m.removed_Checksymptom {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m.removed_Dentalappointment))
		for id := range m.removed_Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m.removed_Antenatalinformation))
		for id := range m.removed_Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m.removed_Surgeryappointment))
		for id := range m.removed_Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedphysicaltherapyrecord {
		edges = append(edges, patient.EdgePhysicaltherapyrecord)
	}
	if m.cleared_Bonedisease {
		edges = append(edges, patient.EdgeBonedisease)
	}
	if m.cleared_Checksymptom {
		edges = append(edges, patient.EdgeChecksymptom)
	}
	if m.cleared_Dentalappointment {
		edges = append(edges, patient.EdgeDentalappointment)
	}
	if m.cleared_Antenatalinformation {
		edges = append(edges, patient.EdgeAntenatalinformation)
	}
	if m.cleared_Surgeryappointment {
		edges = append(edges, patient.EdgeSurgeryappointment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgePhysicaltherapyrecord:
		return m.clearedphysicaltherapyrecord
	case patient.EdgeBonedisease:
		return m.cleared_Bonedisease
	case patient.EdgeChecksymptom:
		return m.cleared_Checksymptom
	case patient.EdgeDentalappointment:
		return m.cleared_Dentalappointment
	case patient.EdgeAntenatalinformation:
		return m.cleared_Antenatalinformation
	case patient.EdgeSurgeryappointment:
		return m.cleared_Surgeryappointment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePhysicaltherapyrecord:
		m.ResetPhysicaltherapyrecord()
		return nil
	case patient.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	case patient.EdgeChecksymptom:
		m.ResetChecksymptom()
		return nil
	case patient.EdgeDentalappointment:
		m.ResetDentalappointment()
		return nil
	case patient.EdgeAntenatalinformation:
		m.ResetAntenatalinformation()
		return nil
	case patient.EdgeSurgeryappointment:
		m.ResetSurgeryappointment()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PersonnelMutation represents an operation that mutates the Personnel nodes in the graph.
type PersonnelMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	name                         *string
	department                   *string
	user                         *string
	password                     *string
	clearedFields                map[string]struct{}
	physicaltherapyrecord        map[int]struct{}
	removedphysicaltherapyrecord map[int]struct{}
	clearedphysicaltherapyrecord bool
	_Bonedisease                 map[int]struct{}
	removed_Bonedisease          map[int]struct{}
	cleared_Bonedisease          bool
	_Checksymptom                map[int]struct{}
	removed_Checksymptom         map[int]struct{}
	cleared_Checksymptom         bool
	_Dentalappointment           map[int]struct{}
	removed_Dentalappointment    map[int]struct{}
	cleared_Dentalappointment    bool
	_Surgeryappointment          map[int]struct{}
	removed_Surgeryappointment   map[int]struct{}
	cleared_Surgeryappointment   bool
	_Antenatalinformation        map[int]struct{}
	removed_Antenatalinformation map[int]struct{}
	cleared_Antenatalinformation bool
	done                         bool
	oldValue                     func(context.Context) (*Personnel, error)
	predicates                   []predicate.Personnel
}

var _ ent.Mutation = (*PersonnelMutation)(nil)

// personnelOption allows management of the mutation configuration using functional options.
type personnelOption func(*PersonnelMutation)

// newPersonnelMutation creates new mutation for the Personnel entity.
func newPersonnelMutation(c config, op Op, opts ...personnelOption) *PersonnelMutation {
	m := &PersonnelMutation{
		config:        c,
		op:            op,
		typ:           TypePersonnel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonnelID sets the ID field of the mutation.
func withPersonnelID(id int) personnelOption {
	return func(m *PersonnelMutation) {
		var (
			err   error
			once  sync.Once
			value *Personnel
		)
		m.oldValue = func(ctx context.Context) (*Personnel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Personnel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonnel sets the old Personnel of the mutation.
func withPersonnel(node *Personnel) personnelOption {
	return func(m *PersonnelMutation) {
		m.oldValue = func(context.Context) (*Personnel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonnelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonnelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PersonnelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PersonnelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonnelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonnelMutation) ResetName() {
	m.name = nil
}

// SetDepartment sets the "department" field.
func (m *PersonnelMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *PersonnelMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *PersonnelMutation) ResetDepartment() {
	m.department = nil
}

// SetUser sets the "user" field.
func (m *PersonnelMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *PersonnelMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *PersonnelMutation) ResetUser() {
	m.user = nil
}

// SetPassword sets the "password" field.
func (m *PersonnelMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *PersonnelMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *PersonnelMutation) ResetPassword() {
	m.password = nil
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by ids.
func (m *PersonnelMutation) AddPhysicaltherapyrecordIDs(ids ...int) {
	if m.physicaltherapyrecord == nil {
		m.physicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.physicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// ClearPhysicaltherapyrecord clears the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PersonnelMutation) ClearPhysicaltherapyrecord() {
	m.clearedphysicaltherapyrecord = true
}

// PhysicaltherapyrecordCleared returns if the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity was cleared.
func (m *PersonnelMutation) PhysicaltherapyrecordCleared() bool {
	return m.clearedphysicaltherapyrecord
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (m *PersonnelMutation) RemovePhysicaltherapyrecordIDs(ids ...int) {
	if m.removedphysicaltherapyrecord == nil {
		m.removedphysicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.removedphysicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// RemovedPhysicaltherapyrecord returns the removed IDs of the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PersonnelMutation) RemovedPhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.removedphysicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// PhysicaltherapyrecordIDs returns the "physicaltherapyrecord" edge IDs in the mutation.
func (m *PersonnelMutation) PhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.physicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// ResetPhysicaltherapyrecord resets all changes to the "physicaltherapyrecord" edge.
func (m *PersonnelMutation) ResetPhysicaltherapyrecord() {
	m.physicaltherapyrecord = nil
	m.clearedphysicaltherapyrecord = false
	m.removedphysicaltherapyrecord = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *PersonnelMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *PersonnelMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *PersonnelMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *PersonnelMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *PersonnelMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *PersonnelMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *PersonnelMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by ids.
func (m *PersonnelMutation) AddChecksymptomIDs(ids ...int) {
	if m._Checksymptom == nil {
		m._Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m._Checksymptom[ids[i]] = struct{}{}
	}
}

// ClearChecksymptom clears the "Checksymptom" edge to the Checksymptom entity.
func (m *PersonnelMutation) ClearChecksymptom() {
	m.cleared_Checksymptom = true
}

// ChecksymptomCleared returns if the "Checksymptom" edge to the Checksymptom entity was cleared.
func (m *PersonnelMutation) ChecksymptomCleared() bool {
	return m.cleared_Checksymptom
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to the Checksymptom entity by IDs.
func (m *PersonnelMutation) RemoveChecksymptomIDs(ids ...int) {
	if m.removed_Checksymptom == nil {
		m.removed_Checksymptom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Checksymptom[ids[i]] = struct{}{}
	}
}

// RemovedChecksymptom returns the removed IDs of the "Checksymptom" edge to the Checksymptom entity.
func (m *PersonnelMutation) RemovedChecksymptomIDs() (ids []int) {
	for id := range m.removed_Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ChecksymptomIDs returns the "Checksymptom" edge IDs in the mutation.
func (m *PersonnelMutation) ChecksymptomIDs() (ids []int) {
	for id := range m._Checksymptom {
		ids = append(ids, id)
	}
	return
}

// ResetChecksymptom resets all changes to the "Checksymptom" edge.
func (m *PersonnelMutation) ResetChecksymptom() {
	m._Checksymptom = nil
	m.cleared_Checksymptom = false
	m.removed_Checksymptom = nil
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by ids.
func (m *PersonnelMutation) AddDentalappointmentIDs(ids ...int) {
	if m._Dentalappointment == nil {
		m._Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Dentalappointment[ids[i]] = struct{}{}
	}
}

// ClearDentalappointment clears the "Dentalappointment" edge to the Dentalappointment entity.
func (m *PersonnelMutation) ClearDentalappointment() {
	m.cleared_Dentalappointment = true
}

// DentalappointmentCleared returns if the "Dentalappointment" edge to the Dentalappointment entity was cleared.
func (m *PersonnelMutation) DentalappointmentCleared() bool {
	return m.cleared_Dentalappointment
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (m *PersonnelMutation) RemoveDentalappointmentIDs(ids ...int) {
	if m.removed_Dentalappointment == nil {
		m.removed_Dentalappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Dentalappointment[ids[i]] = struct{}{}
	}
}

// RemovedDentalappointment returns the removed IDs of the "Dentalappointment" edge to the Dentalappointment entity.
func (m *PersonnelMutation) RemovedDentalappointmentIDs() (ids []int) {
	for id := range m.removed_Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// DentalappointmentIDs returns the "Dentalappointment" edge IDs in the mutation.
func (m *PersonnelMutation) DentalappointmentIDs() (ids []int) {
	for id := range m._Dentalappointment {
		ids = append(ids, id)
	}
	return
}

// ResetDentalappointment resets all changes to the "Dentalappointment" edge.
func (m *PersonnelMutation) ResetDentalappointment() {
	m._Dentalappointment = nil
	m.cleared_Dentalappointment = false
	m.removed_Dentalappointment = nil
}

// AddSurgeryappointmentIDs adds the "Surgeryappointment" edge to the Surgeryappointment entity by ids.
func (m *PersonnelMutation) AddSurgeryappointmentIDs(ids ...int) {
	if m._Surgeryappointment == nil {
		m._Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Surgeryappointment[ids[i]] = struct{}{}
	}
}

// ClearSurgeryappointment clears the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *PersonnelMutation) ClearSurgeryappointment() {
	m.cleared_Surgeryappointment = true
}

// SurgeryappointmentCleared returns if the "Surgeryappointment" edge to the Surgeryappointment entity was cleared.
func (m *PersonnelMutation) SurgeryappointmentCleared() bool {
	return m.cleared_Surgeryappointment
}

// RemoveSurgeryappointmentIDs removes the "Surgeryappointment" edge to the Surgeryappointment entity by IDs.
func (m *PersonnelMutation) RemoveSurgeryappointmentIDs(ids ...int) {
	if m.removed_Surgeryappointment == nil {
		m.removed_Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Surgeryappointment[ids[i]] = struct{}{}
	}
}

// RemovedSurgeryappointment returns the removed IDs of the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *PersonnelMutation) RemovedSurgeryappointmentIDs() (ids []int) {
	for id := range m.removed_Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// SurgeryappointmentIDs returns the "Surgeryappointment" edge IDs in the mutation.
func (m *PersonnelMutation) SurgeryappointmentIDs() (ids []int) {
	for id := range m._Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// ResetSurgeryappointment resets all changes to the "Surgeryappointment" edge.
func (m *PersonnelMutation) ResetSurgeryappointment() {
	m._Surgeryappointment = nil
	m.cleared_Surgeryappointment = false
	m.removed_Surgeryappointment = nil
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by ids.
func (m *PersonnelMutation) AddAntenatalinformationIDs(ids ...int) {
	if m._Antenatalinformation == nil {
		m._Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m._Antenatalinformation[ids[i]] = struct{}{}
	}
}

// ClearAntenatalinformation clears the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PersonnelMutation) ClearAntenatalinformation() {
	m.cleared_Antenatalinformation = true
}

// AntenatalinformationCleared returns if the "Antenatalinformation" edge to the Antenatalinformation entity was cleared.
func (m *PersonnelMutation) AntenatalinformationCleared() bool {
	return m.cleared_Antenatalinformation
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (m *PersonnelMutation) RemoveAntenatalinformationIDs(ids ...int) {
	if m.removed_Antenatalinformation == nil {
		m.removed_Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Antenatalinformation[ids[i]] = struct{}{}
	}
}

// RemovedAntenatalinformation returns the removed IDs of the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PersonnelMutation) RemovedAntenatalinformationIDs() (ids []int) {
	for id := range m.removed_Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// AntenatalinformationIDs returns the "Antenatalinformation" edge IDs in the mutation.
func (m *PersonnelMutation) AntenatalinformationIDs() (ids []int) {
	for id := range m._Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatalinformation resets all changes to the "Antenatalinformation" edge.
func (m *PersonnelMutation) ResetAntenatalinformation() {
	m._Antenatalinformation = nil
	m.cleared_Antenatalinformation = false
	m.removed_Antenatalinformation = nil
}

// Op returns the operation name.
func (m *PersonnelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Personnel).
func (m *PersonnelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonnelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, personnel.FieldName)
	}
	if m.department != nil {
		fields = append(fields, personnel.FieldDepartment)
	}
	if m.user != nil {
		fields = append(fields, personnel.FieldUser)
	}
	if m.password != nil {
		fields = append(fields, personnel.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonnelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personnel.FieldName:
		return m.Name()
	case personnel.FieldDepartment:
		return m.Department()
	case personnel.FieldUser:
		return m.User()
	case personnel.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonnelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personnel.FieldName:
		return m.OldName(ctx)
	case personnel.FieldDepartment:
		return m.OldDepartment(ctx)
	case personnel.FieldUser:
		return m.OldUser(ctx)
	case personnel.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Personnel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personnel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case personnel.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case personnel.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case personnel.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonnelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonnelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Personnel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonnelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonnelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonnelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Personnel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonnelMutation) ResetField(name string) error {
	switch name {
	case personnel.FieldName:
		m.ResetName()
		return nil
	case personnel.FieldDepartment:
		m.ResetDepartment()
		return nil
	case personnel.FieldUser:
		m.ResetUser()
		return nil
	case personnel.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonnelMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.physicaltherapyrecord != nil {
		edges = append(edges, personnel.EdgePhysicaltherapyrecord)
	}
	if m._Bonedisease != nil {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	if m._Checksymptom != nil {
		edges = append(edges, personnel.EdgeChecksymptom)
	}
	if m._Dentalappointment != nil {
		edges = append(edges, personnel.EdgeDentalappointment)
	}
	if m._Surgeryappointment != nil {
		edges = append(edges, personnel.EdgeSurgeryappointment)
	}
	if m._Antenatalinformation != nil {
		edges = append(edges, personnel.EdgeAntenatalinformation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonnelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.physicaltherapyrecord))
		for id := range m.physicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m._Checksymptom))
		for id := range m._Checksymptom {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m._Dentalappointment))
		for id := range m._Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m._Surgeryappointment))
		for id := range m._Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m._Antenatalinformation))
		for id := range m._Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonnelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedphysicaltherapyrecord != nil {
		edges = append(edges, personnel.EdgePhysicaltherapyrecord)
	}
	if m.removed_Bonedisease != nil {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	if m.removed_Checksymptom != nil {
		edges = append(edges, personnel.EdgeChecksymptom)
	}
	if m.removed_Dentalappointment != nil {
		edges = append(edges, personnel.EdgeDentalappointment)
	}
	if m.removed_Surgeryappointment != nil {
		edges = append(edges, personnel.EdgeSurgeryappointment)
	}
	if m.removed_Antenatalinformation != nil {
		edges = append(edges, personnel.EdgeAntenatalinformation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonnelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.removedphysicaltherapyrecord))
		for id := range m.removedphysicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeChecksymptom:
		ids := make([]ent.Value, 0, len(m.removed_Checksymptom))
		for id := range m.removed_Checksymptom {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeDentalappointment:
		ids := make([]ent.Value, 0, len(m.removed_Dentalappointment))
		for id := range m.removed_Dentalappointment {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m.removed_Surgeryappointment))
		for id := range m.removed_Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	case personnel.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m.removed_Antenatalinformation))
		for id := range m.removed_Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonnelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedphysicaltherapyrecord {
		edges = append(edges, personnel.EdgePhysicaltherapyrecord)
	}
	if m.cleared_Bonedisease {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	if m.cleared_Checksymptom {
		edges = append(edges, personnel.EdgeChecksymptom)
	}
	if m.cleared_Dentalappointment {
		edges = append(edges, personnel.EdgeDentalappointment)
	}
	if m.cleared_Surgeryappointment {
		edges = append(edges, personnel.EdgeSurgeryappointment)
	}
	if m.cleared_Antenatalinformation {
		edges = append(edges, personnel.EdgeAntenatalinformation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonnelMutation) EdgeCleared(name string) bool {
	switch name {
	case personnel.EdgePhysicaltherapyrecord:
		return m.clearedphysicaltherapyrecord
	case personnel.EdgeBonedisease:
		return m.cleared_Bonedisease
	case personnel.EdgeChecksymptom:
		return m.cleared_Checksymptom
	case personnel.EdgeDentalappointment:
		return m.cleared_Dentalappointment
	case personnel.EdgeSurgeryappointment:
		return m.cleared_Surgeryappointment
	case personnel.EdgeAntenatalinformation:
		return m.cleared_Antenatalinformation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonnelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Personnel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonnelMutation) ResetEdge(name string) error {
	switch name {
	case personnel.EdgePhysicaltherapyrecord:
		m.ResetPhysicaltherapyrecord()
		return nil
	case personnel.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	case personnel.EdgeChecksymptom:
		m.ResetChecksymptom()
		return nil
	case personnel.EdgeDentalappointment:
		m.ResetDentalappointment()
		return nil
	case personnel.EdgeSurgeryappointment:
		m.ResetSurgeryappointment()
		return nil
	case personnel.EdgeAntenatalinformation:
		m.ResetAntenatalinformation()
		return nil
	}
	return fmt.Errorf("unknown Personnel edge %s", name)
}

// PhysicaltherapyrecordMutation represents an operation that mutates the Physicaltherapyrecord nodes in the graph.
type PhysicaltherapyrecordMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	appointtime                *time.Time
	clearedFields              map[string]struct{}
	personnel                  *int
	clearedpersonnel           bool
	patient                    *int
	clearedpatient             bool
	physicaltherapyroom        *int
	clearedphysicaltherapyroom bool
	status                     *int
	clearedstatus              bool
	done                       bool
	oldValue                   func(context.Context) (*Physicaltherapyrecord, error)
	predicates                 []predicate.Physicaltherapyrecord
}

var _ ent.Mutation = (*PhysicaltherapyrecordMutation)(nil)

// physicaltherapyrecordOption allows management of the mutation configuration using functional options.
type physicaltherapyrecordOption func(*PhysicaltherapyrecordMutation)

// newPhysicaltherapyrecordMutation creates new mutation for the Physicaltherapyrecord entity.
func newPhysicaltherapyrecordMutation(c config, op Op, opts ...physicaltherapyrecordOption) *PhysicaltherapyrecordMutation {
	m := &PhysicaltherapyrecordMutation{
		config:        c,
		op:            op,
		typ:           TypePhysicaltherapyrecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhysicaltherapyrecordID sets the ID field of the mutation.
func withPhysicaltherapyrecordID(id int) physicaltherapyrecordOption {
	return func(m *PhysicaltherapyrecordMutation) {
		var (
			err   error
			once  sync.Once
			value *Physicaltherapyrecord
		)
		m.oldValue = func(ctx context.Context) (*Physicaltherapyrecord, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Physicaltherapyrecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhysicaltherapyrecord sets the old Physicaltherapyrecord of the mutation.
func withPhysicaltherapyrecord(node *Physicaltherapyrecord) physicaltherapyrecordOption {
	return func(m *PhysicaltherapyrecordMutation) {
		m.oldValue = func(context.Context) (*Physicaltherapyrecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhysicaltherapyrecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhysicaltherapyrecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PhysicaltherapyrecordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppointtime sets the "appointtime" field.
func (m *PhysicaltherapyrecordMutation) SetAppointtime(t time.Time) {
	m.appointtime = &t
}

// Appointtime returns the value of the "appointtime" field in the mutation.
func (m *PhysicaltherapyrecordMutation) Appointtime() (r time.Time, exists bool) {
	v := m.appointtime
	if v == nil {
		return
	}
	return *v, true
}

// OldAppointtime returns the old "appointtime" field's value of the Physicaltherapyrecord entity.
// If the Physicaltherapyrecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhysicaltherapyrecordMutation) OldAppointtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppointtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppointtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppointtime: %w", err)
	}
	return oldValue.Appointtime, nil
}

// ResetAppointtime resets all changes to the "appointtime" field.
func (m *PhysicaltherapyrecordMutation) ResetAppointtime() {
	m.appointtime = nil
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by id.
func (m *PhysicaltherapyrecordMutation) SetPersonnelID(id int) {
	m.personnel = &id
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (m *PhysicaltherapyrecordMutation) ClearPersonnel() {
	m.clearedpersonnel = true
}

// PersonnelCleared returns if the "personnel" edge to the Personnel entity was cleared.
func (m *PhysicaltherapyrecordMutation) PersonnelCleared() bool {
	return m.clearedpersonnel
}

// PersonnelID returns the "personnel" edge ID in the mutation.
func (m *PhysicaltherapyrecordMutation) PersonnelID() (id int, exists bool) {
	if m.personnel != nil {
		return *m.personnel, true
	}
	return
}

// PersonnelIDs returns the "personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *PhysicaltherapyrecordMutation) PersonnelIDs() (ids []int) {
	if id := m.personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "personnel" edge.
func (m *PhysicaltherapyrecordMutation) ResetPersonnel() {
	m.personnel = nil
	m.clearedpersonnel = false
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *PhysicaltherapyrecordMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *PhysicaltherapyrecordMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the "patient" edge to the Patient entity was cleared.
func (m *PhysicaltherapyrecordMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *PhysicaltherapyrecordMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *PhysicaltherapyrecordMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *PhysicaltherapyrecordMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetPhysicaltherapyroomID sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity by id.
func (m *PhysicaltherapyrecordMutation) SetPhysicaltherapyroomID(id int) {
	m.physicaltherapyroom = &id
}

// ClearPhysicaltherapyroom clears the "physicaltherapyroom" edge to the Physicaltherapyroom entity.
func (m *PhysicaltherapyrecordMutation) ClearPhysicaltherapyroom() {
	m.clearedphysicaltherapyroom = true
}

// PhysicaltherapyroomCleared returns if the "physicaltherapyroom" edge to the Physicaltherapyroom entity was cleared.
func (m *PhysicaltherapyrecordMutation) PhysicaltherapyroomCleared() bool {
	return m.clearedphysicaltherapyroom
}

// PhysicaltherapyroomID returns the "physicaltherapyroom" edge ID in the mutation.
func (m *PhysicaltherapyrecordMutation) PhysicaltherapyroomID() (id int, exists bool) {
	if m.physicaltherapyroom != nil {
		return *m.physicaltherapyroom, true
	}
	return
}

// PhysicaltherapyroomIDs returns the "physicaltherapyroom" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PhysicaltherapyroomID instead. It exists only for internal usage by the builders.
func (m *PhysicaltherapyrecordMutation) PhysicaltherapyroomIDs() (ids []int) {
	if id := m.physicaltherapyroom; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPhysicaltherapyroom resets all changes to the "physicaltherapyroom" edge.
func (m *PhysicaltherapyrecordMutation) ResetPhysicaltherapyroom() {
	m.physicaltherapyroom = nil
	m.clearedphysicaltherapyroom = false
}

// SetStatusID sets the "status" edge to the Status entity by id.
func (m *PhysicaltherapyrecordMutation) SetStatusID(id int) {
	m.status = &id
}

// ClearStatus clears the "status" edge to the Status entity.
func (m *PhysicaltherapyrecordMutation) ClearStatus() {
	m.clearedstatus = true
}

// StatusCleared returns if the "status" edge to the Status entity was cleared.
func (m *PhysicaltherapyrecordMutation) StatusCleared() bool {
	return m.clearedstatus
}

// StatusID returns the "status" edge ID in the mutation.
func (m *PhysicaltherapyrecordMutation) StatusID() (id int, exists bool) {
	if m.status != nil {
		return *m.status, true
	}
	return
}

// StatusIDs returns the "status" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatusID instead. It exists only for internal usage by the builders.
func (m *PhysicaltherapyrecordMutation) StatusIDs() (ids []int) {
	if id := m.status; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatus resets all changes to the "status" edge.
func (m *PhysicaltherapyrecordMutation) ResetStatus() {
	m.status = nil
	m.clearedstatus = false
}

// Op returns the operation name.
func (m *PhysicaltherapyrecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Physicaltherapyrecord).
func (m *PhysicaltherapyrecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhysicaltherapyrecordMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.appointtime != nil {
		fields = append(fields, physicaltherapyrecord.FieldAppointtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhysicaltherapyrecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case physicaltherapyrecord.FieldAppointtime:
		return m.Appointtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhysicaltherapyrecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case physicaltherapyrecord.FieldAppointtime:
		return m.OldAppointtime(ctx)
	}
	return nil, fmt.Errorf("unknown Physicaltherapyrecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhysicaltherapyrecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case physicaltherapyrecord.FieldAppointtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppointtime(v)
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyrecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhysicaltherapyrecordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhysicaltherapyrecordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhysicaltherapyrecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Physicaltherapyrecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhysicaltherapyrecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhysicaltherapyrecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhysicaltherapyrecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Physicaltherapyrecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhysicaltherapyrecordMutation) ResetField(name string) error {
	switch name {
	case physicaltherapyrecord.FieldAppointtime:
		m.ResetAppointtime()
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyrecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhysicaltherapyrecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.personnel != nil {
		edges = append(edges, physicaltherapyrecord.EdgePersonnel)
	}
	if m.patient != nil {
		edges = append(edges, physicaltherapyrecord.EdgePatient)
	}
	if m.physicaltherapyroom != nil {
		edges = append(edges, physicaltherapyrecord.EdgePhysicaltherapyroom)
	}
	if m.status != nil {
		edges = append(edges, physicaltherapyrecord.EdgeStatus)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhysicaltherapyrecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case physicaltherapyrecord.EdgePersonnel:
		if id := m.personnel; id != nil {
			return []ent.Value{*id}
		}
	case physicaltherapyrecord.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case physicaltherapyrecord.EdgePhysicaltherapyroom:
		if id := m.physicaltherapyroom; id != nil {
			return []ent.Value{*id}
		}
	case physicaltherapyrecord.EdgeStatus:
		if id := m.status; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhysicaltherapyrecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhysicaltherapyrecordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhysicaltherapyrecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedpersonnel {
		edges = append(edges, physicaltherapyrecord.EdgePersonnel)
	}
	if m.clearedpatient {
		edges = append(edges, physicaltherapyrecord.EdgePatient)
	}
	if m.clearedphysicaltherapyroom {
		edges = append(edges, physicaltherapyrecord.EdgePhysicaltherapyroom)
	}
	if m.clearedstatus {
		edges = append(edges, physicaltherapyrecord.EdgeStatus)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhysicaltherapyrecordMutation) EdgeCleared(name string) bool {
	switch name {
	case physicaltherapyrecord.EdgePersonnel:
		return m.clearedpersonnel
	case physicaltherapyrecord.EdgePatient:
		return m.clearedpatient
	case physicaltherapyrecord.EdgePhysicaltherapyroom:
		return m.clearedphysicaltherapyroom
	case physicaltherapyrecord.EdgeStatus:
		return m.clearedstatus
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhysicaltherapyrecordMutation) ClearEdge(name string) error {
	switch name {
	case physicaltherapyrecord.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case physicaltherapyrecord.EdgePatient:
		m.ClearPatient()
		return nil
	case physicaltherapyrecord.EdgePhysicaltherapyroom:
		m.ClearPhysicaltherapyroom()
		return nil
	case physicaltherapyrecord.EdgeStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyrecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhysicaltherapyrecordMutation) ResetEdge(name string) error {
	switch name {
	case physicaltherapyrecord.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case physicaltherapyrecord.EdgePatient:
		m.ResetPatient()
		return nil
	case physicaltherapyrecord.EdgePhysicaltherapyroom:
		m.ResetPhysicaltherapyroom()
		return nil
	case physicaltherapyrecord.EdgeStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyrecord edge %s", name)
}

// PhysicaltherapyroomMutation represents an operation that mutates the Physicaltherapyroom nodes in the graph.
type PhysicaltherapyroomMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	physicaltherapyroomname      *string
	clearedFields                map[string]struct{}
	physicaltherapyrecord        map[int]struct{}
	removedphysicaltherapyrecord map[int]struct{}
	clearedphysicaltherapyrecord bool
	done                         bool
	oldValue                     func(context.Context) (*Physicaltherapyroom, error)
	predicates                   []predicate.Physicaltherapyroom
}

var _ ent.Mutation = (*PhysicaltherapyroomMutation)(nil)

// physicaltherapyroomOption allows management of the mutation configuration using functional options.
type physicaltherapyroomOption func(*PhysicaltherapyroomMutation)

// newPhysicaltherapyroomMutation creates new mutation for the Physicaltherapyroom entity.
func newPhysicaltherapyroomMutation(c config, op Op, opts ...physicaltherapyroomOption) *PhysicaltherapyroomMutation {
	m := &PhysicaltherapyroomMutation{
		config:        c,
		op:            op,
		typ:           TypePhysicaltherapyroom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhysicaltherapyroomID sets the ID field of the mutation.
func withPhysicaltherapyroomID(id int) physicaltherapyroomOption {
	return func(m *PhysicaltherapyroomMutation) {
		var (
			err   error
			once  sync.Once
			value *Physicaltherapyroom
		)
		m.oldValue = func(ctx context.Context) (*Physicaltherapyroom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Physicaltherapyroom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhysicaltherapyroom sets the old Physicaltherapyroom of the mutation.
func withPhysicaltherapyroom(node *Physicaltherapyroom) physicaltherapyroomOption {
	return func(m *PhysicaltherapyroomMutation) {
		m.oldValue = func(context.Context) (*Physicaltherapyroom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhysicaltherapyroomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhysicaltherapyroomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PhysicaltherapyroomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPhysicaltherapyroomname sets the "physicaltherapyroomname" field.
func (m *PhysicaltherapyroomMutation) SetPhysicaltherapyroomname(s string) {
	m.physicaltherapyroomname = &s
}

// Physicaltherapyroomname returns the value of the "physicaltherapyroomname" field in the mutation.
func (m *PhysicaltherapyroomMutation) Physicaltherapyroomname() (r string, exists bool) {
	v := m.physicaltherapyroomname
	if v == nil {
		return
	}
	return *v, true
}

// OldPhysicaltherapyroomname returns the old "physicaltherapyroomname" field's value of the Physicaltherapyroom entity.
// If the Physicaltherapyroom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhysicaltherapyroomMutation) OldPhysicaltherapyroomname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhysicaltherapyroomname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhysicaltherapyroomname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhysicaltherapyroomname: %w", err)
	}
	return oldValue.Physicaltherapyroomname, nil
}

// ResetPhysicaltherapyroomname resets all changes to the "physicaltherapyroomname" field.
func (m *PhysicaltherapyroomMutation) ResetPhysicaltherapyroomname() {
	m.physicaltherapyroomname = nil
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by ids.
func (m *PhysicaltherapyroomMutation) AddPhysicaltherapyrecordIDs(ids ...int) {
	if m.physicaltherapyrecord == nil {
		m.physicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.physicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// ClearPhysicaltherapyrecord clears the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PhysicaltherapyroomMutation) ClearPhysicaltherapyrecord() {
	m.clearedphysicaltherapyrecord = true
}

// PhysicaltherapyrecordCleared returns if the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity was cleared.
func (m *PhysicaltherapyroomMutation) PhysicaltherapyrecordCleared() bool {
	return m.clearedphysicaltherapyrecord
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (m *PhysicaltherapyroomMutation) RemovePhysicaltherapyrecordIDs(ids ...int) {
	if m.removedphysicaltherapyrecord == nil {
		m.removedphysicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.removedphysicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// RemovedPhysicaltherapyrecord returns the removed IDs of the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *PhysicaltherapyroomMutation) RemovedPhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.removedphysicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// PhysicaltherapyrecordIDs returns the "physicaltherapyrecord" edge IDs in the mutation.
func (m *PhysicaltherapyroomMutation) PhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.physicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// ResetPhysicaltherapyrecord resets all changes to the "physicaltherapyrecord" edge.
func (m *PhysicaltherapyroomMutation) ResetPhysicaltherapyrecord() {
	m.physicaltherapyrecord = nil
	m.clearedphysicaltherapyrecord = false
	m.removedphysicaltherapyrecord = nil
}

// Op returns the operation name.
func (m *PhysicaltherapyroomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Physicaltherapyroom).
func (m *PhysicaltherapyroomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhysicaltherapyroomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.physicaltherapyroomname != nil {
		fields = append(fields, physicaltherapyroom.FieldPhysicaltherapyroomname)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhysicaltherapyroomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case physicaltherapyroom.FieldPhysicaltherapyroomname:
		return m.Physicaltherapyroomname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhysicaltherapyroomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case physicaltherapyroom.FieldPhysicaltherapyroomname:
		return m.OldPhysicaltherapyroomname(ctx)
	}
	return nil, fmt.Errorf("unknown Physicaltherapyroom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhysicaltherapyroomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case physicaltherapyroom.FieldPhysicaltherapyroomname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhysicaltherapyroomname(v)
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyroom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhysicaltherapyroomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhysicaltherapyroomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhysicaltherapyroomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Physicaltherapyroom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhysicaltherapyroomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhysicaltherapyroomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhysicaltherapyroomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Physicaltherapyroom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhysicaltherapyroomMutation) ResetField(name string) error {
	switch name {
	case physicaltherapyroom.FieldPhysicaltherapyroomname:
		m.ResetPhysicaltherapyroomname()
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyroom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhysicaltherapyroomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.physicaltherapyrecord != nil {
		edges = append(edges, physicaltherapyroom.EdgePhysicaltherapyrecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhysicaltherapyroomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case physicaltherapyroom.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.physicaltherapyrecord))
		for id := range m.physicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhysicaltherapyroomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedphysicaltherapyrecord != nil {
		edges = append(edges, physicaltherapyroom.EdgePhysicaltherapyrecord)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhysicaltherapyroomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case physicaltherapyroom.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.removedphysicaltherapyrecord))
		for id := range m.removedphysicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhysicaltherapyroomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphysicaltherapyrecord {
		edges = append(edges, physicaltherapyroom.EdgePhysicaltherapyrecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhysicaltherapyroomMutation) EdgeCleared(name string) bool {
	switch name {
	case physicaltherapyroom.EdgePhysicaltherapyrecord:
		return m.clearedphysicaltherapyrecord
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhysicaltherapyroomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Physicaltherapyroom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhysicaltherapyroomMutation) ResetEdge(name string) error {
	switch name {
	case physicaltherapyroom.EdgePhysicaltherapyrecord:
		m.ResetPhysicaltherapyrecord()
		return nil
	}
	return fmt.Errorf("unknown Physicaltherapyroom edge %s", name)
}

// PregnancystatusMutation represents an operation that mutates the Pregnancystatus nodes in the graph.
type PregnancystatusMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	_Pregnancystatus             *string
	clearedFields                map[string]struct{}
	_Antenatalinformation        map[int]struct{}
	removed_Antenatalinformation map[int]struct{}
	cleared_Antenatalinformation bool
	done                         bool
	oldValue                     func(context.Context) (*Pregnancystatus, error)
	predicates                   []predicate.Pregnancystatus
}

var _ ent.Mutation = (*PregnancystatusMutation)(nil)

// pregnancystatusOption allows management of the mutation configuration using functional options.
type pregnancystatusOption func(*PregnancystatusMutation)

// newPregnancystatusMutation creates new mutation for the Pregnancystatus entity.
func newPregnancystatusMutation(c config, op Op, opts ...pregnancystatusOption) *PregnancystatusMutation {
	m := &PregnancystatusMutation{
		config:        c,
		op:            op,
		typ:           TypePregnancystatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPregnancystatusID sets the ID field of the mutation.
func withPregnancystatusID(id int) pregnancystatusOption {
	return func(m *PregnancystatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Pregnancystatus
		)
		m.oldValue = func(ctx context.Context) (*Pregnancystatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pregnancystatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPregnancystatus sets the old Pregnancystatus of the mutation.
func withPregnancystatus(node *Pregnancystatus) pregnancystatusOption {
	return func(m *PregnancystatusMutation) {
		m.oldValue = func(context.Context) (*Pregnancystatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PregnancystatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PregnancystatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PregnancystatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPregnancystatus sets the "Pregnancystatus" field.
func (m *PregnancystatusMutation) SetPregnancystatus(s string) {
	m._Pregnancystatus = &s
}

// Pregnancystatus returns the value of the "Pregnancystatus" field in the mutation.
func (m *PregnancystatusMutation) Pregnancystatus() (r string, exists bool) {
	v := m._Pregnancystatus
	if v == nil {
		return
	}
	return *v, true
}

// OldPregnancystatus returns the old "Pregnancystatus" field's value of the Pregnancystatus entity.
// If the Pregnancystatus object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PregnancystatusMutation) OldPregnancystatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPregnancystatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPregnancystatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPregnancystatus: %w", err)
	}
	return oldValue.Pregnancystatus, nil
}

// ResetPregnancystatus resets all changes to the "Pregnancystatus" field.
func (m *PregnancystatusMutation) ResetPregnancystatus() {
	m._Pregnancystatus = nil
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by ids.
func (m *PregnancystatusMutation) AddAntenatalinformationIDs(ids ...int) {
	if m._Antenatalinformation == nil {
		m._Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m._Antenatalinformation[ids[i]] = struct{}{}
	}
}

// ClearAntenatalinformation clears the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PregnancystatusMutation) ClearAntenatalinformation() {
	m.cleared_Antenatalinformation = true
}

// AntenatalinformationCleared returns if the "Antenatalinformation" edge to the Antenatalinformation entity was cleared.
func (m *PregnancystatusMutation) AntenatalinformationCleared() bool {
	return m.cleared_Antenatalinformation
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (m *PregnancystatusMutation) RemoveAntenatalinformationIDs(ids ...int) {
	if m.removed_Antenatalinformation == nil {
		m.removed_Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Antenatalinformation[ids[i]] = struct{}{}
	}
}

// RemovedAntenatalinformation returns the removed IDs of the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *PregnancystatusMutation) RemovedAntenatalinformationIDs() (ids []int) {
	for id := range m.removed_Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// AntenatalinformationIDs returns the "Antenatalinformation" edge IDs in the mutation.
func (m *PregnancystatusMutation) AntenatalinformationIDs() (ids []int) {
	for id := range m._Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatalinformation resets all changes to the "Antenatalinformation" edge.
func (m *PregnancystatusMutation) ResetAntenatalinformation() {
	m._Antenatalinformation = nil
	m.cleared_Antenatalinformation = false
	m.removed_Antenatalinformation = nil
}

// Op returns the operation name.
func (m *PregnancystatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Pregnancystatus).
func (m *PregnancystatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PregnancystatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Pregnancystatus != nil {
		fields = append(fields, pregnancystatus.FieldPregnancystatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PregnancystatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pregnancystatus.FieldPregnancystatus:
		return m.Pregnancystatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PregnancystatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pregnancystatus.FieldPregnancystatus:
		return m.OldPregnancystatus(ctx)
	}
	return nil, fmt.Errorf("unknown Pregnancystatus field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PregnancystatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pregnancystatus.FieldPregnancystatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPregnancystatus(v)
		return nil
	}
	return fmt.Errorf("unknown Pregnancystatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PregnancystatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PregnancystatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PregnancystatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pregnancystatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PregnancystatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PregnancystatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PregnancystatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pregnancystatus nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PregnancystatusMutation) ResetField(name string) error {
	switch name {
	case pregnancystatus.FieldPregnancystatus:
		m.ResetPregnancystatus()
		return nil
	}
	return fmt.Errorf("unknown Pregnancystatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PregnancystatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Antenatalinformation != nil {
		edges = append(edges, pregnancystatus.EdgeAntenatalinformation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PregnancystatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pregnancystatus.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m._Antenatalinformation))
		for id := range m._Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PregnancystatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Antenatalinformation != nil {
		edges = append(edges, pregnancystatus.EdgeAntenatalinformation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PregnancystatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pregnancystatus.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m.removed_Antenatalinformation))
		for id := range m.removed_Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PregnancystatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Antenatalinformation {
		edges = append(edges, pregnancystatus.EdgeAntenatalinformation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PregnancystatusMutation) EdgeCleared(name string) bool {
	switch name {
	case pregnancystatus.EdgeAntenatalinformation:
		return m.cleared_Antenatalinformation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PregnancystatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pregnancystatus unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PregnancystatusMutation) ResetEdge(name string) error {
	switch name {
	case pregnancystatus.EdgeAntenatalinformation:
		m.ResetAntenatalinformation()
		return nil
	}
	return fmt.Errorf("unknown Pregnancystatus edge %s", name)
}

// RemedyMutation represents an operation that mutates the Remedy nodes in the graph.
type RemedyMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	remedy              *string
	clearedFields       map[string]struct{}
	_Bonedisease        map[int]struct{}
	removed_Bonedisease map[int]struct{}
	cleared_Bonedisease bool
	done                bool
	oldValue            func(context.Context) (*Remedy, error)
	predicates          []predicate.Remedy
}

var _ ent.Mutation = (*RemedyMutation)(nil)

// remedyOption allows management of the mutation configuration using functional options.
type remedyOption func(*RemedyMutation)

// newRemedyMutation creates new mutation for the Remedy entity.
func newRemedyMutation(c config, op Op, opts ...remedyOption) *RemedyMutation {
	m := &RemedyMutation{
		config:        c,
		op:            op,
		typ:           TypeRemedy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRemedyID sets the ID field of the mutation.
func withRemedyID(id int) remedyOption {
	return func(m *RemedyMutation) {
		var (
			err   error
			once  sync.Once
			value *Remedy
		)
		m.oldValue = func(ctx context.Context) (*Remedy, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Remedy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRemedy sets the old Remedy of the mutation.
func withRemedy(node *Remedy) remedyOption {
	return func(m *RemedyMutation) {
		m.oldValue = func(context.Context) (*Remedy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RemedyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RemedyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RemedyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRemedy sets the "remedy" field.
func (m *RemedyMutation) SetRemedy(s string) {
	m.remedy = &s
}

// Remedy returns the value of the "remedy" field in the mutation.
func (m *RemedyMutation) Remedy() (r string, exists bool) {
	v := m.remedy
	if v == nil {
		return
	}
	return *v, true
}

// OldRemedy returns the old "remedy" field's value of the Remedy entity.
// If the Remedy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemedyMutation) OldRemedy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemedy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemedy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemedy: %w", err)
	}
	return oldValue.Remedy, nil
}

// ResetRemedy resets all changes to the "remedy" field.
func (m *RemedyMutation) ResetRemedy() {
	m.remedy = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *RemedyMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *RemedyMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *RemedyMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *RemedyMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *RemedyMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *RemedyMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *RemedyMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// Op returns the operation name.
func (m *RemedyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Remedy).
func (m *RemedyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RemedyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.remedy != nil {
		fields = append(fields, remedy.FieldRemedy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RemedyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case remedy.FieldRemedy:
		return m.Remedy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RemedyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case remedy.FieldRemedy:
		return m.OldRemedy(ctx)
	}
	return nil, fmt.Errorf("unknown Remedy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemedyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case remedy.FieldRemedy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemedy(v)
		return nil
	}
	return fmt.Errorf("unknown Remedy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RemedyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RemedyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemedyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Remedy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RemedyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RemedyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RemedyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Remedy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RemedyMutation) ResetField(name string) error {
	switch name {
	case remedy.FieldRemedy:
		m.ResetRemedy()
		return nil
	}
	return fmt.Errorf("unknown Remedy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RemedyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Bonedisease != nil {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RemedyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case remedy.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RemedyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Bonedisease != nil {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RemedyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case remedy.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RemedyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Bonedisease {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RemedyMutation) EdgeCleared(name string) bool {
	switch name {
	case remedy.EdgeBonedisease:
		return m.cleared_Bonedisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RemedyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Remedy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RemedyMutation) ResetEdge(name string) error {
	switch name {
	case remedy.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	}
	return fmt.Errorf("unknown Remedy edge %s", name)
}

// RisksMutation represents an operation that mutates the Risks nodes in the graph.
type RisksMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	_Risks                       *string
	clearedFields                map[string]struct{}
	_Antenatalinformation        map[int]struct{}
	removed_Antenatalinformation map[int]struct{}
	cleared_Antenatalinformation bool
	done                         bool
	oldValue                     func(context.Context) (*Risks, error)
	predicates                   []predicate.Risks
}

var _ ent.Mutation = (*RisksMutation)(nil)

// risksOption allows management of the mutation configuration using functional options.
type risksOption func(*RisksMutation)

// newRisksMutation creates new mutation for the Risks entity.
func newRisksMutation(c config, op Op, opts ...risksOption) *RisksMutation {
	m := &RisksMutation{
		config:        c,
		op:            op,
		typ:           TypeRisks,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRisksID sets the ID field of the mutation.
func withRisksID(id int) risksOption {
	return func(m *RisksMutation) {
		var (
			err   error
			once  sync.Once
			value *Risks
		)
		m.oldValue = func(ctx context.Context) (*Risks, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Risks.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRisks sets the old Risks of the mutation.
func withRisks(node *Risks) risksOption {
	return func(m *RisksMutation) {
		m.oldValue = func(context.Context) (*Risks, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RisksMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RisksMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RisksMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRisks sets the "Risks" field.
func (m *RisksMutation) SetRisks(s string) {
	m._Risks = &s
}

// Risks returns the value of the "Risks" field in the mutation.
func (m *RisksMutation) Risks() (r string, exists bool) {
	v := m._Risks
	if v == nil {
		return
	}
	return *v, true
}

// OldRisks returns the old "Risks" field's value of the Risks entity.
// If the Risks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RisksMutation) OldRisks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRisks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRisks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRisks: %w", err)
	}
	return oldValue.Risks, nil
}

// ResetRisks resets all changes to the "Risks" field.
func (m *RisksMutation) ResetRisks() {
	m._Risks = nil
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by ids.
func (m *RisksMutation) AddAntenatalinformationIDs(ids ...int) {
	if m._Antenatalinformation == nil {
		m._Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m._Antenatalinformation[ids[i]] = struct{}{}
	}
}

// ClearAntenatalinformation clears the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *RisksMutation) ClearAntenatalinformation() {
	m.cleared_Antenatalinformation = true
}

// AntenatalinformationCleared returns if the "Antenatalinformation" edge to the Antenatalinformation entity was cleared.
func (m *RisksMutation) AntenatalinformationCleared() bool {
	return m.cleared_Antenatalinformation
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (m *RisksMutation) RemoveAntenatalinformationIDs(ids ...int) {
	if m.removed_Antenatalinformation == nil {
		m.removed_Antenatalinformation = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Antenatalinformation[ids[i]] = struct{}{}
	}
}

// RemovedAntenatalinformation returns the removed IDs of the "Antenatalinformation" edge to the Antenatalinformation entity.
func (m *RisksMutation) RemovedAntenatalinformationIDs() (ids []int) {
	for id := range m.removed_Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// AntenatalinformationIDs returns the "Antenatalinformation" edge IDs in the mutation.
func (m *RisksMutation) AntenatalinformationIDs() (ids []int) {
	for id := range m._Antenatalinformation {
		ids = append(ids, id)
	}
	return
}

// ResetAntenatalinformation resets all changes to the "Antenatalinformation" edge.
func (m *RisksMutation) ResetAntenatalinformation() {
	m._Antenatalinformation = nil
	m.cleared_Antenatalinformation = false
	m.removed_Antenatalinformation = nil
}

// Op returns the operation name.
func (m *RisksMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Risks).
func (m *RisksMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RisksMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Risks != nil {
		fields = append(fields, risks.FieldRisks)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RisksMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case risks.FieldRisks:
		return m.Risks()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RisksMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case risks.FieldRisks:
		return m.OldRisks(ctx)
	}
	return nil, fmt.Errorf("unknown Risks field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RisksMutation) SetField(name string, value ent.Value) error {
	switch name {
	case risks.FieldRisks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRisks(v)
		return nil
	}
	return fmt.Errorf("unknown Risks field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RisksMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RisksMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RisksMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Risks numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RisksMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RisksMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RisksMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Risks nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RisksMutation) ResetField(name string) error {
	switch name {
	case risks.FieldRisks:
		m.ResetRisks()
		return nil
	}
	return fmt.Errorf("unknown Risks field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RisksMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Antenatalinformation != nil {
		edges = append(edges, risks.EdgeAntenatalinformation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RisksMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case risks.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m._Antenatalinformation))
		for id := range m._Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RisksMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Antenatalinformation != nil {
		edges = append(edges, risks.EdgeAntenatalinformation)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RisksMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case risks.EdgeAntenatalinformation:
		ids := make([]ent.Value, 0, len(m.removed_Antenatalinformation))
		for id := range m.removed_Antenatalinformation {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RisksMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Antenatalinformation {
		edges = append(edges, risks.EdgeAntenatalinformation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RisksMutation) EdgeCleared(name string) bool {
	switch name {
	case risks.EdgeAntenatalinformation:
		return m.cleared_Antenatalinformation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RisksMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Risks unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RisksMutation) ResetEdge(name string) error {
	switch name {
	case risks.EdgeAntenatalinformation:
		m.ResetAntenatalinformation()
		return nil
	}
	return fmt.Errorf("unknown Risks edge %s", name)
}

// StatusMutation represents an operation that mutates the Status nodes in the graph.
type StatusMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	statusname                   *string
	clearedFields                map[string]struct{}
	physicaltherapyrecord        map[int]struct{}
	removedphysicaltherapyrecord map[int]struct{}
	clearedphysicaltherapyrecord bool
	done                         bool
	oldValue                     func(context.Context) (*Status, error)
	predicates                   []predicate.Status
}

var _ ent.Mutation = (*StatusMutation)(nil)

// statusOption allows management of the mutation configuration using functional options.
type statusOption func(*StatusMutation)

// newStatusMutation creates new mutation for the Status entity.
func newStatusMutation(c config, op Op, opts ...statusOption) *StatusMutation {
	m := &StatusMutation{
		config:        c,
		op:            op,
		typ:           TypeStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusID sets the ID field of the mutation.
func withStatusID(id int) statusOption {
	return func(m *StatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Status
		)
		m.oldValue = func(ctx context.Context) (*Status, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Status.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatus sets the old Status of the mutation.
func withStatus(node *Status) statusOption {
	return func(m *StatusMutation) {
		m.oldValue = func(context.Context) (*Status, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *StatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatusname sets the "statusname" field.
func (m *StatusMutation) SetStatusname(s string) {
	m.statusname = &s
}

// Statusname returns the value of the "statusname" field in the mutation.
func (m *StatusMutation) Statusname() (r string, exists bool) {
	v := m.statusname
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusname returns the old "statusname" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldStatusname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatusname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatusname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusname: %w", err)
	}
	return oldValue.Statusname, nil
}

// ResetStatusname resets all changes to the "statusname" field.
func (m *StatusMutation) ResetStatusname() {
	m.statusname = nil
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by ids.
func (m *StatusMutation) AddPhysicaltherapyrecordIDs(ids ...int) {
	if m.physicaltherapyrecord == nil {
		m.physicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.physicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// ClearPhysicaltherapyrecord clears the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *StatusMutation) ClearPhysicaltherapyrecord() {
	m.clearedphysicaltherapyrecord = true
}

// PhysicaltherapyrecordCleared returns if the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity was cleared.
func (m *StatusMutation) PhysicaltherapyrecordCleared() bool {
	return m.clearedphysicaltherapyrecord
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (m *StatusMutation) RemovePhysicaltherapyrecordIDs(ids ...int) {
	if m.removedphysicaltherapyrecord == nil {
		m.removedphysicaltherapyrecord = make(map[int]struct{})
	}
	for i := range ids {
		m.removedphysicaltherapyrecord[ids[i]] = struct{}{}
	}
}

// RemovedPhysicaltherapyrecord returns the removed IDs of the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity.
func (m *StatusMutation) RemovedPhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.removedphysicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// PhysicaltherapyrecordIDs returns the "physicaltherapyrecord" edge IDs in the mutation.
func (m *StatusMutation) PhysicaltherapyrecordIDs() (ids []int) {
	for id := range m.physicaltherapyrecord {
		ids = append(ids, id)
	}
	return
}

// ResetPhysicaltherapyrecord resets all changes to the "physicaltherapyrecord" edge.
func (m *StatusMutation) ResetPhysicaltherapyrecord() {
	m.physicaltherapyrecord = nil
	m.clearedphysicaltherapyrecord = false
	m.removedphysicaltherapyrecord = nil
}

// Op returns the operation name.
func (m *StatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Status).
func (m *StatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.statusname != nil {
		fields = append(fields, status.FieldStatusname)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case status.FieldStatusname:
		return m.Statusname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case status.FieldStatusname:
		return m.OldStatusname(ctx)
	}
	return nil, fmt.Errorf("unknown Status field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case status.FieldStatusname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusname(v)
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Status numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Status nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatusMutation) ResetField(name string) error {
	switch name {
	case status.FieldStatusname:
		m.ResetStatusname()
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.physicaltherapyrecord != nil {
		edges = append(edges, status.EdgePhysicaltherapyrecord)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case status.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.physicaltherapyrecord))
		for id := range m.physicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedphysicaltherapyrecord != nil {
		edges = append(edges, status.EdgePhysicaltherapyrecord)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case status.EdgePhysicaltherapyrecord:
		ids := make([]ent.Value, 0, len(m.removedphysicaltherapyrecord))
		for id := range m.removedphysicaltherapyrecord {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphysicaltherapyrecord {
		edges = append(edges, status.EdgePhysicaltherapyrecord)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatusMutation) EdgeCleared(name string) bool {
	switch name {
	case status.EdgePhysicaltherapyrecord:
		return m.clearedphysicaltherapyrecord
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Status unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatusMutation) ResetEdge(name string) error {
	switch name {
	case status.EdgePhysicaltherapyrecord:
		m.ResetPhysicaltherapyrecord()
		return nil
	}
	return fmt.Errorf("unknown Status edge %s", name)
}

// SurgeryappointmentMutation represents an operation that mutates the Surgeryappointment nodes in the graph.
type SurgeryappointmentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	appoint_time        *time.Time
	phone               *string
	note                *string
	age                 *int
	addage              *int
	clearedFields       map[string]struct{}
	_Personnel          *int
	cleared_Personnel   bool
	_Patient            *int
	cleared_Patient     bool
	_Surgerytype        *int
	cleared_Surgerytype bool
	done                bool
	oldValue            func(context.Context) (*Surgeryappointment, error)
	predicates          []predicate.Surgeryappointment
}

var _ ent.Mutation = (*SurgeryappointmentMutation)(nil)

// surgeryappointmentOption allows management of the mutation configuration using functional options.
type surgeryappointmentOption func(*SurgeryappointmentMutation)

// newSurgeryappointmentMutation creates new mutation for the Surgeryappointment entity.
func newSurgeryappointmentMutation(c config, op Op, opts ...surgeryappointmentOption) *SurgeryappointmentMutation {
	m := &SurgeryappointmentMutation{
		config:        c,
		op:            op,
		typ:           TypeSurgeryappointment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSurgeryappointmentID sets the ID field of the mutation.
func withSurgeryappointmentID(id int) surgeryappointmentOption {
	return func(m *SurgeryappointmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Surgeryappointment
		)
		m.oldValue = func(ctx context.Context) (*Surgeryappointment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Surgeryappointment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSurgeryappointment sets the old Surgeryappointment of the mutation.
func withSurgeryappointment(node *Surgeryappointment) surgeryappointmentOption {
	return func(m *SurgeryappointmentMutation) {
		m.oldValue = func(context.Context) (*Surgeryappointment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SurgeryappointmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SurgeryappointmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *SurgeryappointmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppointTime sets the "appoint_time" field.
func (m *SurgeryappointmentMutation) SetAppointTime(t time.Time) {
	m.appoint_time = &t
}

// AppointTime returns the value of the "appoint_time" field in the mutation.
func (m *SurgeryappointmentMutation) AppointTime() (r time.Time, exists bool) {
	v := m.appoint_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAppointTime returns the old "appoint_time" field's value of the Surgeryappointment entity.
// If the Surgeryappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurgeryappointmentMutation) OldAppointTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppointTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppointTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppointTime: %w", err)
	}
	return oldValue.AppointTime, nil
}

// ResetAppointTime resets all changes to the "appoint_time" field.
func (m *SurgeryappointmentMutation) ResetAppointTime() {
	m.appoint_time = nil
}

// SetPhone sets the "phone" field.
func (m *SurgeryappointmentMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SurgeryappointmentMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Surgeryappointment entity.
// If the Surgeryappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurgeryappointmentMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *SurgeryappointmentMutation) ResetPhone() {
	m.phone = nil
}

// SetNote sets the "note" field.
func (m *SurgeryappointmentMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the value of the "note" field in the mutation.
func (m *SurgeryappointmentMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old "note" field's value of the Surgeryappointment entity.
// If the Surgeryappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurgeryappointmentMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote resets all changes to the "note" field.
func (m *SurgeryappointmentMutation) ResetNote() {
	m.note = nil
}

// SetAge sets the "age" field.
func (m *SurgeryappointmentMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *SurgeryappointmentMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Surgeryappointment entity.
// If the Surgeryappointment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurgeryappointmentMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *SurgeryappointmentMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *SurgeryappointmentMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *SurgeryappointmentMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by id.
func (m *SurgeryappointmentMutation) SetPersonnelID(id int) {
	m._Personnel = &id
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (m *SurgeryappointmentMutation) ClearPersonnel() {
	m.cleared_Personnel = true
}

// PersonnelCleared returns if the "Personnel" edge to the Personnel entity was cleared.
func (m *SurgeryappointmentMutation) PersonnelCleared() bool {
	return m.cleared_Personnel
}

// PersonnelID returns the "Personnel" edge ID in the mutation.
func (m *SurgeryappointmentMutation) PersonnelID() (id int, exists bool) {
	if m._Personnel != nil {
		return *m._Personnel, true
	}
	return
}

// PersonnelIDs returns the "Personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *SurgeryappointmentMutation) PersonnelIDs() (ids []int) {
	if id := m._Personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "Personnel" edge.
func (m *SurgeryappointmentMutation) ResetPersonnel() {
	m._Personnel = nil
	m.cleared_Personnel = false
}

// SetPatientID sets the "Patient" edge to the Patient entity by id.
func (m *SurgeryappointmentMutation) SetPatientID(id int) {
	m._Patient = &id
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (m *SurgeryappointmentMutation) ClearPatient() {
	m.cleared_Patient = true
}

// PatientCleared returns if the "Patient" edge to the Patient entity was cleared.
func (m *SurgeryappointmentMutation) PatientCleared() bool {
	return m.cleared_Patient
}

// PatientID returns the "Patient" edge ID in the mutation.
func (m *SurgeryappointmentMutation) PatientID() (id int, exists bool) {
	if m._Patient != nil {
		return *m._Patient, true
	}
	return
}

// PatientIDs returns the "Patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *SurgeryappointmentMutation) PatientIDs() (ids []int) {
	if id := m._Patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "Patient" edge.
func (m *SurgeryappointmentMutation) ResetPatient() {
	m._Patient = nil
	m.cleared_Patient = false
}

// SetSurgerytypeID sets the "Surgerytype" edge to the Surgerytype entity by id.
func (m *SurgeryappointmentMutation) SetSurgerytypeID(id int) {
	m._Surgerytype = &id
}

// ClearSurgerytype clears the "Surgerytype" edge to the Surgerytype entity.
func (m *SurgeryappointmentMutation) ClearSurgerytype() {
	m.cleared_Surgerytype = true
}

// SurgerytypeCleared returns if the "Surgerytype" edge to the Surgerytype entity was cleared.
func (m *SurgeryappointmentMutation) SurgerytypeCleared() bool {
	return m.cleared_Surgerytype
}

// SurgerytypeID returns the "Surgerytype" edge ID in the mutation.
func (m *SurgeryappointmentMutation) SurgerytypeID() (id int, exists bool) {
	if m._Surgerytype != nil {
		return *m._Surgerytype, true
	}
	return
}

// SurgerytypeIDs returns the "Surgerytype" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SurgerytypeID instead. It exists only for internal usage by the builders.
func (m *SurgeryappointmentMutation) SurgerytypeIDs() (ids []int) {
	if id := m._Surgerytype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSurgerytype resets all changes to the "Surgerytype" edge.
func (m *SurgeryappointmentMutation) ResetSurgerytype() {
	m._Surgerytype = nil
	m.cleared_Surgerytype = false
}

// Op returns the operation name.
func (m *SurgeryappointmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Surgeryappointment).
func (m *SurgeryappointmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SurgeryappointmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.appoint_time != nil {
		fields = append(fields, surgeryappointment.FieldAppointTime)
	}
	if m.phone != nil {
		fields = append(fields, surgeryappointment.FieldPhone)
	}
	if m.note != nil {
		fields = append(fields, surgeryappointment.FieldNote)
	}
	if m.age != nil {
		fields = append(fields, surgeryappointment.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SurgeryappointmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case surgeryappointment.FieldAppointTime:
		return m.AppointTime()
	case surgeryappointment.FieldPhone:
		return m.Phone()
	case surgeryappointment.FieldNote:
		return m.Note()
	case surgeryappointment.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SurgeryappointmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case surgeryappointment.FieldAppointTime:
		return m.OldAppointTime(ctx)
	case surgeryappointment.FieldPhone:
		return m.OldPhone(ctx)
	case surgeryappointment.FieldNote:
		return m.OldNote(ctx)
	case surgeryappointment.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Surgeryappointment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurgeryappointmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case surgeryappointment.FieldAppointTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppointTime(v)
		return nil
	case surgeryappointment.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case surgeryappointment.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	case surgeryappointment.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Surgeryappointment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SurgeryappointmentMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, surgeryappointment.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SurgeryappointmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case surgeryappointment.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurgeryappointmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case surgeryappointment.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Surgeryappointment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SurgeryappointmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SurgeryappointmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SurgeryappointmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Surgeryappointment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SurgeryappointmentMutation) ResetField(name string) error {
	switch name {
	case surgeryappointment.FieldAppointTime:
		m.ResetAppointTime()
		return nil
	case surgeryappointment.FieldPhone:
		m.ResetPhone()
		return nil
	case surgeryappointment.FieldNote:
		m.ResetNote()
		return nil
	case surgeryappointment.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Surgeryappointment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SurgeryappointmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Personnel != nil {
		edges = append(edges, surgeryappointment.EdgePersonnel)
	}
	if m._Patient != nil {
		edges = append(edges, surgeryappointment.EdgePatient)
	}
	if m._Surgerytype != nil {
		edges = append(edges, surgeryappointment.EdgeSurgerytype)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SurgeryappointmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case surgeryappointment.EdgePersonnel:
		if id := m._Personnel; id != nil {
			return []ent.Value{*id}
		}
	case surgeryappointment.EdgePatient:
		if id := m._Patient; id != nil {
			return []ent.Value{*id}
		}
	case surgeryappointment.EdgeSurgerytype:
		if id := m._Surgerytype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SurgeryappointmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SurgeryappointmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SurgeryappointmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Personnel {
		edges = append(edges, surgeryappointment.EdgePersonnel)
	}
	if m.cleared_Patient {
		edges = append(edges, surgeryappointment.EdgePatient)
	}
	if m.cleared_Surgerytype {
		edges = append(edges, surgeryappointment.EdgeSurgerytype)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SurgeryappointmentMutation) EdgeCleared(name string) bool {
	switch name {
	case surgeryappointment.EdgePersonnel:
		return m.cleared_Personnel
	case surgeryappointment.EdgePatient:
		return m.cleared_Patient
	case surgeryappointment.EdgeSurgerytype:
		return m.cleared_Surgerytype
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SurgeryappointmentMutation) ClearEdge(name string) error {
	switch name {
	case surgeryappointment.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case surgeryappointment.EdgePatient:
		m.ClearPatient()
		return nil
	case surgeryappointment.EdgeSurgerytype:
		m.ClearSurgerytype()
		return nil
	}
	return fmt.Errorf("unknown Surgeryappointment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SurgeryappointmentMutation) ResetEdge(name string) error {
	switch name {
	case surgeryappointment.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case surgeryappointment.EdgePatient:
		m.ResetPatient()
		return nil
	case surgeryappointment.EdgeSurgerytype:
		m.ResetSurgerytype()
		return nil
	}
	return fmt.Errorf("unknown Surgeryappointment edge %s", name)
}

// SurgerytypeMutation represents an operation that mutates the Surgerytype nodes in the graph.
type SurgerytypeMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	typename                   *string
	clearedFields              map[string]struct{}
	_Surgeryappointment        map[int]struct{}
	removed_Surgeryappointment map[int]struct{}
	cleared_Surgeryappointment bool
	done                       bool
	oldValue                   func(context.Context) (*Surgerytype, error)
	predicates                 []predicate.Surgerytype
}

var _ ent.Mutation = (*SurgerytypeMutation)(nil)

// surgerytypeOption allows management of the mutation configuration using functional options.
type surgerytypeOption func(*SurgerytypeMutation)

// newSurgerytypeMutation creates new mutation for the Surgerytype entity.
func newSurgerytypeMutation(c config, op Op, opts ...surgerytypeOption) *SurgerytypeMutation {
	m := &SurgerytypeMutation{
		config:        c,
		op:            op,
		typ:           TypeSurgerytype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSurgerytypeID sets the ID field of the mutation.
func withSurgerytypeID(id int) surgerytypeOption {
	return func(m *SurgerytypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Surgerytype
		)
		m.oldValue = func(ctx context.Context) (*Surgerytype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Surgerytype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSurgerytype sets the old Surgerytype of the mutation.
func withSurgerytype(node *Surgerytype) surgerytypeOption {
	return func(m *SurgerytypeMutation) {
		m.oldValue = func(context.Context) (*Surgerytype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SurgerytypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SurgerytypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *SurgerytypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTypename sets the "typename" field.
func (m *SurgerytypeMutation) SetTypename(s string) {
	m.typename = &s
}

// Typename returns the value of the "typename" field in the mutation.
func (m *SurgerytypeMutation) Typename() (r string, exists bool) {
	v := m.typename
	if v == nil {
		return
	}
	return *v, true
}

// OldTypename returns the old "typename" field's value of the Surgerytype entity.
// If the Surgerytype object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurgerytypeMutation) OldTypename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypename: %w", err)
	}
	return oldValue.Typename, nil
}

// ResetTypename resets all changes to the "typename" field.
func (m *SurgerytypeMutation) ResetTypename() {
	m.typename = nil
}

// AddSurgeryappointmentIDs adds the "Surgeryappointment" edge to the Surgeryappointment entity by ids.
func (m *SurgerytypeMutation) AddSurgeryappointmentIDs(ids ...int) {
	if m._Surgeryappointment == nil {
		m._Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m._Surgeryappointment[ids[i]] = struct{}{}
	}
}

// ClearSurgeryappointment clears the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *SurgerytypeMutation) ClearSurgeryappointment() {
	m.cleared_Surgeryappointment = true
}

// SurgeryappointmentCleared returns if the "Surgeryappointment" edge to the Surgeryappointment entity was cleared.
func (m *SurgerytypeMutation) SurgeryappointmentCleared() bool {
	return m.cleared_Surgeryappointment
}

// RemoveSurgeryappointmentIDs removes the "Surgeryappointment" edge to the Surgeryappointment entity by IDs.
func (m *SurgerytypeMutation) RemoveSurgeryappointmentIDs(ids ...int) {
	if m.removed_Surgeryappointment == nil {
		m.removed_Surgeryappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Surgeryappointment[ids[i]] = struct{}{}
	}
}

// RemovedSurgeryappointment returns the removed IDs of the "Surgeryappointment" edge to the Surgeryappointment entity.
func (m *SurgerytypeMutation) RemovedSurgeryappointmentIDs() (ids []int) {
	for id := range m.removed_Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// SurgeryappointmentIDs returns the "Surgeryappointment" edge IDs in the mutation.
func (m *SurgerytypeMutation) SurgeryappointmentIDs() (ids []int) {
	for id := range m._Surgeryappointment {
		ids = append(ids, id)
	}
	return
}

// ResetSurgeryappointment resets all changes to the "Surgeryappointment" edge.
func (m *SurgerytypeMutation) ResetSurgeryappointment() {
	m._Surgeryappointment = nil
	m.cleared_Surgeryappointment = false
	m.removed_Surgeryappointment = nil
}

// Op returns the operation name.
func (m *SurgerytypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Surgerytype).
func (m *SurgerytypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SurgerytypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.typename != nil {
		fields = append(fields, surgerytype.FieldTypename)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SurgerytypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case surgerytype.FieldTypename:
		return m.Typename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SurgerytypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case surgerytype.FieldTypename:
		return m.OldTypename(ctx)
	}
	return nil, fmt.Errorf("unknown Surgerytype field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurgerytypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case surgerytype.FieldTypename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypename(v)
		return nil
	}
	return fmt.Errorf("unknown Surgerytype field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SurgerytypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SurgerytypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurgerytypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Surgerytype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SurgerytypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SurgerytypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SurgerytypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Surgerytype nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SurgerytypeMutation) ResetField(name string) error {
	switch name {
	case surgerytype.FieldTypename:
		m.ResetTypename()
		return nil
	}
	return fmt.Errorf("unknown Surgerytype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SurgerytypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Surgeryappointment != nil {
		edges = append(edges, surgerytype.EdgeSurgeryappointment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SurgerytypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case surgerytype.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m._Surgeryappointment))
		for id := range m._Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SurgerytypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Surgeryappointment != nil {
		edges = append(edges, surgerytype.EdgeSurgeryappointment)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SurgerytypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case surgerytype.EdgeSurgeryappointment:
		ids := make([]ent.Value, 0, len(m.removed_Surgeryappointment))
		for id := range m.removed_Surgeryappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SurgerytypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Surgeryappointment {
		edges = append(edges, surgerytype.EdgeSurgeryappointment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SurgerytypeMutation) EdgeCleared(name string) bool {
	switch name {
	case surgerytype.EdgeSurgeryappointment:
		return m.cleared_Surgeryappointment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SurgerytypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Surgerytype unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SurgerytypeMutation) ResetEdge(name string) error {
	switch name {
	case surgerytype.EdgeSurgeryappointment:
		m.ResetSurgeryappointment()
		return nil
	}
	return fmt.Errorf("unknown Surgerytype edge %s", name)
}
