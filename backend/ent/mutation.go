// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/remedy"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBonedisease = "Bonedisease"
	TypePatient     = "Patient"
	TypePersonnel   = "Personnel"
	TypeRemedy      = "Remedy"
)

// BonediseaseMutation represents an operation that mutates the Bonedisease nodes in the graph.
type BonediseaseMutation struct {
	config
	op               Op
	typ              string
	id               *int
	addedTime        *time.Time
	advice           *string
	clearedFields    map[string]struct{}
	remedy           *int
	clearedremedy    bool
	patient          *int
	clearedpatient   bool
	personnel        *int
	clearedpersonnel bool
	done             bool
	oldValue         func(context.Context) (*Bonedisease, error)
	predicates       []predicate.Bonedisease
}

var _ ent.Mutation = (*BonediseaseMutation)(nil)

// bonediseaseOption allows management of the mutation configuration using functional options.
type bonediseaseOption func(*BonediseaseMutation)

// newBonediseaseMutation creates new mutation for the Bonedisease entity.
func newBonediseaseMutation(c config, op Op, opts ...bonediseaseOption) *BonediseaseMutation {
	m := &BonediseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeBonedisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBonediseaseID sets the ID field of the mutation.
func withBonediseaseID(id int) bonediseaseOption {
	return func(m *BonediseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Bonedisease
		)
		m.oldValue = func(ctx context.Context) (*Bonedisease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bonedisease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBonedisease sets the old Bonedisease of the mutation.
func withBonedisease(node *Bonedisease) bonediseaseOption {
	return func(m *BonediseaseMutation) {
		m.oldValue = func(context.Context) (*Bonedisease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BonediseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BonediseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *BonediseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the "addedTime" field.
func (m *BonediseaseMutation) SetAddedTime(t time.Time) {
	m.addedTime = &t
}

// AddedTime returns the value of the "addedTime" field in the mutation.
func (m *BonediseaseMutation) AddedTime() (r time.Time, exists bool) {
	v := m.addedTime
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old "addedTime" field's value of the Bonedisease entity.
// If the Bonedisease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonediseaseMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime resets all changes to the "addedTime" field.
func (m *BonediseaseMutation) ResetAddedTime() {
	m.addedTime = nil
}

// SetAdvice sets the "advice" field.
func (m *BonediseaseMutation) SetAdvice(s string) {
	m.advice = &s
}

// Advice returns the value of the "advice" field in the mutation.
func (m *BonediseaseMutation) Advice() (r string, exists bool) {
	v := m.advice
	if v == nil {
		return
	}
	return *v, true
}

// OldAdvice returns the old "advice" field's value of the Bonedisease entity.
// If the Bonedisease object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonediseaseMutation) OldAdvice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdvice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdvice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdvice: %w", err)
	}
	return oldValue.Advice, nil
}

// ResetAdvice resets all changes to the "advice" field.
func (m *BonediseaseMutation) ResetAdvice() {
	m.advice = nil
}

// SetRemedyID sets the "remedy" edge to the Remedy entity by id.
func (m *BonediseaseMutation) SetRemedyID(id int) {
	m.remedy = &id
}

// ClearRemedy clears the "remedy" edge to the Remedy entity.
func (m *BonediseaseMutation) ClearRemedy() {
	m.clearedremedy = true
}

// RemedyCleared returns if the "remedy" edge to the Remedy entity was cleared.
func (m *BonediseaseMutation) RemedyCleared() bool {
	return m.clearedremedy
}

// RemedyID returns the "remedy" edge ID in the mutation.
func (m *BonediseaseMutation) RemedyID() (id int, exists bool) {
	if m.remedy != nil {
		return *m.remedy, true
	}
	return
}

// RemedyIDs returns the "remedy" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RemedyID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) RemedyIDs() (ids []int) {
	if id := m.remedy; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRemedy resets all changes to the "remedy" edge.
func (m *BonediseaseMutation) ResetRemedy() {
	m.remedy = nil
	m.clearedremedy = false
}

// SetPatientID sets the "patient" edge to the Patient entity by id.
func (m *BonediseaseMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (m *BonediseaseMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the "patient" edge to the Patient entity was cleared.
func (m *BonediseaseMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the "patient" edge ID in the mutation.
func (m *BonediseaseMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the "patient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient resets all changes to the "patient" edge.
func (m *BonediseaseMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by id.
func (m *BonediseaseMutation) SetPersonnelID(id int) {
	m.personnel = &id
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (m *BonediseaseMutation) ClearPersonnel() {
	m.clearedpersonnel = true
}

// PersonnelCleared returns if the "personnel" edge to the Personnel entity was cleared.
func (m *BonediseaseMutation) PersonnelCleared() bool {
	return m.clearedpersonnel
}

// PersonnelID returns the "personnel" edge ID in the mutation.
func (m *BonediseaseMutation) PersonnelID() (id int, exists bool) {
	if m.personnel != nil {
		return *m.personnel, true
	}
	return
}

// PersonnelIDs returns the "personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *BonediseaseMutation) PersonnelIDs() (ids []int) {
	if id := m.personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "personnel" edge.
func (m *BonediseaseMutation) ResetPersonnel() {
	m.personnel = nil
	m.clearedpersonnel = false
}

// Op returns the operation name.
func (m *BonediseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bonedisease).
func (m *BonediseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BonediseaseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.addedTime != nil {
		fields = append(fields, bonedisease.FieldAddedTime)
	}
	if m.advice != nil {
		fields = append(fields, bonedisease.FieldAdvice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BonediseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bonedisease.FieldAddedTime:
		return m.AddedTime()
	case bonedisease.FieldAdvice:
		return m.Advice()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BonediseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bonedisease.FieldAddedTime:
		return m.OldAddedTime(ctx)
	case bonedisease.FieldAdvice:
		return m.OldAdvice(ctx)
	}
	return nil, fmt.Errorf("unknown Bonedisease field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonediseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bonedisease.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	case bonedisease.FieldAdvice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdvice(v)
		return nil
	}
	return fmt.Errorf("unknown Bonedisease field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BonediseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BonediseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonediseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bonedisease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BonediseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BonediseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BonediseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bonedisease nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BonediseaseMutation) ResetField(name string) error {
	switch name {
	case bonedisease.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	case bonedisease.FieldAdvice:
		m.ResetAdvice()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BonediseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.remedy != nil {
		edges = append(edges, bonedisease.EdgeRemedy)
	}
	if m.patient != nil {
		edges = append(edges, bonedisease.EdgePatient)
	}
	if m.personnel != nil {
		edges = append(edges, bonedisease.EdgePersonnel)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BonediseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bonedisease.EdgeRemedy:
		if id := m.remedy; id != nil {
			return []ent.Value{*id}
		}
	case bonedisease.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case bonedisease.EdgePersonnel:
		if id := m.personnel; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BonediseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BonediseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BonediseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedremedy {
		edges = append(edges, bonedisease.EdgeRemedy)
	}
	if m.clearedpatient {
		edges = append(edges, bonedisease.EdgePatient)
	}
	if m.clearedpersonnel {
		edges = append(edges, bonedisease.EdgePersonnel)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BonediseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case bonedisease.EdgeRemedy:
		return m.clearedremedy
	case bonedisease.EdgePatient:
		return m.clearedpatient
	case bonedisease.EdgePersonnel:
		return m.clearedpersonnel
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BonediseaseMutation) ClearEdge(name string) error {
	switch name {
	case bonedisease.EdgeRemedy:
		m.ClearRemedy()
		return nil
	case bonedisease.EdgePatient:
		m.ClearPatient()
		return nil
	case bonedisease.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BonediseaseMutation) ResetEdge(name string) error {
	switch name {
	case bonedisease.EdgeRemedy:
		m.ResetRemedy()
		return nil
	case bonedisease.EdgePatient:
		m.ResetPatient()
		return nil
	case bonedisease.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	}
	return fmt.Errorf("unknown Bonedisease edge %s", name)
}

// PatientMutation represents an operation that mutates the Patient nodes in the graph.
type PatientMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	birthday            *string
	gender              *string
	clearedFields       map[string]struct{}
	_Bonedisease        map[int]struct{}
	removed_Bonedisease map[int]struct{}
	cleared_Bonedisease bool
	done                bool
	oldValue            func(context.Context) (*Patient, error)
	predicates          []predicate.Patient
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows management of the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for the Patient entity.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the ID field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetBirthday sets the "birthday" field.
func (m *PatientMutation) SetBirthday(s string) {
	m.birthday = &s
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *PatientMutation) Birthday() (r string, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldBirthday(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *PatientMutation) ResetBirthday() {
	m.birthday = nil
}

// SetGender sets the "gender" field.
func (m *PatientMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PatientMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Patient entity.
// If the Patient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PatientMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *PatientMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *PatientMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *PatientMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *PatientMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *PatientMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *PatientMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *PatientMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.birthday != nil {
		fields = append(fields, patient.FieldBirthday)
	}
	if m.gender != nil {
		fields = append(fields, patient.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldName:
		return m.Name()
	case patient.FieldBirthday:
		return m.Birthday()
	case patient.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldBirthday:
		return m.OldBirthday(ctx)
	case patient.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldBirthday:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case patient.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldBirthday:
		m.ResetBirthday()
		return nil
	case patient.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Bonedisease != nil {
		edges = append(edges, patient.EdgeBonedisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Bonedisease != nil {
		edges = append(edges, patient.EdgeBonedisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Bonedisease {
		edges = append(edges, patient.EdgeBonedisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeBonedisease:
		return m.cleared_Bonedisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PersonnelMutation represents an operation that mutates the Personnel nodes in the graph.
type PersonnelMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	department          *string
	user                *string
	password            *string
	clearedFields       map[string]struct{}
	_Bonedisease        map[int]struct{}
	removed_Bonedisease map[int]struct{}
	cleared_Bonedisease bool
	done                bool
	oldValue            func(context.Context) (*Personnel, error)
	predicates          []predicate.Personnel
}

var _ ent.Mutation = (*PersonnelMutation)(nil)

// personnelOption allows management of the mutation configuration using functional options.
type personnelOption func(*PersonnelMutation)

// newPersonnelMutation creates new mutation for the Personnel entity.
func newPersonnelMutation(c config, op Op, opts ...personnelOption) *PersonnelMutation {
	m := &PersonnelMutation{
		config:        c,
		op:            op,
		typ:           TypePersonnel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonnelID sets the ID field of the mutation.
func withPersonnelID(id int) personnelOption {
	return func(m *PersonnelMutation) {
		var (
			err   error
			once  sync.Once
			value *Personnel
		)
		m.oldValue = func(ctx context.Context) (*Personnel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Personnel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonnel sets the old Personnel of the mutation.
func withPersonnel(node *Personnel) personnelOption {
	return func(m *PersonnelMutation) {
		m.oldValue = func(context.Context) (*Personnel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonnelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonnelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PersonnelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PersonnelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonnelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonnelMutation) ResetName() {
	m.name = nil
}

// SetDepartment sets the "department" field.
func (m *PersonnelMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *PersonnelMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ResetDepartment resets all changes to the "department" field.
func (m *PersonnelMutation) ResetDepartment() {
	m.department = nil
}

// SetUser sets the "user" field.
func (m *PersonnelMutation) SetUser(s string) {
	m.user = &s
}

// User returns the value of the "user" field in the mutation.
func (m *PersonnelMutation) User() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUser returns the old "user" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser: %w", err)
	}
	return oldValue.User, nil
}

// ResetUser resets all changes to the "user" field.
func (m *PersonnelMutation) ResetUser() {
	m.user = nil
}

// SetPassword sets the "password" field.
func (m *PersonnelMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *PersonnelMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *PersonnelMutation) ResetPassword() {
	m.password = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *PersonnelMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *PersonnelMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *PersonnelMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *PersonnelMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *PersonnelMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *PersonnelMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *PersonnelMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// Op returns the operation name.
func (m *PersonnelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Personnel).
func (m *PersonnelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonnelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, personnel.FieldName)
	}
	if m.department != nil {
		fields = append(fields, personnel.FieldDepartment)
	}
	if m.user != nil {
		fields = append(fields, personnel.FieldUser)
	}
	if m.password != nil {
		fields = append(fields, personnel.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonnelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personnel.FieldName:
		return m.Name()
	case personnel.FieldDepartment:
		return m.Department()
	case personnel.FieldUser:
		return m.User()
	case personnel.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonnelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personnel.FieldName:
		return m.OldName(ctx)
	case personnel.FieldDepartment:
		return m.OldDepartment(ctx)
	case personnel.FieldUser:
		return m.OldUser(ctx)
	case personnel.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Personnel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personnel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case personnel.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case personnel.FieldUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser(v)
		return nil
	case personnel.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonnelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonnelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Personnel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonnelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonnelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonnelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Personnel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonnelMutation) ResetField(name string) error {
	switch name {
	case personnel.FieldName:
		m.ResetName()
		return nil
	case personnel.FieldDepartment:
		m.ResetDepartment()
		return nil
	case personnel.FieldUser:
		m.ResetUser()
		return nil
	case personnel.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonnelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Bonedisease != nil {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonnelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonnelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Bonedisease != nil {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonnelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonnelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Bonedisease {
		edges = append(edges, personnel.EdgeBonedisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonnelMutation) EdgeCleared(name string) bool {
	switch name {
	case personnel.EdgeBonedisease:
		return m.cleared_Bonedisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonnelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Personnel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonnelMutation) ResetEdge(name string) error {
	switch name {
	case personnel.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	}
	return fmt.Errorf("unknown Personnel edge %s", name)
}

// RemedyMutation represents an operation that mutates the Remedy nodes in the graph.
type RemedyMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	remedy              *string
	clearedFields       map[string]struct{}
	_Bonedisease        map[int]struct{}
	removed_Bonedisease map[int]struct{}
	cleared_Bonedisease bool
	done                bool
	oldValue            func(context.Context) (*Remedy, error)
	predicates          []predicate.Remedy
}

var _ ent.Mutation = (*RemedyMutation)(nil)

// remedyOption allows management of the mutation configuration using functional options.
type remedyOption func(*RemedyMutation)

// newRemedyMutation creates new mutation for the Remedy entity.
func newRemedyMutation(c config, op Op, opts ...remedyOption) *RemedyMutation {
	m := &RemedyMutation{
		config:        c,
		op:            op,
		typ:           TypeRemedy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRemedyID sets the ID field of the mutation.
func withRemedyID(id int) remedyOption {
	return func(m *RemedyMutation) {
		var (
			err   error
			once  sync.Once
			value *Remedy
		)
		m.oldValue = func(ctx context.Context) (*Remedy, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Remedy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRemedy sets the old Remedy of the mutation.
func withRemedy(node *Remedy) remedyOption {
	return func(m *RemedyMutation) {
		m.oldValue = func(context.Context) (*Remedy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RemedyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RemedyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RemedyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRemedy sets the "remedy" field.
func (m *RemedyMutation) SetRemedy(s string) {
	m.remedy = &s
}

// Remedy returns the value of the "remedy" field in the mutation.
func (m *RemedyMutation) Remedy() (r string, exists bool) {
	v := m.remedy
	if v == nil {
		return
	}
	return *v, true
}

// OldRemedy returns the old "remedy" field's value of the Remedy entity.
// If the Remedy object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RemedyMutation) OldRemedy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemedy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemedy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemedy: %w", err)
	}
	return oldValue.Remedy, nil
}

// ResetRemedy resets all changes to the "remedy" field.
func (m *RemedyMutation) ResetRemedy() {
	m.remedy = nil
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by ids.
func (m *RemedyMutation) AddBonediseaseIDs(ids ...int) {
	if m._Bonedisease == nil {
		m._Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m._Bonedisease[ids[i]] = struct{}{}
	}
}

// ClearBonedisease clears the "Bonedisease" edge to the Bonedisease entity.
func (m *RemedyMutation) ClearBonedisease() {
	m.cleared_Bonedisease = true
}

// BonediseaseCleared returns if the "Bonedisease" edge to the Bonedisease entity was cleared.
func (m *RemedyMutation) BonediseaseCleared() bool {
	return m.cleared_Bonedisease
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to the Bonedisease entity by IDs.
func (m *RemedyMutation) RemoveBonediseaseIDs(ids ...int) {
	if m.removed_Bonedisease == nil {
		m.removed_Bonedisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Bonedisease[ids[i]] = struct{}{}
	}
}

// RemovedBonedisease returns the removed IDs of the "Bonedisease" edge to the Bonedisease entity.
func (m *RemedyMutation) RemovedBonediseaseIDs() (ids []int) {
	for id := range m.removed_Bonedisease {
		ids = append(ids, id)
	}
	return
}

// BonediseaseIDs returns the "Bonedisease" edge IDs in the mutation.
func (m *RemedyMutation) BonediseaseIDs() (ids []int) {
	for id := range m._Bonedisease {
		ids = append(ids, id)
	}
	return
}

// ResetBonedisease resets all changes to the "Bonedisease" edge.
func (m *RemedyMutation) ResetBonedisease() {
	m._Bonedisease = nil
	m.cleared_Bonedisease = false
	m.removed_Bonedisease = nil
}

// Op returns the operation name.
func (m *RemedyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Remedy).
func (m *RemedyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RemedyMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.remedy != nil {
		fields = append(fields, remedy.FieldRemedy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RemedyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case remedy.FieldRemedy:
		return m.Remedy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RemedyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case remedy.FieldRemedy:
		return m.OldRemedy(ctx)
	}
	return nil, fmt.Errorf("unknown Remedy field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemedyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case remedy.FieldRemedy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemedy(v)
		return nil
	}
	return fmt.Errorf("unknown Remedy field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RemedyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RemedyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RemedyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Remedy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RemedyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RemedyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RemedyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Remedy nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RemedyMutation) ResetField(name string) error {
	switch name {
	case remedy.FieldRemedy:
		m.ResetRemedy()
		return nil
	}
	return fmt.Errorf("unknown Remedy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RemedyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Bonedisease != nil {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RemedyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case remedy.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m._Bonedisease))
		for id := range m._Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RemedyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Bonedisease != nil {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RemedyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case remedy.EdgeBonedisease:
		ids := make([]ent.Value, 0, len(m.removed_Bonedisease))
		for id := range m.removed_Bonedisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RemedyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_Bonedisease {
		edges = append(edges, remedy.EdgeBonedisease)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RemedyMutation) EdgeCleared(name string) bool {
	switch name {
	case remedy.EdgeBonedisease:
		return m.cleared_Bonedisease
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RemedyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Remedy unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RemedyMutation) ResetEdge(name string) error {
	switch name {
	case remedy.EdgeBonedisease:
		m.ResetBonedisease()
		return nil
	}
	return fmt.Errorf("unknown Remedy edge %s", name)
}
