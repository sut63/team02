// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/surgeryappointment"
	"github.com/to63/app/ent/surgerytype"
)

// Surgeryappointment is the model entity for the Surgeryappointment schema.
type Surgeryappointment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppointTime holds the value of the "appoint_time" field.
	AppointTime time.Time `json:"appoint_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurgeryappointmentQuery when eager-loading is set.
	Edges                          SurgeryappointmentEdges `json:"edges"`
	_Patient_id                    *int
	_Personnel_id                  *int
	surgerytype_surgeryappointment *int
}

// SurgeryappointmentEdges holds the relations/edges for other nodes in the graph.
type SurgeryappointmentEdges struct {
	// Personnel holds the value of the Personnel edge.
	Personnel *Personnel
	// Patient holds the value of the Patient edge.
	Patient *Patient
	// Surgerytype holds the value of the Surgerytype edge.
	Surgerytype *Surgerytype
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PersonnelOrErr returns the Personnel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurgeryappointmentEdges) PersonnelOrErr() (*Personnel, error) {
	if e.loadedTypes[0] {
		if e.Personnel == nil {
			// The edge Personnel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personnel.Label}
		}
		return e.Personnel, nil
	}
	return nil, &NotLoadedError{edge: "Personnel"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurgeryappointmentEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge Patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "Patient"}
}

// SurgerytypeOrErr returns the Surgerytype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurgeryappointmentEdges) SurgerytypeOrErr() (*Surgerytype, error) {
	if e.loadedTypes[2] {
		if e.Surgerytype == nil {
			// The edge Surgerytype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: surgerytype.Label}
		}
		return e.Surgerytype, nil
	}
	return nil, &NotLoadedError{edge: "Surgerytype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Surgeryappointment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case surgeryappointment.FieldID:
			values[i] = &sql.NullInt64{}
		case surgeryappointment.FieldAppointTime:
			values[i] = &sql.NullTime{}
		case surgeryappointment.ForeignKeys[0]: // _Patient_id
			values[i] = &sql.NullInt64{}
		case surgeryappointment.ForeignKeys[1]: // _Personnel_id
			values[i] = &sql.NullInt64{}
		case surgeryappointment.ForeignKeys[2]: // surgerytype_surgeryappointment
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Surgeryappointment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Surgeryappointment fields.
func (s *Surgeryappointment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surgeryappointment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case surgeryappointment.FieldAppointTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field appoint_time", values[i])
			} else if value.Valid {
				s.AppointTime = value.Time
			}
		case surgeryappointment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Patient_id", value)
			} else if value.Valid {
				s._Patient_id = new(int)
				*s._Patient_id = int(value.Int64)
			}
		case surgeryappointment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Personnel_id", value)
			} else if value.Valid {
				s._Personnel_id = new(int)
				*s._Personnel_id = int(value.Int64)
			}
		case surgeryappointment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field surgerytype_surgeryappointment", value)
			} else if value.Valid {
				s.surgerytype_surgeryappointment = new(int)
				*s.surgerytype_surgeryappointment = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPersonnel queries the "Personnel" edge of the Surgeryappointment entity.
func (s *Surgeryappointment) QueryPersonnel() *PersonnelQuery {
	return (&SurgeryappointmentClient{config: s.config}).QueryPersonnel(s)
}

// QueryPatient queries the "Patient" edge of the Surgeryappointment entity.
func (s *Surgeryappointment) QueryPatient() *PatientQuery {
	return (&SurgeryappointmentClient{config: s.config}).QueryPatient(s)
}

// QuerySurgerytype queries the "Surgerytype" edge of the Surgeryappointment entity.
func (s *Surgeryappointment) QuerySurgerytype() *SurgerytypeQuery {
	return (&SurgeryappointmentClient{config: s.config}).QuerySurgerytype(s)
}

// Update returns a builder for updating this Surgeryappointment.
// Note that you need to call Surgeryappointment.Unwrap() before calling this method if this Surgeryappointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Surgeryappointment) Update() *SurgeryappointmentUpdateOne {
	return (&SurgeryappointmentClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Surgeryappointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Surgeryappointment) Unwrap() *Surgeryappointment {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Surgeryappointment is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Surgeryappointment) String() string {
	var builder strings.Builder
	builder.WriteString("Surgeryappointment(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", appoint_time=")
	builder.WriteString(s.AppointTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Surgeryappointments is a parsable slice of Surgeryappointment.
type Surgeryappointments []*Surgeryappointment

func (s Surgeryappointments) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
