// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/physicaltherapyrecord"
	"github.com/to63/app/ent/physicaltherapyroom"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/status"
)

// PhysicaltherapyrecordUpdate is the builder for updating Physicaltherapyrecord entities.
type PhysicaltherapyrecordUpdate struct {
	config
	hooks    []Hook
	mutation *PhysicaltherapyrecordMutation
}

// Where adds a new predicate for the PhysicaltherapyrecordUpdate builder.
func (pu *PhysicaltherapyrecordUpdate) Where(ps ...predicate.Physicaltherapyrecord) *PhysicaltherapyrecordUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetPrice sets the "price" field.
func (pu *PhysicaltherapyrecordUpdate) SetPrice(i int) *PhysicaltherapyrecordUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *PhysicaltherapyrecordUpdate) AddPrice(i int) *PhysicaltherapyrecordUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetNote sets the "note" field.
func (pu *PhysicaltherapyrecordUpdate) SetNote(s string) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetNote(s)
	return pu
}

// SetAppointtime sets the "appointtime" field.
func (pu *PhysicaltherapyrecordUpdate) SetAppointtime(t time.Time) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetAppointtime(t)
	return pu
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (pu *PhysicaltherapyrecordUpdate) SetPersonnelID(id int) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetPersonnelID(id)
	return pu
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (pu *PhysicaltherapyrecordUpdate) SetNillablePersonnelID(id *int) *PhysicaltherapyrecordUpdate {
	if id != nil {
		pu = pu.SetPersonnelID(*id)
	}
	return pu
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (pu *PhysicaltherapyrecordUpdate) SetPersonnel(p *Personnel) *PhysicaltherapyrecordUpdate {
	return pu.SetPersonnelID(p.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (pu *PhysicaltherapyrecordUpdate) SetPatientID(id int) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetPatientID(id)
	return pu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (pu *PhysicaltherapyrecordUpdate) SetNillablePatientID(id *int) *PhysicaltherapyrecordUpdate {
	if id != nil {
		pu = pu.SetPatientID(*id)
	}
	return pu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (pu *PhysicaltherapyrecordUpdate) SetPatient(p *Patient) *PhysicaltherapyrecordUpdate {
	return pu.SetPatientID(p.ID)
}

// SetPhysicaltherapyroomID sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity by ID.
func (pu *PhysicaltherapyrecordUpdate) SetPhysicaltherapyroomID(id int) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetPhysicaltherapyroomID(id)
	return pu
}

// SetNillablePhysicaltherapyroomID sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity by ID if the given value is not nil.
func (pu *PhysicaltherapyrecordUpdate) SetNillablePhysicaltherapyroomID(id *int) *PhysicaltherapyrecordUpdate {
	if id != nil {
		pu = pu.SetPhysicaltherapyroomID(*id)
	}
	return pu
}

// SetPhysicaltherapyroom sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity.
func (pu *PhysicaltherapyrecordUpdate) SetPhysicaltherapyroom(p *Physicaltherapyroom) *PhysicaltherapyrecordUpdate {
	return pu.SetPhysicaltherapyroomID(p.ID)
}

// SetStatusID sets the "status" edge to the Status entity by ID.
func (pu *PhysicaltherapyrecordUpdate) SetStatusID(id int) *PhysicaltherapyrecordUpdate {
	pu.mutation.SetStatusID(id)
	return pu
}

// SetNillableStatusID sets the "status" edge to the Status entity by ID if the given value is not nil.
func (pu *PhysicaltherapyrecordUpdate) SetNillableStatusID(id *int) *PhysicaltherapyrecordUpdate {
	if id != nil {
		pu = pu.SetStatusID(*id)
	}
	return pu
}

// SetStatus sets the "status" edge to the Status entity.
func (pu *PhysicaltherapyrecordUpdate) SetStatus(s *Status) *PhysicaltherapyrecordUpdate {
	return pu.SetStatusID(s.ID)
}

// Mutation returns the PhysicaltherapyrecordMutation object of the builder.
func (pu *PhysicaltherapyrecordUpdate) Mutation() *PhysicaltherapyrecordMutation {
	return pu.mutation
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (pu *PhysicaltherapyrecordUpdate) ClearPersonnel() *PhysicaltherapyrecordUpdate {
	pu.mutation.ClearPersonnel()
	return pu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (pu *PhysicaltherapyrecordUpdate) ClearPatient() *PhysicaltherapyrecordUpdate {
	pu.mutation.ClearPatient()
	return pu
}

// ClearPhysicaltherapyroom clears the "physicaltherapyroom" edge to the Physicaltherapyroom entity.
func (pu *PhysicaltherapyrecordUpdate) ClearPhysicaltherapyroom() *PhysicaltherapyrecordUpdate {
	pu.mutation.ClearPhysicaltherapyroom()
	return pu
}

// ClearStatus clears the "status" edge to the Status entity.
func (pu *PhysicaltherapyrecordUpdate) ClearStatus() *PhysicaltherapyrecordUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PhysicaltherapyrecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhysicaltherapyrecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PhysicaltherapyrecordUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PhysicaltherapyrecordUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PhysicaltherapyrecordUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PhysicaltherapyrecordUpdate) check() error {
	if v, ok := pu.mutation.Price(); ok {
		if err := physicaltherapyrecord.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Note(); ok {
		if err := physicaltherapyrecord.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (pu *PhysicaltherapyrecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   physicaltherapyrecord.Table,
			Columns: physicaltherapyrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: physicaltherapyrecord.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: physicaltherapyrecord.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: physicaltherapyrecord.FieldPrice,
		})
	}
	if value, ok := pu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: physicaltherapyrecord.FieldNote,
		})
	}
	if value, ok := pu.mutation.Appointtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: physicaltherapyrecord.FieldAppointtime,
		})
	}
	if pu.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PersonnelTable,
			Columns: []string{physicaltherapyrecord.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PersonnelTable,
			Columns: []string{physicaltherapyrecord.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PatientTable,
			Columns: []string{physicaltherapyrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PatientTable,
			Columns: []string{physicaltherapyrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PhysicaltherapyroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PhysicaltherapyroomTable,
			Columns: []string{physicaltherapyrecord.PhysicaltherapyroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhysicaltherapyroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PhysicaltherapyroomTable,
			Columns: []string{physicaltherapyrecord.PhysicaltherapyroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.StatusTable,
			Columns: []string{physicaltherapyrecord.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.StatusTable,
			Columns: []string{physicaltherapyrecord.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicaltherapyrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PhysicaltherapyrecordUpdateOne is the builder for updating a single Physicaltherapyrecord entity.
type PhysicaltherapyrecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *PhysicaltherapyrecordMutation
}

// SetPrice sets the "price" field.
func (puo *PhysicaltherapyrecordUpdateOne) SetPrice(i int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *PhysicaltherapyrecordUpdateOne) AddPrice(i int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetNote sets the "note" field.
func (puo *PhysicaltherapyrecordUpdateOne) SetNote(s string) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetNote(s)
	return puo
}

// SetAppointtime sets the "appointtime" field.
func (puo *PhysicaltherapyrecordUpdateOne) SetAppointtime(t time.Time) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetAppointtime(t)
	return puo
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (puo *PhysicaltherapyrecordUpdateOne) SetPersonnelID(id int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetPersonnelID(id)
	return puo
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (puo *PhysicaltherapyrecordUpdateOne) SetNillablePersonnelID(id *int) *PhysicaltherapyrecordUpdateOne {
	if id != nil {
		puo = puo.SetPersonnelID(*id)
	}
	return puo
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (puo *PhysicaltherapyrecordUpdateOne) SetPersonnel(p *Personnel) *PhysicaltherapyrecordUpdateOne {
	return puo.SetPersonnelID(p.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (puo *PhysicaltherapyrecordUpdateOne) SetPatientID(id int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetPatientID(id)
	return puo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (puo *PhysicaltherapyrecordUpdateOne) SetNillablePatientID(id *int) *PhysicaltherapyrecordUpdateOne {
	if id != nil {
		puo = puo.SetPatientID(*id)
	}
	return puo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (puo *PhysicaltherapyrecordUpdateOne) SetPatient(p *Patient) *PhysicaltherapyrecordUpdateOne {
	return puo.SetPatientID(p.ID)
}

// SetPhysicaltherapyroomID sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity by ID.
func (puo *PhysicaltherapyrecordUpdateOne) SetPhysicaltherapyroomID(id int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetPhysicaltherapyroomID(id)
	return puo
}

// SetNillablePhysicaltherapyroomID sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity by ID if the given value is not nil.
func (puo *PhysicaltherapyrecordUpdateOne) SetNillablePhysicaltherapyroomID(id *int) *PhysicaltherapyrecordUpdateOne {
	if id != nil {
		puo = puo.SetPhysicaltherapyroomID(*id)
	}
	return puo
}

// SetPhysicaltherapyroom sets the "physicaltherapyroom" edge to the Physicaltherapyroom entity.
func (puo *PhysicaltherapyrecordUpdateOne) SetPhysicaltherapyroom(p *Physicaltherapyroom) *PhysicaltherapyrecordUpdateOne {
	return puo.SetPhysicaltherapyroomID(p.ID)
}

// SetStatusID sets the "status" edge to the Status entity by ID.
func (puo *PhysicaltherapyrecordUpdateOne) SetStatusID(id int) *PhysicaltherapyrecordUpdateOne {
	puo.mutation.SetStatusID(id)
	return puo
}

// SetNillableStatusID sets the "status" edge to the Status entity by ID if the given value is not nil.
func (puo *PhysicaltherapyrecordUpdateOne) SetNillableStatusID(id *int) *PhysicaltherapyrecordUpdateOne {
	if id != nil {
		puo = puo.SetStatusID(*id)
	}
	return puo
}

// SetStatus sets the "status" edge to the Status entity.
func (puo *PhysicaltherapyrecordUpdateOne) SetStatus(s *Status) *PhysicaltherapyrecordUpdateOne {
	return puo.SetStatusID(s.ID)
}

// Mutation returns the PhysicaltherapyrecordMutation object of the builder.
func (puo *PhysicaltherapyrecordUpdateOne) Mutation() *PhysicaltherapyrecordMutation {
	return puo.mutation
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (puo *PhysicaltherapyrecordUpdateOne) ClearPersonnel() *PhysicaltherapyrecordUpdateOne {
	puo.mutation.ClearPersonnel()
	return puo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (puo *PhysicaltherapyrecordUpdateOne) ClearPatient() *PhysicaltherapyrecordUpdateOne {
	puo.mutation.ClearPatient()
	return puo
}

// ClearPhysicaltherapyroom clears the "physicaltherapyroom" edge to the Physicaltherapyroom entity.
func (puo *PhysicaltherapyrecordUpdateOne) ClearPhysicaltherapyroom() *PhysicaltherapyrecordUpdateOne {
	puo.mutation.ClearPhysicaltherapyroom()
	return puo
}

// ClearStatus clears the "status" edge to the Status entity.
func (puo *PhysicaltherapyrecordUpdateOne) ClearStatus() *PhysicaltherapyrecordUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// Save executes the query and returns the updated Physicaltherapyrecord entity.
func (puo *PhysicaltherapyrecordUpdateOne) Save(ctx context.Context) (*Physicaltherapyrecord, error) {
	var (
		err  error
		node *Physicaltherapyrecord
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhysicaltherapyrecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PhysicaltherapyrecordUpdateOne) SaveX(ctx context.Context) *Physicaltherapyrecord {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PhysicaltherapyrecordUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PhysicaltherapyrecordUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PhysicaltherapyrecordUpdateOne) check() error {
	if v, ok := puo.mutation.Price(); ok {
		if err := physicaltherapyrecord.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Note(); ok {
		if err := physicaltherapyrecord.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (puo *PhysicaltherapyrecordUpdateOne) sqlSave(ctx context.Context) (_node *Physicaltherapyrecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   physicaltherapyrecord.Table,
			Columns: physicaltherapyrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: physicaltherapyrecord.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Physicaltherapyrecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: physicaltherapyrecord.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: physicaltherapyrecord.FieldPrice,
		})
	}
	if value, ok := puo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: physicaltherapyrecord.FieldNote,
		})
	}
	if value, ok := puo.mutation.Appointtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: physicaltherapyrecord.FieldAppointtime,
		})
	}
	if puo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PersonnelTable,
			Columns: []string{physicaltherapyrecord.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PersonnelTable,
			Columns: []string{physicaltherapyrecord.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PatientTable,
			Columns: []string{physicaltherapyrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PatientTable,
			Columns: []string{physicaltherapyrecord.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PhysicaltherapyroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PhysicaltherapyroomTable,
			Columns: []string{physicaltherapyrecord.PhysicaltherapyroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhysicaltherapyroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.PhysicaltherapyroomTable,
			Columns: []string{physicaltherapyrecord.PhysicaltherapyroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.StatusTable,
			Columns: []string{physicaltherapyrecord.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaltherapyrecord.StatusTable,
			Columns: []string{physicaltherapyrecord.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Physicaltherapyrecord{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicaltherapyrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
