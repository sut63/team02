// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/disease"
)

// Disease is the model entity for the Disease schema.
type Disease struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Disease holds the value of the "disease" field.
	Disease string `json:"disease,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiseaseQuery when eager-loading is set.
	Edges DiseaseEdges `json:"edges"`
}

// DiseaseEdges holds the relations/edges for other nodes in the graph.
type DiseaseEdges struct {
	// Checksymptom holds the value of the Checksymptom edge.
	Checksymptom []*Checksymptom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChecksymptomOrErr returns the Checksymptom value or an error if the edge
// was not loaded in eager-loading.
func (e DiseaseEdges) ChecksymptomOrErr() ([]*Checksymptom, error) {
	if e.loadedTypes[0] {
		return e.Checksymptom, nil
	}
	return nil, &NotLoadedError{edge: "Checksymptom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disease) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case disease.FieldID:
			values[i] = &sql.NullInt64{}
		case disease.FieldDisease:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Disease", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disease fields.
func (d *Disease) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case disease.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case disease.FieldDisease:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disease", values[i])
			} else if value.Valid {
				d.Disease = value.String
			}
		}
	}
	return nil
}

// QueryChecksymptom queries the "Checksymptom" edge of the Disease entity.
func (d *Disease) QueryChecksymptom() *ChecksymptomQuery {
	return (&DiseaseClient{config: d.config}).QueryChecksymptom(d)
}

// Update returns a builder for updating this Disease.
// Note that you need to call Disease.Unwrap() before calling this method if this Disease
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disease) Update() *DiseaseUpdateOne {
	return (&DiseaseClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Disease entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Disease) Unwrap() *Disease {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disease is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disease) String() string {
	var builder strings.Builder
	builder.WriteString("Disease(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", disease=")
	builder.WriteString(d.Disease)
	builder.WriteByte(')')
	return builder.String()
}

// Diseases is a parsable slice of Disease.
type Diseases []*Disease

func (d Diseases) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
