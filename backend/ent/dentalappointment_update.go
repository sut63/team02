// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/dentalkind"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
)

// DentalappointmentUpdate is the builder for updating Dentalappointment entities.
type DentalappointmentUpdate struct {
	config
	hooks    []Hook
	mutation *DentalappointmentMutation
}

// Where adds a new predicate for the DentalappointmentUpdate builder.
func (du *DentalappointmentUpdate) Where(ps ...predicate.Dentalappointment) *DentalappointmentUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetAppointtime sets the "appointtime" field.
func (du *DentalappointmentUpdate) SetAppointtime(t time.Time) *DentalappointmentUpdate {
	du.mutation.SetAppointtime(t)
	return du
}

// SetAmount sets the "amount" field.
func (du *DentalappointmentUpdate) SetAmount(i int) *DentalappointmentUpdate {
	du.mutation.ResetAmount()
	du.mutation.SetAmount(i)
	return du
}

// AddAmount adds i to the "amount" field.
func (du *DentalappointmentUpdate) AddAmount(i int) *DentalappointmentUpdate {
	du.mutation.AddAmount(i)
	return du
}

// SetPrice sets the "price" field.
func (du *DentalappointmentUpdate) SetPrice(i int) *DentalappointmentUpdate {
	du.mutation.ResetPrice()
	du.mutation.SetPrice(i)
	return du
}

// AddPrice adds i to the "price" field.
func (du *DentalappointmentUpdate) AddPrice(i int) *DentalappointmentUpdate {
	du.mutation.AddPrice(i)
	return du
}

// SetNote sets the "note" field.
func (du *DentalappointmentUpdate) SetNote(s string) *DentalappointmentUpdate {
	du.mutation.SetNote(s)
	return du
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by ID.
func (du *DentalappointmentUpdate) SetPersonnelID(id int) *DentalappointmentUpdate {
	du.mutation.SetPersonnelID(id)
	return du
}

// SetNillablePersonnelID sets the "Personnel" edge to the Personnel entity by ID if the given value is not nil.
func (du *DentalappointmentUpdate) SetNillablePersonnelID(id *int) *DentalappointmentUpdate {
	if id != nil {
		du = du.SetPersonnelID(*id)
	}
	return du
}

// SetPersonnel sets the "Personnel" edge to the Personnel entity.
func (du *DentalappointmentUpdate) SetPersonnel(p *Personnel) *DentalappointmentUpdate {
	return du.SetPersonnelID(p.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (du *DentalappointmentUpdate) SetPatientID(id int) *DentalappointmentUpdate {
	du.mutation.SetPatientID(id)
	return du
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (du *DentalappointmentUpdate) SetNillablePatientID(id *int) *DentalappointmentUpdate {
	if id != nil {
		du = du.SetPatientID(*id)
	}
	return du
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (du *DentalappointmentUpdate) SetPatient(p *Patient) *DentalappointmentUpdate {
	return du.SetPatientID(p.ID)
}

// SetDentalkindID sets the "Dentalkind" edge to the Dentalkind entity by ID.
func (du *DentalappointmentUpdate) SetDentalkindID(id int) *DentalappointmentUpdate {
	du.mutation.SetDentalkindID(id)
	return du
}

// SetNillableDentalkindID sets the "Dentalkind" edge to the Dentalkind entity by ID if the given value is not nil.
func (du *DentalappointmentUpdate) SetNillableDentalkindID(id *int) *DentalappointmentUpdate {
	if id != nil {
		du = du.SetDentalkindID(*id)
	}
	return du
}

// SetDentalkind sets the "Dentalkind" edge to the Dentalkind entity.
func (du *DentalappointmentUpdate) SetDentalkind(d *Dentalkind) *DentalappointmentUpdate {
	return du.SetDentalkindID(d.ID)
}

// Mutation returns the DentalappointmentMutation object of the builder.
func (du *DentalappointmentUpdate) Mutation() *DentalappointmentMutation {
	return du.mutation
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (du *DentalappointmentUpdate) ClearPersonnel() *DentalappointmentUpdate {
	du.mutation.ClearPersonnel()
	return du
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (du *DentalappointmentUpdate) ClearPatient() *DentalappointmentUpdate {
	du.mutation.ClearPatient()
	return du
}

// ClearDentalkind clears the "Dentalkind" edge to the Dentalkind entity.
func (du *DentalappointmentUpdate) ClearDentalkind() *DentalappointmentUpdate {
	du.mutation.ClearDentalkind()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DentalappointmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentalappointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DentalappointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DentalappointmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DentalappointmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DentalappointmentUpdate) check() error {
	if v, ok := du.mutation.Amount(); ok {
		if err := dentalappointment.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	if v, ok := du.mutation.Price(); ok {
		if err := dentalappointment.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := du.mutation.Note(); ok {
		if err := dentalappointment.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (du *DentalappointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentalappointment.Table,
			Columns: dentalappointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalappointment.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Appointtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentalappointment.FieldAppointtime,
		})
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldAmount,
		})
	}
	if value, ok := du.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldAmount,
		})
	}
	if value, ok := du.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldPrice,
		})
	}
	if value, ok := du.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldPrice,
		})
	}
	if value, ok := du.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentalappointment.FieldNote,
		})
	}
	if du.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PersonnelTable,
			Columns: []string{dentalappointment.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PersonnelTable,
			Columns: []string{dentalappointment.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PatientTable,
			Columns: []string{dentalappointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PatientTable,
			Columns: []string{dentalappointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DentalkindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.DentalkindTable,
			Columns: []string{dentalappointment.DentalkindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalkind.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DentalkindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.DentalkindTable,
			Columns: []string{dentalappointment.DentalkindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalkind.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentalappointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DentalappointmentUpdateOne is the builder for updating a single Dentalappointment entity.
type DentalappointmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *DentalappointmentMutation
}

// SetAppointtime sets the "appointtime" field.
func (duo *DentalappointmentUpdateOne) SetAppointtime(t time.Time) *DentalappointmentUpdateOne {
	duo.mutation.SetAppointtime(t)
	return duo
}

// SetAmount sets the "amount" field.
func (duo *DentalappointmentUpdateOne) SetAmount(i int) *DentalappointmentUpdateOne {
	duo.mutation.ResetAmount()
	duo.mutation.SetAmount(i)
	return duo
}

// AddAmount adds i to the "amount" field.
func (duo *DentalappointmentUpdateOne) AddAmount(i int) *DentalappointmentUpdateOne {
	duo.mutation.AddAmount(i)
	return duo
}

// SetPrice sets the "price" field.
func (duo *DentalappointmentUpdateOne) SetPrice(i int) *DentalappointmentUpdateOne {
	duo.mutation.ResetPrice()
	duo.mutation.SetPrice(i)
	return duo
}

// AddPrice adds i to the "price" field.
func (duo *DentalappointmentUpdateOne) AddPrice(i int) *DentalappointmentUpdateOne {
	duo.mutation.AddPrice(i)
	return duo
}

// SetNote sets the "note" field.
func (duo *DentalappointmentUpdateOne) SetNote(s string) *DentalappointmentUpdateOne {
	duo.mutation.SetNote(s)
	return duo
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by ID.
func (duo *DentalappointmentUpdateOne) SetPersonnelID(id int) *DentalappointmentUpdateOne {
	duo.mutation.SetPersonnelID(id)
	return duo
}

// SetNillablePersonnelID sets the "Personnel" edge to the Personnel entity by ID if the given value is not nil.
func (duo *DentalappointmentUpdateOne) SetNillablePersonnelID(id *int) *DentalappointmentUpdateOne {
	if id != nil {
		duo = duo.SetPersonnelID(*id)
	}
	return duo
}

// SetPersonnel sets the "Personnel" edge to the Personnel entity.
func (duo *DentalappointmentUpdateOne) SetPersonnel(p *Personnel) *DentalappointmentUpdateOne {
	return duo.SetPersonnelID(p.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (duo *DentalappointmentUpdateOne) SetPatientID(id int) *DentalappointmentUpdateOne {
	duo.mutation.SetPatientID(id)
	return duo
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (duo *DentalappointmentUpdateOne) SetNillablePatientID(id *int) *DentalappointmentUpdateOne {
	if id != nil {
		duo = duo.SetPatientID(*id)
	}
	return duo
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (duo *DentalappointmentUpdateOne) SetPatient(p *Patient) *DentalappointmentUpdateOne {
	return duo.SetPatientID(p.ID)
}

// SetDentalkindID sets the "Dentalkind" edge to the Dentalkind entity by ID.
func (duo *DentalappointmentUpdateOne) SetDentalkindID(id int) *DentalappointmentUpdateOne {
	duo.mutation.SetDentalkindID(id)
	return duo
}

// SetNillableDentalkindID sets the "Dentalkind" edge to the Dentalkind entity by ID if the given value is not nil.
func (duo *DentalappointmentUpdateOne) SetNillableDentalkindID(id *int) *DentalappointmentUpdateOne {
	if id != nil {
		duo = duo.SetDentalkindID(*id)
	}
	return duo
}

// SetDentalkind sets the "Dentalkind" edge to the Dentalkind entity.
func (duo *DentalappointmentUpdateOne) SetDentalkind(d *Dentalkind) *DentalappointmentUpdateOne {
	return duo.SetDentalkindID(d.ID)
}

// Mutation returns the DentalappointmentMutation object of the builder.
func (duo *DentalappointmentUpdateOne) Mutation() *DentalappointmentMutation {
	return duo.mutation
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (duo *DentalappointmentUpdateOne) ClearPersonnel() *DentalappointmentUpdateOne {
	duo.mutation.ClearPersonnel()
	return duo
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (duo *DentalappointmentUpdateOne) ClearPatient() *DentalappointmentUpdateOne {
	duo.mutation.ClearPatient()
	return duo
}

// ClearDentalkind clears the "Dentalkind" edge to the Dentalkind entity.
func (duo *DentalappointmentUpdateOne) ClearDentalkind() *DentalappointmentUpdateOne {
	duo.mutation.ClearDentalkind()
	return duo
}

// Save executes the query and returns the updated Dentalappointment entity.
func (duo *DentalappointmentUpdateOne) Save(ctx context.Context) (*Dentalappointment, error) {
	var (
		err  error
		node *Dentalappointment
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentalappointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DentalappointmentUpdateOne) SaveX(ctx context.Context) *Dentalappointment {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DentalappointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DentalappointmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DentalappointmentUpdateOne) check() error {
	if v, ok := duo.mutation.Amount(); ok {
		if err := dentalappointment.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Price(); ok {
		if err := dentalappointment.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Note(); ok {
		if err := dentalappointment.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (duo *DentalappointmentUpdateOne) sqlSave(ctx context.Context) (_node *Dentalappointment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentalappointment.Table,
			Columns: dentalappointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalappointment.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Dentalappointment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Appointtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentalappointment.FieldAppointtime,
		})
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldAmount,
		})
	}
	if value, ok := duo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldAmount,
		})
	}
	if value, ok := duo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldPrice,
		})
	}
	if value, ok := duo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentalappointment.FieldPrice,
		})
	}
	if value, ok := duo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentalappointment.FieldNote,
		})
	}
	if duo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PersonnelTable,
			Columns: []string{dentalappointment.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PersonnelTable,
			Columns: []string{dentalappointment.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PatientTable,
			Columns: []string{dentalappointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.PatientTable,
			Columns: []string{dentalappointment.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DentalkindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.DentalkindTable,
			Columns: []string{dentalappointment.DentalkindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalkind.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DentalkindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalappointment.DentalkindTable,
			Columns: []string{dentalappointment.DentalkindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalkind.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dentalappointment{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentalappointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
