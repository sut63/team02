// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/checksymptoms"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/predicate"
)

// DoctorOrderSheetUpdate is the builder for updating DoctorOrderSheet entities.
type DoctorOrderSheetUpdate struct {
	config
	hooks    []Hook
	mutation *DoctorOrderSheetMutation
}

// Where adds a new predicate for the DoctorOrderSheetUpdate builder.
func (dosu *DoctorOrderSheetUpdate) Where(ps ...predicate.DoctorOrderSheet) *DoctorOrderSheetUpdate {
	dosu.mutation.predicates = append(dosu.mutation.predicates, ps...)
	return dosu
}

// SetName sets the "Name" field.
func (dosu *DoctorOrderSheetUpdate) SetName(s string) *DoctorOrderSheetUpdate {
	dosu.mutation.SetName(s)
	return dosu
}

// SetTime sets the "time" field.
func (dosu *DoctorOrderSheetUpdate) SetTime(s string) *DoctorOrderSheetUpdate {
	dosu.mutation.SetTime(s)
	return dosu
}

// SetNote sets the "note" field.
func (dosu *DoctorOrderSheetUpdate) SetNote(s string) *DoctorOrderSheetUpdate {
	dosu.mutation.SetNote(s)
	return dosu
}

// AddChecksymptomIDs adds the "Checksymptoms" edge to the Checksymptoms entity by IDs.
func (dosu *DoctorOrderSheetUpdate) AddChecksymptomIDs(ids ...int) *DoctorOrderSheetUpdate {
	dosu.mutation.AddChecksymptomIDs(ids...)
	return dosu
}

// AddChecksymptoms adds the "Checksymptoms" edges to the Checksymptoms entity.
func (dosu *DoctorOrderSheetUpdate) AddChecksymptoms(c ...*Checksymptoms) *DoctorOrderSheetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dosu.AddChecksymptomIDs(ids...)
}

// Mutation returns the DoctorOrderSheetMutation object of the builder.
func (dosu *DoctorOrderSheetUpdate) Mutation() *DoctorOrderSheetMutation {
	return dosu.mutation
}

// ClearChecksymptoms clears all "Checksymptoms" edges to the Checksymptoms entity.
func (dosu *DoctorOrderSheetUpdate) ClearChecksymptoms() *DoctorOrderSheetUpdate {
	dosu.mutation.ClearChecksymptoms()
	return dosu
}

// RemoveChecksymptomIDs removes the "Checksymptoms" edge to Checksymptoms entities by IDs.
func (dosu *DoctorOrderSheetUpdate) RemoveChecksymptomIDs(ids ...int) *DoctorOrderSheetUpdate {
	dosu.mutation.RemoveChecksymptomIDs(ids...)
	return dosu
}

// RemoveChecksymptoms removes "Checksymptoms" edges to Checksymptoms entities.
func (dosu *DoctorOrderSheetUpdate) RemoveChecksymptoms(c ...*Checksymptoms) *DoctorOrderSheetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dosu.RemoveChecksymptomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dosu *DoctorOrderSheetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dosu.hooks) == 0 {
		if err = dosu.check(); err != nil {
			return 0, err
		}
		affected, err = dosu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorOrderSheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dosu.check(); err != nil {
				return 0, err
			}
			dosu.mutation = mutation
			affected, err = dosu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dosu.hooks) - 1; i >= 0; i-- {
			mut = dosu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dosu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dosu *DoctorOrderSheetUpdate) SaveX(ctx context.Context) int {
	affected, err := dosu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dosu *DoctorOrderSheetUpdate) Exec(ctx context.Context) error {
	_, err := dosu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dosu *DoctorOrderSheetUpdate) ExecX(ctx context.Context) {
	if err := dosu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dosu *DoctorOrderSheetUpdate) check() error {
	if v, ok := dosu.mutation.Name(); ok {
		if err := doctorordersheet.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := dosu.mutation.Time(); ok {
		if err := doctorordersheet.TimeValidator(v); err != nil {
			return &ValidationError{Name: "time", err: fmt.Errorf("ent: validator failed for field \"time\": %w", err)}
		}
	}
	if v, ok := dosu.mutation.Note(); ok {
		if err := doctorordersheet.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (dosu *DoctorOrderSheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorordersheet.Table,
			Columns: doctorordersheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorordersheet.FieldID,
			},
		},
	}
	if ps := dosu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dosu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldName,
		})
	}
	if value, ok := dosu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldTime,
		})
	}
	if value, ok := dosu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldNote,
		})
	}
	if dosu.mutation.ChecksymptomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dosu.mutation.RemovedChecksymptomsIDs(); len(nodes) > 0 && !dosu.mutation.ChecksymptomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dosu.mutation.ChecksymptomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dosu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorordersheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoctorOrderSheetUpdateOne is the builder for updating a single DoctorOrderSheet entity.
type DoctorOrderSheetUpdateOne struct {
	config
	hooks    []Hook
	mutation *DoctorOrderSheetMutation
}

// SetName sets the "Name" field.
func (dosuo *DoctorOrderSheetUpdateOne) SetName(s string) *DoctorOrderSheetUpdateOne {
	dosuo.mutation.SetName(s)
	return dosuo
}

// SetTime sets the "time" field.
func (dosuo *DoctorOrderSheetUpdateOne) SetTime(s string) *DoctorOrderSheetUpdateOne {
	dosuo.mutation.SetTime(s)
	return dosuo
}

// SetNote sets the "note" field.
func (dosuo *DoctorOrderSheetUpdateOne) SetNote(s string) *DoctorOrderSheetUpdateOne {
	dosuo.mutation.SetNote(s)
	return dosuo
}

// AddChecksymptomIDs adds the "Checksymptoms" edge to the Checksymptoms entity by IDs.
func (dosuo *DoctorOrderSheetUpdateOne) AddChecksymptomIDs(ids ...int) *DoctorOrderSheetUpdateOne {
	dosuo.mutation.AddChecksymptomIDs(ids...)
	return dosuo
}

// AddChecksymptoms adds the "Checksymptoms" edges to the Checksymptoms entity.
func (dosuo *DoctorOrderSheetUpdateOne) AddChecksymptoms(c ...*Checksymptoms) *DoctorOrderSheetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dosuo.AddChecksymptomIDs(ids...)
}

// Mutation returns the DoctorOrderSheetMutation object of the builder.
func (dosuo *DoctorOrderSheetUpdateOne) Mutation() *DoctorOrderSheetMutation {
	return dosuo.mutation
}

// ClearChecksymptoms clears all "Checksymptoms" edges to the Checksymptoms entity.
func (dosuo *DoctorOrderSheetUpdateOne) ClearChecksymptoms() *DoctorOrderSheetUpdateOne {
	dosuo.mutation.ClearChecksymptoms()
	return dosuo
}

// RemoveChecksymptomIDs removes the "Checksymptoms" edge to Checksymptoms entities by IDs.
func (dosuo *DoctorOrderSheetUpdateOne) RemoveChecksymptomIDs(ids ...int) *DoctorOrderSheetUpdateOne {
	dosuo.mutation.RemoveChecksymptomIDs(ids...)
	return dosuo
}

// RemoveChecksymptoms removes "Checksymptoms" edges to Checksymptoms entities.
func (dosuo *DoctorOrderSheetUpdateOne) RemoveChecksymptoms(c ...*Checksymptoms) *DoctorOrderSheetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dosuo.RemoveChecksymptomIDs(ids...)
}

// Save executes the query and returns the updated DoctorOrderSheet entity.
func (dosuo *DoctorOrderSheetUpdateOne) Save(ctx context.Context) (*DoctorOrderSheet, error) {
	var (
		err  error
		node *DoctorOrderSheet
	)
	if len(dosuo.hooks) == 0 {
		if err = dosuo.check(); err != nil {
			return nil, err
		}
		node, err = dosuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorOrderSheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dosuo.check(); err != nil {
				return nil, err
			}
			dosuo.mutation = mutation
			node, err = dosuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dosuo.hooks) - 1; i >= 0; i-- {
			mut = dosuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dosuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dosuo *DoctorOrderSheetUpdateOne) SaveX(ctx context.Context) *DoctorOrderSheet {
	node, err := dosuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dosuo *DoctorOrderSheetUpdateOne) Exec(ctx context.Context) error {
	_, err := dosuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dosuo *DoctorOrderSheetUpdateOne) ExecX(ctx context.Context) {
	if err := dosuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dosuo *DoctorOrderSheetUpdateOne) check() error {
	if v, ok := dosuo.mutation.Name(); ok {
		if err := doctorordersheet.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	if v, ok := dosuo.mutation.Time(); ok {
		if err := doctorordersheet.TimeValidator(v); err != nil {
			return &ValidationError{Name: "time", err: fmt.Errorf("ent: validator failed for field \"time\": %w", err)}
		}
	}
	if v, ok := dosuo.mutation.Note(); ok {
		if err := doctorordersheet.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (dosuo *DoctorOrderSheetUpdateOne) sqlSave(ctx context.Context) (_node *DoctorOrderSheet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorordersheet.Table,
			Columns: doctorordersheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorordersheet.FieldID,
			},
		},
	}
	id, ok := dosuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DoctorOrderSheet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := dosuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldName,
		})
	}
	if value, ok := dosuo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldTime,
		})
	}
	if value, ok := dosuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldNote,
		})
	}
	if dosuo.mutation.ChecksymptomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dosuo.mutation.RemovedChecksymptomsIDs(); len(nodes) > 0 && !dosuo.mutation.ChecksymptomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dosuo.mutation.ChecksymptomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomsTable,
			Columns: []string{doctorordersheet.ChecksymptomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptoms.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DoctorOrderSheet{config: dosuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dosuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorordersheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
