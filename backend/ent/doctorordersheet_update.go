// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/checksymptom"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/predicate"
)

// DoctorordersheetUpdate is the builder for updating Doctorordersheet entities.
type DoctorordersheetUpdate struct {
	config
	hooks    []Hook
	mutation *DoctorordersheetMutation
}

// Where adds a new predicate for the DoctorordersheetUpdate builder.
func (du *DoctorordersheetUpdate) Where(ps ...predicate.Doctorordersheet) *DoctorordersheetUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetName sets the "Name" field.
func (du *DoctorordersheetUpdate) SetName(s string) *DoctorordersheetUpdate {
	du.mutation.SetName(s)
	return du
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by IDs.
func (du *DoctorordersheetUpdate) AddChecksymptomIDs(ids ...int) *DoctorordersheetUpdate {
	du.mutation.AddChecksymptomIDs(ids...)
	return du
}

// AddChecksymptom adds the "Checksymptom" edges to the Checksymptom entity.
func (du *DoctorordersheetUpdate) AddChecksymptom(c ...*Checksymptom) *DoctorordersheetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddChecksymptomIDs(ids...)
}

// Mutation returns the DoctorordersheetMutation object of the builder.
func (du *DoctorordersheetUpdate) Mutation() *DoctorordersheetMutation {
	return du.mutation
}

// ClearChecksymptom clears all "Checksymptom" edges to the Checksymptom entity.
func (du *DoctorordersheetUpdate) ClearChecksymptom() *DoctorordersheetUpdate {
	du.mutation.ClearChecksymptom()
	return du
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to Checksymptom entities by IDs.
func (du *DoctorordersheetUpdate) RemoveChecksymptomIDs(ids ...int) *DoctorordersheetUpdate {
	du.mutation.RemoveChecksymptomIDs(ids...)
	return du
}

// RemoveChecksymptom removes "Checksymptom" edges to Checksymptom entities.
func (du *DoctorordersheetUpdate) RemoveChecksymptom(c ...*Checksymptom) *DoctorordersheetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveChecksymptomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DoctorordersheetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorordersheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoctorordersheetUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoctorordersheetUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoctorordersheetUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DoctorordersheetUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := doctorordersheet.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	return nil
}

func (du *DoctorordersheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorordersheet.Table,
			Columns: doctorordersheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorordersheet.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldName,
		})
	}
	if du.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChecksymptomIDs(); len(nodes) > 0 && !du.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChecksymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorordersheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoctorordersheetUpdateOne is the builder for updating a single Doctorordersheet entity.
type DoctorordersheetUpdateOne struct {
	config
	hooks    []Hook
	mutation *DoctorordersheetMutation
}

// SetName sets the "Name" field.
func (duo *DoctorordersheetUpdateOne) SetName(s string) *DoctorordersheetUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by IDs.
func (duo *DoctorordersheetUpdateOne) AddChecksymptomIDs(ids ...int) *DoctorordersheetUpdateOne {
	duo.mutation.AddChecksymptomIDs(ids...)
	return duo
}

// AddChecksymptom adds the "Checksymptom" edges to the Checksymptom entity.
func (duo *DoctorordersheetUpdateOne) AddChecksymptom(c ...*Checksymptom) *DoctorordersheetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddChecksymptomIDs(ids...)
}

// Mutation returns the DoctorordersheetMutation object of the builder.
func (duo *DoctorordersheetUpdateOne) Mutation() *DoctorordersheetMutation {
	return duo.mutation
}

// ClearChecksymptom clears all "Checksymptom" edges to the Checksymptom entity.
func (duo *DoctorordersheetUpdateOne) ClearChecksymptom() *DoctorordersheetUpdateOne {
	duo.mutation.ClearChecksymptom()
	return duo
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to Checksymptom entities by IDs.
func (duo *DoctorordersheetUpdateOne) RemoveChecksymptomIDs(ids ...int) *DoctorordersheetUpdateOne {
	duo.mutation.RemoveChecksymptomIDs(ids...)
	return duo
}

// RemoveChecksymptom removes "Checksymptom" edges to Checksymptom entities.
func (duo *DoctorordersheetUpdateOne) RemoveChecksymptom(c ...*Checksymptom) *DoctorordersheetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveChecksymptomIDs(ids...)
}

// Save executes the query and returns the updated Doctorordersheet entity.
func (duo *DoctorordersheetUpdateOne) Save(ctx context.Context) (*Doctorordersheet, error) {
	var (
		err  error
		node *Doctorordersheet
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DoctorordersheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoctorordersheetUpdateOne) SaveX(ctx context.Context) *Doctorordersheet {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DoctorordersheetUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoctorordersheetUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DoctorordersheetUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := doctorordersheet.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf("ent: validator failed for field \"Name\": %w", err)}
		}
	}
	return nil
}

func (duo *DoctorordersheetUpdateOne) sqlSave(ctx context.Context) (_node *Doctorordersheet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctorordersheet.Table,
			Columns: doctorordersheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: doctorordersheet.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Doctorordersheet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doctorordersheet.FieldName,
		})
	}
	if duo.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChecksymptomIDs(); len(nodes) > 0 && !duo.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChecksymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctorordersheet.ChecksymptomTable,
			Columns: []string{doctorordersheet.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Doctorordersheet{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctorordersheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
