// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/checksymptom"
	"github.com/to63/app/ent/disease"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
)

// ChecksymptomUpdate is the builder for updating Checksymptom entities.
type ChecksymptomUpdate struct {
	config
	hooks    []Hook
	mutation *ChecksymptomMutation
}

// Where adds a new predicate for the ChecksymptomUpdate builder.
func (cu *ChecksymptomUpdate) Where(ps ...predicate.Checksymptom) *ChecksymptomUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetDate sets the "date" field.
func (cu *ChecksymptomUpdate) SetDate(t time.Time) *ChecksymptomUpdate {
	cu.mutation.SetDate(t)
	return cu
}

// SetNote sets the "note" field.
func (cu *ChecksymptomUpdate) SetNote(s string) *ChecksymptomUpdate {
	cu.mutation.SetNote(s)
	return cu
}

// SetIdentitycard sets the "Identitycard" field.
func (cu *ChecksymptomUpdate) SetIdentitycard(s string) *ChecksymptomUpdate {
	cu.mutation.SetIdentitycard(s)
	return cu
}

// SetPhone sets the "phone" field.
func (cu *ChecksymptomUpdate) SetPhone(s string) *ChecksymptomUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (cu *ChecksymptomUpdate) SetPatientID(id int) *ChecksymptomUpdate {
	cu.mutation.SetPatientID(id)
	return cu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (cu *ChecksymptomUpdate) SetNillablePatientID(id *int) *ChecksymptomUpdate {
	if id != nil {
		cu = cu.SetPatientID(*id)
	}
	return cu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cu *ChecksymptomUpdate) SetPatient(p *Patient) *ChecksymptomUpdate {
	return cu.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (cu *ChecksymptomUpdate) SetPersonnelID(id int) *ChecksymptomUpdate {
	cu.mutation.SetPersonnelID(id)
	return cu
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (cu *ChecksymptomUpdate) SetNillablePersonnelID(id *int) *ChecksymptomUpdate {
	if id != nil {
		cu = cu.SetPersonnelID(*id)
	}
	return cu
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (cu *ChecksymptomUpdate) SetPersonnel(p *Personnel) *ChecksymptomUpdate {
	return cu.SetPersonnelID(p.ID)
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the Doctorordersheet entity by ID.
func (cu *ChecksymptomUpdate) SetDoctorordersheetID(id int) *ChecksymptomUpdate {
	cu.mutation.SetDoctorordersheetID(id)
	return cu
}

// SetNillableDoctorordersheetID sets the "doctorordersheet" edge to the Doctorordersheet entity by ID if the given value is not nil.
func (cu *ChecksymptomUpdate) SetNillableDoctorordersheetID(id *int) *ChecksymptomUpdate {
	if id != nil {
		cu = cu.SetDoctorordersheetID(*id)
	}
	return cu
}

// SetDoctorordersheet sets the "doctorordersheet" edge to the Doctorordersheet entity.
func (cu *ChecksymptomUpdate) SetDoctorordersheet(d *Doctorordersheet) *ChecksymptomUpdate {
	return cu.SetDoctorordersheetID(d.ID)
}

// SetDiseaseID sets the "disease" edge to the Disease entity by ID.
func (cu *ChecksymptomUpdate) SetDiseaseID(id int) *ChecksymptomUpdate {
	cu.mutation.SetDiseaseID(id)
	return cu
}

// SetNillableDiseaseID sets the "disease" edge to the Disease entity by ID if the given value is not nil.
func (cu *ChecksymptomUpdate) SetNillableDiseaseID(id *int) *ChecksymptomUpdate {
	if id != nil {
		cu = cu.SetDiseaseID(*id)
	}
	return cu
}

// SetDisease sets the "disease" edge to the Disease entity.
func (cu *ChecksymptomUpdate) SetDisease(d *Disease) *ChecksymptomUpdate {
	return cu.SetDiseaseID(d.ID)
}

// Mutation returns the ChecksymptomMutation object of the builder.
func (cu *ChecksymptomUpdate) Mutation() *ChecksymptomMutation {
	return cu.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cu *ChecksymptomUpdate) ClearPatient() *ChecksymptomUpdate {
	cu.mutation.ClearPatient()
	return cu
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (cu *ChecksymptomUpdate) ClearPersonnel() *ChecksymptomUpdate {
	cu.mutation.ClearPersonnel()
	return cu
}

// ClearDoctorordersheet clears the "doctorordersheet" edge to the Doctorordersheet entity.
func (cu *ChecksymptomUpdate) ClearDoctorordersheet() *ChecksymptomUpdate {
	cu.mutation.ClearDoctorordersheet()
	return cu
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (cu *ChecksymptomUpdate) ClearDisease() *ChecksymptomUpdate {
	cu.mutation.ClearDisease()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChecksymptomUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChecksymptomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChecksymptomUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChecksymptomUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChecksymptomUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChecksymptomUpdate) check() error {
	if v, ok := cu.mutation.Note(); ok {
		if err := checksymptom.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Identitycard(); ok {
		if err := checksymptom.IdentitycardValidator(v); err != nil {
			return &ValidationError{Name: "Identitycard", err: fmt.Errorf("ent: validator failed for field \"Identitycard\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := checksymptom.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	return nil
}

func (cu *ChecksymptomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checksymptom.Table,
			Columns: checksymptom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checksymptom.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checksymptom.FieldDate,
		})
	}
	if value, ok := cu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldNote,
		})
	}
	if value, ok := cu.mutation.Identitycard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldIdentitycard,
		})
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldPhone,
		})
	}
	if cu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PatientTable,
			Columns: []string{checksymptom.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PatientTable,
			Columns: []string{checksymptom.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PersonnelTable,
			Columns: []string{checksymptom.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PersonnelTable,
			Columns: []string{checksymptom.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DoctorordersheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DoctorordersheetTable,
			Columns: []string{checksymptom.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DoctorordersheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DoctorordersheetTable,
			Columns: []string{checksymptom.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DiseaseTable,
			Columns: []string{checksymptom.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DiseaseTable,
			Columns: []string{checksymptom.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checksymptom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChecksymptomUpdateOne is the builder for updating a single Checksymptom entity.
type ChecksymptomUpdateOne struct {
	config
	hooks    []Hook
	mutation *ChecksymptomMutation
}

// SetDate sets the "date" field.
func (cuo *ChecksymptomUpdateOne) SetDate(t time.Time) *ChecksymptomUpdateOne {
	cuo.mutation.SetDate(t)
	return cuo
}

// SetNote sets the "note" field.
func (cuo *ChecksymptomUpdateOne) SetNote(s string) *ChecksymptomUpdateOne {
	cuo.mutation.SetNote(s)
	return cuo
}

// SetIdentitycard sets the "Identitycard" field.
func (cuo *ChecksymptomUpdateOne) SetIdentitycard(s string) *ChecksymptomUpdateOne {
	cuo.mutation.SetIdentitycard(s)
	return cuo
}

// SetPhone sets the "phone" field.
func (cuo *ChecksymptomUpdateOne) SetPhone(s string) *ChecksymptomUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (cuo *ChecksymptomUpdateOne) SetPatientID(id int) *ChecksymptomUpdateOne {
	cuo.mutation.SetPatientID(id)
	return cuo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (cuo *ChecksymptomUpdateOne) SetNillablePatientID(id *int) *ChecksymptomUpdateOne {
	if id != nil {
		cuo = cuo.SetPatientID(*id)
	}
	return cuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cuo *ChecksymptomUpdateOne) SetPatient(p *Patient) *ChecksymptomUpdateOne {
	return cuo.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (cuo *ChecksymptomUpdateOne) SetPersonnelID(id int) *ChecksymptomUpdateOne {
	cuo.mutation.SetPersonnelID(id)
	return cuo
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (cuo *ChecksymptomUpdateOne) SetNillablePersonnelID(id *int) *ChecksymptomUpdateOne {
	if id != nil {
		cuo = cuo.SetPersonnelID(*id)
	}
	return cuo
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (cuo *ChecksymptomUpdateOne) SetPersonnel(p *Personnel) *ChecksymptomUpdateOne {
	return cuo.SetPersonnelID(p.ID)
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the Doctorordersheet entity by ID.
func (cuo *ChecksymptomUpdateOne) SetDoctorordersheetID(id int) *ChecksymptomUpdateOne {
	cuo.mutation.SetDoctorordersheetID(id)
	return cuo
}

// SetNillableDoctorordersheetID sets the "doctorordersheet" edge to the Doctorordersheet entity by ID if the given value is not nil.
func (cuo *ChecksymptomUpdateOne) SetNillableDoctorordersheetID(id *int) *ChecksymptomUpdateOne {
	if id != nil {
		cuo = cuo.SetDoctorordersheetID(*id)
	}
	return cuo
}

// SetDoctorordersheet sets the "doctorordersheet" edge to the Doctorordersheet entity.
func (cuo *ChecksymptomUpdateOne) SetDoctorordersheet(d *Doctorordersheet) *ChecksymptomUpdateOne {
	return cuo.SetDoctorordersheetID(d.ID)
}

// SetDiseaseID sets the "disease" edge to the Disease entity by ID.
func (cuo *ChecksymptomUpdateOne) SetDiseaseID(id int) *ChecksymptomUpdateOne {
	cuo.mutation.SetDiseaseID(id)
	return cuo
}

// SetNillableDiseaseID sets the "disease" edge to the Disease entity by ID if the given value is not nil.
func (cuo *ChecksymptomUpdateOne) SetNillableDiseaseID(id *int) *ChecksymptomUpdateOne {
	if id != nil {
		cuo = cuo.SetDiseaseID(*id)
	}
	return cuo
}

// SetDisease sets the "disease" edge to the Disease entity.
func (cuo *ChecksymptomUpdateOne) SetDisease(d *Disease) *ChecksymptomUpdateOne {
	return cuo.SetDiseaseID(d.ID)
}

// Mutation returns the ChecksymptomMutation object of the builder.
func (cuo *ChecksymptomUpdateOne) Mutation() *ChecksymptomMutation {
	return cuo.mutation
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cuo *ChecksymptomUpdateOne) ClearPatient() *ChecksymptomUpdateOne {
	cuo.mutation.ClearPatient()
	return cuo
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (cuo *ChecksymptomUpdateOne) ClearPersonnel() *ChecksymptomUpdateOne {
	cuo.mutation.ClearPersonnel()
	return cuo
}

// ClearDoctorordersheet clears the "doctorordersheet" edge to the Doctorordersheet entity.
func (cuo *ChecksymptomUpdateOne) ClearDoctorordersheet() *ChecksymptomUpdateOne {
	cuo.mutation.ClearDoctorordersheet()
	return cuo
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (cuo *ChecksymptomUpdateOne) ClearDisease() *ChecksymptomUpdateOne {
	cuo.mutation.ClearDisease()
	return cuo
}

// Save executes the query and returns the updated Checksymptom entity.
func (cuo *ChecksymptomUpdateOne) Save(ctx context.Context) (*Checksymptom, error) {
	var (
		err  error
		node *Checksymptom
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChecksymptomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChecksymptomUpdateOne) SaveX(ctx context.Context) *Checksymptom {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChecksymptomUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChecksymptomUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChecksymptomUpdateOne) check() error {
	if v, ok := cuo.mutation.Note(); ok {
		if err := checksymptom.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Identitycard(); ok {
		if err := checksymptom.IdentitycardValidator(v); err != nil {
			return &ValidationError{Name: "Identitycard", err: fmt.Errorf("ent: validator failed for field \"Identitycard\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := checksymptom.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	return nil
}

func (cuo *ChecksymptomUpdateOne) sqlSave(ctx context.Context) (_node *Checksymptom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checksymptom.Table,
			Columns: checksymptom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checksymptom.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Checksymptom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checksymptom.FieldDate,
		})
	}
	if value, ok := cuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldNote,
		})
	}
	if value, ok := cuo.mutation.Identitycard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldIdentitycard,
		})
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checksymptom.FieldPhone,
		})
	}
	if cuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PatientTable,
			Columns: []string{checksymptom.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PatientTable,
			Columns: []string{checksymptom.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PersonnelTable,
			Columns: []string{checksymptom.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.PersonnelTable,
			Columns: []string{checksymptom.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DoctorordersheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DoctorordersheetTable,
			Columns: []string{checksymptom.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DoctorordersheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DoctorordersheetTable,
			Columns: []string{checksymptom.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DiseaseTable,
			Columns: []string{checksymptom.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptom.DiseaseTable,
			Columns: []string{checksymptom.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Checksymptom{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checksymptom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
