// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/checksymptom"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/physicaltherapyrecord"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/surgeryappointment"
)

// PersonnelUpdate is the builder for updating Personnel entities.
type PersonnelUpdate struct {
	config
	hooks    []Hook
	mutation *PersonnelMutation
}

// Where adds a new predicate for the PersonnelUpdate builder.
func (pu *PersonnelUpdate) Where(ps ...predicate.Personnel) *PersonnelUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonnelUpdate) SetName(s string) *PersonnelUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDepartment sets the "department" field.
func (pu *PersonnelUpdate) SetDepartment(s string) *PersonnelUpdate {
	pu.mutation.SetDepartment(s)
	return pu
}

// SetUser sets the "user" field.
func (pu *PersonnelUpdate) SetUser(s string) *PersonnelUpdate {
	pu.mutation.SetUser(s)
	return pu
}

// SetPassword sets the "password" field.
func (pu *PersonnelUpdate) SetPassword(s string) *PersonnelUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (pu *PersonnelUpdate) AddPhysicaltherapyrecordIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddPhysicaltherapyrecordIDs(ids...)
	return pu
}

// AddPhysicaltherapyrecord adds the "physicaltherapyrecord" edges to the Physicaltherapyrecord entity.
func (pu *PersonnelUpdate) AddPhysicaltherapyrecord(p ...*Physicaltherapyrecord) *PersonnelUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPhysicaltherapyrecordIDs(ids...)
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by IDs.
func (pu *PersonnelUpdate) AddBonediseaseIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddBonediseaseIDs(ids...)
	return pu
}

// AddBonedisease adds the "Bonedisease" edges to the Bonedisease entity.
func (pu *PersonnelUpdate) AddBonedisease(b ...*Bonedisease) *PersonnelUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBonediseaseIDs(ids...)
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by IDs.
func (pu *PersonnelUpdate) AddChecksymptomIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddChecksymptomIDs(ids...)
	return pu
}

// AddChecksymptom adds the "Checksymptom" edges to the Checksymptom entity.
func (pu *PersonnelUpdate) AddChecksymptom(c ...*Checksymptom) *PersonnelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChecksymptomIDs(ids...)
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (pu *PersonnelUpdate) AddDentalappointmentIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddDentalappointmentIDs(ids...)
	return pu
}

// AddDentalappointment adds the "Dentalappointment" edges to the Dentalappointment entity.
func (pu *PersonnelUpdate) AddDentalappointment(d ...*Dentalappointment) *PersonnelUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDentalappointmentIDs(ids...)
}

// AddSurgeryappointmentIDs adds the "Surgeryappointment" edge to the Surgeryappointment entity by IDs.
func (pu *PersonnelUpdate) AddSurgeryappointmentIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddSurgeryappointmentIDs(ids...)
	return pu
}

// AddSurgeryappointment adds the "Surgeryappointment" edges to the Surgeryappointment entity.
func (pu *PersonnelUpdate) AddSurgeryappointment(s ...*Surgeryappointment) *PersonnelUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSurgeryappointmentIDs(ids...)
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (pu *PersonnelUpdate) AddAntenatalinformationIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.AddAntenatalinformationIDs(ids...)
	return pu
}

// AddAntenatalinformation adds the "Antenatalinformation" edges to the Antenatalinformation entity.
func (pu *PersonnelUpdate) AddAntenatalinformation(a ...*Antenatalinformation) *PersonnelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAntenatalinformationIDs(ids...)
}

// Mutation returns the PersonnelMutation object of the builder.
func (pu *PersonnelUpdate) Mutation() *PersonnelMutation {
	return pu.mutation
}

// ClearPhysicaltherapyrecord clears all "physicaltherapyrecord" edges to the Physicaltherapyrecord entity.
func (pu *PersonnelUpdate) ClearPhysicaltherapyrecord() *PersonnelUpdate {
	pu.mutation.ClearPhysicaltherapyrecord()
	return pu
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to Physicaltherapyrecord entities by IDs.
func (pu *PersonnelUpdate) RemovePhysicaltherapyrecordIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemovePhysicaltherapyrecordIDs(ids...)
	return pu
}

// RemovePhysicaltherapyrecord removes "physicaltherapyrecord" edges to Physicaltherapyrecord entities.
func (pu *PersonnelUpdate) RemovePhysicaltherapyrecord(p ...*Physicaltherapyrecord) *PersonnelUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePhysicaltherapyrecordIDs(ids...)
}

// ClearBonedisease clears all "Bonedisease" edges to the Bonedisease entity.
func (pu *PersonnelUpdate) ClearBonedisease() *PersonnelUpdate {
	pu.mutation.ClearBonedisease()
	return pu
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to Bonedisease entities by IDs.
func (pu *PersonnelUpdate) RemoveBonediseaseIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemoveBonediseaseIDs(ids...)
	return pu
}

// RemoveBonedisease removes "Bonedisease" edges to Bonedisease entities.
func (pu *PersonnelUpdate) RemoveBonedisease(b ...*Bonedisease) *PersonnelUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBonediseaseIDs(ids...)
}

// ClearChecksymptom clears all "Checksymptom" edges to the Checksymptom entity.
func (pu *PersonnelUpdate) ClearChecksymptom() *PersonnelUpdate {
	pu.mutation.ClearChecksymptom()
	return pu
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to Checksymptom entities by IDs.
func (pu *PersonnelUpdate) RemoveChecksymptomIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemoveChecksymptomIDs(ids...)
	return pu
}

// RemoveChecksymptom removes "Checksymptom" edges to Checksymptom entities.
func (pu *PersonnelUpdate) RemoveChecksymptom(c ...*Checksymptom) *PersonnelUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChecksymptomIDs(ids...)
}

// ClearDentalappointment clears all "Dentalappointment" edges to the Dentalappointment entity.
func (pu *PersonnelUpdate) ClearDentalappointment() *PersonnelUpdate {
	pu.mutation.ClearDentalappointment()
	return pu
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to Dentalappointment entities by IDs.
func (pu *PersonnelUpdate) RemoveDentalappointmentIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemoveDentalappointmentIDs(ids...)
	return pu
}

// RemoveDentalappointment removes "Dentalappointment" edges to Dentalappointment entities.
func (pu *PersonnelUpdate) RemoveDentalappointment(d ...*Dentalappointment) *PersonnelUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDentalappointmentIDs(ids...)
}

// ClearSurgeryappointment clears all "Surgeryappointment" edges to the Surgeryappointment entity.
func (pu *PersonnelUpdate) ClearSurgeryappointment() *PersonnelUpdate {
	pu.mutation.ClearSurgeryappointment()
	return pu
}

// RemoveSurgeryappointmentIDs removes the "Surgeryappointment" edge to Surgeryappointment entities by IDs.
func (pu *PersonnelUpdate) RemoveSurgeryappointmentIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemoveSurgeryappointmentIDs(ids...)
	return pu
}

// RemoveSurgeryappointment removes "Surgeryappointment" edges to Surgeryappointment entities.
func (pu *PersonnelUpdate) RemoveSurgeryappointment(s ...*Surgeryappointment) *PersonnelUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSurgeryappointmentIDs(ids...)
}

// ClearAntenatalinformation clears all "Antenatalinformation" edges to the Antenatalinformation entity.
func (pu *PersonnelUpdate) ClearAntenatalinformation() *PersonnelUpdate {
	pu.mutation.ClearAntenatalinformation()
	return pu
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to Antenatalinformation entities by IDs.
func (pu *PersonnelUpdate) RemoveAntenatalinformationIDs(ids ...int) *PersonnelUpdate {
	pu.mutation.RemoveAntenatalinformationIDs(ids...)
	return pu
}

// RemoveAntenatalinformation removes "Antenatalinformation" edges to Antenatalinformation entities.
func (pu *PersonnelUpdate) RemoveAntenatalinformation(a ...*Antenatalinformation) *PersonnelUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAntenatalinformationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonnelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonnelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonnelUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonnelUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonnelUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonnelUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := personnel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Department(); ok {
		if err := personnel.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf("ent: validator failed for field \"department\": %w", err)}
		}
	}
	if v, ok := pu.mutation.User(); ok {
		if err := personnel.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Password(); ok {
		if err := personnel.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	return nil
}

func (pu *PersonnelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personnel.Table,
			Columns: personnel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: personnel.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldName,
		})
	}
	if value, ok := pu.mutation.Department(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldDepartment,
		})
	}
	if value, ok := pu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldUser,
		})
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldPassword,
		})
	}
	if pu.mutation.PhysicaltherapyrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPhysicaltherapyrecordIDs(); len(nodes) > 0 && !pu.mutation.PhysicaltherapyrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhysicaltherapyrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BonediseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBonediseaseIDs(); len(nodes) > 0 && !pu.mutation.BonediseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BonediseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChecksymptomIDs(); len(nodes) > 0 && !pu.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChecksymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDentalappointmentIDs(); len(nodes) > 0 && !pu.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DentalappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SurgeryappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSurgeryappointmentIDs(); len(nodes) > 0 && !pu.mutation.SurgeryappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SurgeryappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAntenatalinformationIDs(); len(nodes) > 0 && !pu.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AntenatalinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PersonnelUpdateOne is the builder for updating a single Personnel entity.
type PersonnelUpdateOne struct {
	config
	hooks    []Hook
	mutation *PersonnelMutation
}

// SetName sets the "name" field.
func (puo *PersonnelUpdateOne) SetName(s string) *PersonnelUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDepartment sets the "department" field.
func (puo *PersonnelUpdateOne) SetDepartment(s string) *PersonnelUpdateOne {
	puo.mutation.SetDepartment(s)
	return puo
}

// SetUser sets the "user" field.
func (puo *PersonnelUpdateOne) SetUser(s string) *PersonnelUpdateOne {
	puo.mutation.SetUser(s)
	return puo
}

// SetPassword sets the "password" field.
func (puo *PersonnelUpdateOne) SetPassword(s string) *PersonnelUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// AddPhysicaltherapyrecordIDs adds the "physicaltherapyrecord" edge to the Physicaltherapyrecord entity by IDs.
func (puo *PersonnelUpdateOne) AddPhysicaltherapyrecordIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddPhysicaltherapyrecordIDs(ids...)
	return puo
}

// AddPhysicaltherapyrecord adds the "physicaltherapyrecord" edges to the Physicaltherapyrecord entity.
func (puo *PersonnelUpdateOne) AddPhysicaltherapyrecord(p ...*Physicaltherapyrecord) *PersonnelUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPhysicaltherapyrecordIDs(ids...)
}

// AddBonediseaseIDs adds the "Bonedisease" edge to the Bonedisease entity by IDs.
func (puo *PersonnelUpdateOne) AddBonediseaseIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddBonediseaseIDs(ids...)
	return puo
}

// AddBonedisease adds the "Bonedisease" edges to the Bonedisease entity.
func (puo *PersonnelUpdateOne) AddBonedisease(b ...*Bonedisease) *PersonnelUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBonediseaseIDs(ids...)
}

// AddChecksymptomIDs adds the "Checksymptom" edge to the Checksymptom entity by IDs.
func (puo *PersonnelUpdateOne) AddChecksymptomIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddChecksymptomIDs(ids...)
	return puo
}

// AddChecksymptom adds the "Checksymptom" edges to the Checksymptom entity.
func (puo *PersonnelUpdateOne) AddChecksymptom(c ...*Checksymptom) *PersonnelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChecksymptomIDs(ids...)
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (puo *PersonnelUpdateOne) AddDentalappointmentIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddDentalappointmentIDs(ids...)
	return puo
}

// AddDentalappointment adds the "Dentalappointment" edges to the Dentalappointment entity.
func (puo *PersonnelUpdateOne) AddDentalappointment(d ...*Dentalappointment) *PersonnelUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDentalappointmentIDs(ids...)
}

// AddSurgeryappointmentIDs adds the "Surgeryappointment" edge to the Surgeryappointment entity by IDs.
func (puo *PersonnelUpdateOne) AddSurgeryappointmentIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddSurgeryappointmentIDs(ids...)
	return puo
}

// AddSurgeryappointment adds the "Surgeryappointment" edges to the Surgeryappointment entity.
func (puo *PersonnelUpdateOne) AddSurgeryappointment(s ...*Surgeryappointment) *PersonnelUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSurgeryappointmentIDs(ids...)
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (puo *PersonnelUpdateOne) AddAntenatalinformationIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.AddAntenatalinformationIDs(ids...)
	return puo
}

// AddAntenatalinformation adds the "Antenatalinformation" edges to the Antenatalinformation entity.
func (puo *PersonnelUpdateOne) AddAntenatalinformation(a ...*Antenatalinformation) *PersonnelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAntenatalinformationIDs(ids...)
}

// Mutation returns the PersonnelMutation object of the builder.
func (puo *PersonnelUpdateOne) Mutation() *PersonnelMutation {
	return puo.mutation
}

// ClearPhysicaltherapyrecord clears all "physicaltherapyrecord" edges to the Physicaltherapyrecord entity.
func (puo *PersonnelUpdateOne) ClearPhysicaltherapyrecord() *PersonnelUpdateOne {
	puo.mutation.ClearPhysicaltherapyrecord()
	return puo
}

// RemovePhysicaltherapyrecordIDs removes the "physicaltherapyrecord" edge to Physicaltherapyrecord entities by IDs.
func (puo *PersonnelUpdateOne) RemovePhysicaltherapyrecordIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemovePhysicaltherapyrecordIDs(ids...)
	return puo
}

// RemovePhysicaltherapyrecord removes "physicaltherapyrecord" edges to Physicaltherapyrecord entities.
func (puo *PersonnelUpdateOne) RemovePhysicaltherapyrecord(p ...*Physicaltherapyrecord) *PersonnelUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePhysicaltherapyrecordIDs(ids...)
}

// ClearBonedisease clears all "Bonedisease" edges to the Bonedisease entity.
func (puo *PersonnelUpdateOne) ClearBonedisease() *PersonnelUpdateOne {
	puo.mutation.ClearBonedisease()
	return puo
}

// RemoveBonediseaseIDs removes the "Bonedisease" edge to Bonedisease entities by IDs.
func (puo *PersonnelUpdateOne) RemoveBonediseaseIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemoveBonediseaseIDs(ids...)
	return puo
}

// RemoveBonedisease removes "Bonedisease" edges to Bonedisease entities.
func (puo *PersonnelUpdateOne) RemoveBonedisease(b ...*Bonedisease) *PersonnelUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBonediseaseIDs(ids...)
}

// ClearChecksymptom clears all "Checksymptom" edges to the Checksymptom entity.
func (puo *PersonnelUpdateOne) ClearChecksymptom() *PersonnelUpdateOne {
	puo.mutation.ClearChecksymptom()
	return puo
}

// RemoveChecksymptomIDs removes the "Checksymptom" edge to Checksymptom entities by IDs.
func (puo *PersonnelUpdateOne) RemoveChecksymptomIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemoveChecksymptomIDs(ids...)
	return puo
}

// RemoveChecksymptom removes "Checksymptom" edges to Checksymptom entities.
func (puo *PersonnelUpdateOne) RemoveChecksymptom(c ...*Checksymptom) *PersonnelUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChecksymptomIDs(ids...)
}

// ClearDentalappointment clears all "Dentalappointment" edges to the Dentalappointment entity.
func (puo *PersonnelUpdateOne) ClearDentalappointment() *PersonnelUpdateOne {
	puo.mutation.ClearDentalappointment()
	return puo
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to Dentalappointment entities by IDs.
func (puo *PersonnelUpdateOne) RemoveDentalappointmentIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemoveDentalappointmentIDs(ids...)
	return puo
}

// RemoveDentalappointment removes "Dentalappointment" edges to Dentalappointment entities.
func (puo *PersonnelUpdateOne) RemoveDentalappointment(d ...*Dentalappointment) *PersonnelUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDentalappointmentIDs(ids...)
}

// ClearSurgeryappointment clears all "Surgeryappointment" edges to the Surgeryappointment entity.
func (puo *PersonnelUpdateOne) ClearSurgeryappointment() *PersonnelUpdateOne {
	puo.mutation.ClearSurgeryappointment()
	return puo
}

// RemoveSurgeryappointmentIDs removes the "Surgeryappointment" edge to Surgeryappointment entities by IDs.
func (puo *PersonnelUpdateOne) RemoveSurgeryappointmentIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemoveSurgeryappointmentIDs(ids...)
	return puo
}

// RemoveSurgeryappointment removes "Surgeryappointment" edges to Surgeryappointment entities.
func (puo *PersonnelUpdateOne) RemoveSurgeryappointment(s ...*Surgeryappointment) *PersonnelUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSurgeryappointmentIDs(ids...)
}

// ClearAntenatalinformation clears all "Antenatalinformation" edges to the Antenatalinformation entity.
func (puo *PersonnelUpdateOne) ClearAntenatalinformation() *PersonnelUpdateOne {
	puo.mutation.ClearAntenatalinformation()
	return puo
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to Antenatalinformation entities by IDs.
func (puo *PersonnelUpdateOne) RemoveAntenatalinformationIDs(ids ...int) *PersonnelUpdateOne {
	puo.mutation.RemoveAntenatalinformationIDs(ids...)
	return puo
}

// RemoveAntenatalinformation removes "Antenatalinformation" edges to Antenatalinformation entities.
func (puo *PersonnelUpdateOne) RemoveAntenatalinformation(a ...*Antenatalinformation) *PersonnelUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAntenatalinformationIDs(ids...)
}

// Save executes the query and returns the updated Personnel entity.
func (puo *PersonnelUpdateOne) Save(ctx context.Context) (*Personnel, error) {
	var (
		err  error
		node *Personnel
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonnelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonnelUpdateOne) SaveX(ctx context.Context) *Personnel {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonnelUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonnelUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonnelUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := personnel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Department(); ok {
		if err := personnel.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf("ent: validator failed for field \"department\": %w", err)}
		}
	}
	if v, ok := puo.mutation.User(); ok {
		if err := personnel.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Password(); ok {
		if err := personnel.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	return nil
}

func (puo *PersonnelUpdateOne) sqlSave(ctx context.Context) (_node *Personnel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personnel.Table,
			Columns: personnel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: personnel.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Personnel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldName,
		})
	}
	if value, ok := puo.mutation.Department(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldDepartment,
		})
	}
	if value, ok := puo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldUser,
		})
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personnel.FieldPassword,
		})
	}
	if puo.mutation.PhysicaltherapyrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPhysicaltherapyrecordIDs(); len(nodes) > 0 && !puo.mutation.PhysicaltherapyrecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhysicaltherapyrecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PhysicaltherapyrecordTable,
			Columns: []string{personnel.PhysicaltherapyrecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physicaltherapyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BonediseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBonediseaseIDs(); len(nodes) > 0 && !puo.mutation.BonediseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BonediseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.BonediseaseTable,
			Columns: []string{personnel.BonediseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bonedisease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChecksymptomIDs(); len(nodes) > 0 && !puo.mutation.ChecksymptomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChecksymptomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.ChecksymptomTable,
			Columns: []string{personnel.ChecksymptomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checksymptom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDentalappointmentIDs(); len(nodes) > 0 && !puo.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DentalappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.DentalappointmentTable,
			Columns: []string{personnel.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SurgeryappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSurgeryappointmentIDs(); len(nodes) > 0 && !puo.mutation.SurgeryappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SurgeryappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.SurgeryappointmentTable,
			Columns: []string{personnel.SurgeryappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: surgeryappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAntenatalinformationIDs(); len(nodes) > 0 && !puo.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AntenatalinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.AntenatalinformationTable,
			Columns: []string{personnel.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Personnel{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
