// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/to63/app/ent/migrate"

	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/physicaltherapyrecord"
	"github.com/to63/app/ent/physicaltherapyroom"
	"github.com/to63/app/ent/remedy"
	"github.com/to63/app/ent/status"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bonedisease is the client for interacting with the Bonedisease builders.
	Bonedisease *BonediseaseClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Personnel is the client for interacting with the Personnel builders.
	Personnel *PersonnelClient
	// Physicaltherapyrecord is the client for interacting with the Physicaltherapyrecord builders.
	Physicaltherapyrecord *PhysicaltherapyrecordClient
	// Physicaltherapyroom is the client for interacting with the Physicaltherapyroom builders.
	Physicaltherapyroom *PhysicaltherapyroomClient
	// Remedy is the client for interacting with the Remedy builders.
	Remedy *RemedyClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bonedisease = NewBonediseaseClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Personnel = NewPersonnelClient(c.config)
	c.Physicaltherapyrecord = NewPhysicaltherapyrecordClient(c.config)
	c.Physicaltherapyroom = NewPhysicaltherapyroomClient(c.config)
	c.Remedy = NewRemedyClient(c.config)
	c.Status = NewStatusClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Bonedisease:           NewBonediseaseClient(cfg),
		Patient:               NewPatientClient(cfg),
		Personnel:             NewPersonnelClient(cfg),
		Physicaltherapyrecord: NewPhysicaltherapyrecordClient(cfg),
		Physicaltherapyroom:   NewPhysicaltherapyroomClient(cfg),
		Remedy:                NewRemedyClient(cfg),
		Status:                NewStatusClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:                cfg,
		Bonedisease:           NewBonediseaseClient(cfg),
		Patient:               NewPatientClient(cfg),
		Personnel:             NewPersonnelClient(cfg),
		Physicaltherapyrecord: NewPhysicaltherapyrecordClient(cfg),
		Physicaltherapyroom:   NewPhysicaltherapyroomClient(cfg),
		Remedy:                NewRemedyClient(cfg),
		Status:                NewStatusClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bonedisease.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bonedisease.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Personnel.Use(hooks...)
	c.Physicaltherapyrecord.Use(hooks...)
	c.Physicaltherapyroom.Use(hooks...)
	c.Remedy.Use(hooks...)
	c.Status.Use(hooks...)
}

// BonediseaseClient is a client for the Bonedisease schema.
type BonediseaseClient struct {
	config
}

// NewBonediseaseClient returns a client for the Bonedisease from the given config.
func NewBonediseaseClient(c config) *BonediseaseClient {
	return &BonediseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bonedisease.Hooks(f(g(h())))`.
func (c *BonediseaseClient) Use(hooks ...Hook) {
	c.hooks.Bonedisease = append(c.hooks.Bonedisease, hooks...)
}

// Create returns a create builder for Bonedisease.
func (c *BonediseaseClient) Create() *BonediseaseCreate {
	mutation := newBonediseaseMutation(c.config, OpCreate)
	return &BonediseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bonedisease entities.
func (c *BonediseaseClient) CreateBulk(builders ...*BonediseaseCreate) *BonediseaseCreateBulk {
	return &BonediseaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bonedisease.
func (c *BonediseaseClient) Update() *BonediseaseUpdate {
	mutation := newBonediseaseMutation(c.config, OpUpdate)
	return &BonediseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BonediseaseClient) UpdateOne(b *Bonedisease) *BonediseaseUpdateOne {
	mutation := newBonediseaseMutation(c.config, OpUpdateOne, withBonedisease(b))
	return &BonediseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BonediseaseClient) UpdateOneID(id int) *BonediseaseUpdateOne {
	mutation := newBonediseaseMutation(c.config, OpUpdateOne, withBonediseaseID(id))
	return &BonediseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bonedisease.
func (c *BonediseaseClient) Delete() *BonediseaseDelete {
	mutation := newBonediseaseMutation(c.config, OpDelete)
	return &BonediseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BonediseaseClient) DeleteOne(b *Bonedisease) *BonediseaseDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BonediseaseClient) DeleteOneID(id int) *BonediseaseDeleteOne {
	builder := c.Delete().Where(bonedisease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BonediseaseDeleteOne{builder}
}

// Query returns a query builder for Bonedisease.
func (c *BonediseaseClient) Query() *BonediseaseQuery {
	return &BonediseaseQuery{config: c.config}
}

// Get returns a Bonedisease entity by its id.
func (c *BonediseaseClient) Get(ctx context.Context, id int) (*Bonedisease, error) {
	return c.Query().Where(bonedisease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BonediseaseClient) GetX(ctx context.Context, id int) *Bonedisease {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRemedy queries the remedy edge of a Bonedisease.
func (c *BonediseaseClient) QueryRemedy(b *Bonedisease) *RemedyQuery {
	query := &RemedyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(remedy.Table, remedy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.RemedyTable, bonedisease.RemedyColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Bonedisease.
func (c *BonediseaseClient) QueryPatient(b *Bonedisease) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.PatientTable, bonedisease.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonnel queries the personnel edge of a Bonedisease.
func (c *BonediseaseClient) QueryPersonnel(b *Bonedisease) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.PersonnelTable, bonedisease.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BonediseaseClient) Hooks() []Hook {
	return c.hooks.Bonedisease
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Patient entities.
func (c *PatientClient) CreateBulk(builders ...*PatientCreate) *PatientCreateBulk {
	return &PatientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Query returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Patient.
func (c *PatientClient) QueryPhysicaltherapyrecord(pa *Patient) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PhysicaltherapyrecordTable, patient.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBonedisease queries the Bonedisease edge of a Patient.
func (c *PatientClient) QueryBonedisease(pa *Patient) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.BonediseaseTable, patient.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PersonnelClient is a client for the Personnel schema.
type PersonnelClient struct {
	config
}

// NewPersonnelClient returns a client for the Personnel from the given config.
func NewPersonnelClient(c config) *PersonnelClient {
	return &PersonnelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personnel.Hooks(f(g(h())))`.
func (c *PersonnelClient) Use(hooks ...Hook) {
	c.hooks.Personnel = append(c.hooks.Personnel, hooks...)
}

// Create returns a create builder for Personnel.
func (c *PersonnelClient) Create() *PersonnelCreate {
	mutation := newPersonnelMutation(c.config, OpCreate)
	return &PersonnelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Personnel entities.
func (c *PersonnelClient) CreateBulk(builders ...*PersonnelCreate) *PersonnelCreateBulk {
	return &PersonnelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Personnel.
func (c *PersonnelClient) Update() *PersonnelUpdate {
	mutation := newPersonnelMutation(c.config, OpUpdate)
	return &PersonnelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonnelClient) UpdateOne(pe *Personnel) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnel(pe))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonnelClient) UpdateOneID(id int) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnelID(id))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Personnel.
func (c *PersonnelClient) Delete() *PersonnelDelete {
	mutation := newPersonnelMutation(c.config, OpDelete)
	return &PersonnelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonnelClient) DeleteOne(pe *Personnel) *PersonnelDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonnelClient) DeleteOneID(id int) *PersonnelDeleteOne {
	builder := c.Delete().Where(personnel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonnelDeleteOne{builder}
}

// Query returns a query builder for Personnel.
func (c *PersonnelClient) Query() *PersonnelQuery {
	return &PersonnelQuery{config: c.config}
}

// Get returns a Personnel entity by its id.
func (c *PersonnelClient) Get(ctx context.Context, id int) (*Personnel, error) {
	return c.Query().Where(personnel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonnelClient) GetX(ctx context.Context, id int) *Personnel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Personnel.
func (c *PersonnelClient) QueryPhysicaltherapyrecord(pe *Personnel) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.PhysicaltherapyrecordTable, personnel.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBonedisease queries the Bonedisease edge of a Personnel.
func (c *PersonnelClient) QueryBonedisease(pe *Personnel) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.BonediseaseTable, personnel.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonnelClient) Hooks() []Hook {
	return c.hooks.Personnel
}

// PhysicaltherapyrecordClient is a client for the Physicaltherapyrecord schema.
type PhysicaltherapyrecordClient struct {
	config
}

// NewPhysicaltherapyrecordClient returns a client for the Physicaltherapyrecord from the given config.
func NewPhysicaltherapyrecordClient(c config) *PhysicaltherapyrecordClient {
	return &PhysicaltherapyrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physicaltherapyrecord.Hooks(f(g(h())))`.
func (c *PhysicaltherapyrecordClient) Use(hooks ...Hook) {
	c.hooks.Physicaltherapyrecord = append(c.hooks.Physicaltherapyrecord, hooks...)
}

// Create returns a create builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Create() *PhysicaltherapyrecordCreate {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpCreate)
	return &PhysicaltherapyrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Physicaltherapyrecord entities.
func (c *PhysicaltherapyrecordClient) CreateBulk(builders ...*PhysicaltherapyrecordCreate) *PhysicaltherapyrecordCreateBulk {
	return &PhysicaltherapyrecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Update() *PhysicaltherapyrecordUpdate {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdate)
	return &PhysicaltherapyrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicaltherapyrecordClient) UpdateOne(ph *Physicaltherapyrecord) *PhysicaltherapyrecordUpdateOne {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdateOne, withPhysicaltherapyrecord(ph))
	return &PhysicaltherapyrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicaltherapyrecordClient) UpdateOneID(id int) *PhysicaltherapyrecordUpdateOne {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdateOne, withPhysicaltherapyrecordID(id))
	return &PhysicaltherapyrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Delete() *PhysicaltherapyrecordDelete {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpDelete)
	return &PhysicaltherapyrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicaltherapyrecordClient) DeleteOne(ph *Physicaltherapyrecord) *PhysicaltherapyrecordDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicaltherapyrecordClient) DeleteOneID(id int) *PhysicaltherapyrecordDeleteOne {
	builder := c.Delete().Where(physicaltherapyrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicaltherapyrecordDeleteOne{builder}
}

// Query returns a query builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Query() *PhysicaltherapyrecordQuery {
	return &PhysicaltherapyrecordQuery{config: c.config}
}

// Get returns a Physicaltherapyrecord entity by its id.
func (c *PhysicaltherapyrecordClient) Get(ctx context.Context, id int) (*Physicaltherapyrecord, error) {
	return c.Query().Where(physicaltherapyrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicaltherapyrecordClient) GetX(ctx context.Context, id int) *Physicaltherapyrecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the personnel edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPersonnel(ph *Physicaltherapyrecord) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.PersonnelTable, physicaltherapyrecord.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPatient(ph *Physicaltherapyrecord) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.PatientTable, physicaltherapyrecord.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhysicaltherapyroom queries the physicaltherapyroom edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPhysicaltherapyroom(ph *Physicaltherapyrecord) *PhysicaltherapyroomQuery {
	query := &PhysicaltherapyroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(physicaltherapyroom.Table, physicaltherapyroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, physicaltherapyrecord.PhysicaltherapyroomTable, physicaltherapyrecord.PhysicaltherapyroomColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryStatus(ph *Physicaltherapyrecord) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, physicaltherapyrecord.StatusTable, physicaltherapyrecord.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicaltherapyrecordClient) Hooks() []Hook {
	return c.hooks.Physicaltherapyrecord
}

// PhysicaltherapyroomClient is a client for the Physicaltherapyroom schema.
type PhysicaltherapyroomClient struct {
	config
}

// NewPhysicaltherapyroomClient returns a client for the Physicaltherapyroom from the given config.
func NewPhysicaltherapyroomClient(c config) *PhysicaltherapyroomClient {
	return &PhysicaltherapyroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physicaltherapyroom.Hooks(f(g(h())))`.
func (c *PhysicaltherapyroomClient) Use(hooks ...Hook) {
	c.hooks.Physicaltherapyroom = append(c.hooks.Physicaltherapyroom, hooks...)
}

// Create returns a create builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Create() *PhysicaltherapyroomCreate {
	mutation := newPhysicaltherapyroomMutation(c.config, OpCreate)
	return &PhysicaltherapyroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Physicaltherapyroom entities.
func (c *PhysicaltherapyroomClient) CreateBulk(builders ...*PhysicaltherapyroomCreate) *PhysicaltherapyroomCreateBulk {
	return &PhysicaltherapyroomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Update() *PhysicaltherapyroomUpdate {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdate)
	return &PhysicaltherapyroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicaltherapyroomClient) UpdateOne(ph *Physicaltherapyroom) *PhysicaltherapyroomUpdateOne {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdateOne, withPhysicaltherapyroom(ph))
	return &PhysicaltherapyroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicaltherapyroomClient) UpdateOneID(id int) *PhysicaltherapyroomUpdateOne {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdateOne, withPhysicaltherapyroomID(id))
	return &PhysicaltherapyroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Delete() *PhysicaltherapyroomDelete {
	mutation := newPhysicaltherapyroomMutation(c.config, OpDelete)
	return &PhysicaltherapyroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicaltherapyroomClient) DeleteOne(ph *Physicaltherapyroom) *PhysicaltherapyroomDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicaltherapyroomClient) DeleteOneID(id int) *PhysicaltherapyroomDeleteOne {
	builder := c.Delete().Where(physicaltherapyroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicaltherapyroomDeleteOne{builder}
}

// Query returns a query builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Query() *PhysicaltherapyroomQuery {
	return &PhysicaltherapyroomQuery{config: c.config}
}

// Get returns a Physicaltherapyroom entity by its id.
func (c *PhysicaltherapyroomClient) Get(ctx context.Context, id int) (*Physicaltherapyroom, error) {
	return c.Query().Where(physicaltherapyroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicaltherapyroomClient) GetX(ctx context.Context, id int) *Physicaltherapyroom {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) QueryPhysicaltherapyrecord(ph *Physicaltherapyroom) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyroom.Table, physicaltherapyroom.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, physicaltherapyroom.PhysicaltherapyrecordTable, physicaltherapyroom.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicaltherapyroomClient) Hooks() []Hook {
	return c.hooks.Physicaltherapyroom
}

// RemedyClient is a client for the Remedy schema.
type RemedyClient struct {
	config
}

// NewRemedyClient returns a client for the Remedy from the given config.
func NewRemedyClient(c config) *RemedyClient {
	return &RemedyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `remedy.Hooks(f(g(h())))`.
func (c *RemedyClient) Use(hooks ...Hook) {
	c.hooks.Remedy = append(c.hooks.Remedy, hooks...)
}

// Create returns a create builder for Remedy.
func (c *RemedyClient) Create() *RemedyCreate {
	mutation := newRemedyMutation(c.config, OpCreate)
	return &RemedyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Remedy entities.
func (c *RemedyClient) CreateBulk(builders ...*RemedyCreate) *RemedyCreateBulk {
	return &RemedyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Remedy.
func (c *RemedyClient) Update() *RemedyUpdate {
	mutation := newRemedyMutation(c.config, OpUpdate)
	return &RemedyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RemedyClient) UpdateOne(r *Remedy) *RemedyUpdateOne {
	mutation := newRemedyMutation(c.config, OpUpdateOne, withRemedy(r))
	return &RemedyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RemedyClient) UpdateOneID(id int) *RemedyUpdateOne {
	mutation := newRemedyMutation(c.config, OpUpdateOne, withRemedyID(id))
	return &RemedyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Remedy.
func (c *RemedyClient) Delete() *RemedyDelete {
	mutation := newRemedyMutation(c.config, OpDelete)
	return &RemedyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RemedyClient) DeleteOne(r *Remedy) *RemedyDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RemedyClient) DeleteOneID(id int) *RemedyDeleteOne {
	builder := c.Delete().Where(remedy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RemedyDeleteOne{builder}
}

// Query returns a query builder for Remedy.
func (c *RemedyClient) Query() *RemedyQuery {
	return &RemedyQuery{config: c.config}
}

// Get returns a Remedy entity by its id.
func (c *RemedyClient) Get(ctx context.Context, id int) (*Remedy, error) {
	return c.Query().Where(remedy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RemedyClient) GetX(ctx context.Context, id int) *Remedy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBonedisease queries the Bonedisease edge of a Remedy.
func (c *RemedyClient) QueryBonedisease(r *Remedy) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(remedy.Table, remedy.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, remedy.BonediseaseTable, remedy.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RemedyClient) Hooks() []Hook {
	return c.hooks.Remedy
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Create returns a create builder for Status.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Status entities.
func (c *StatusClient) CreateBulk(builders ...*StatusCreate) *StatusCreateBulk {
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id int) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusClient) DeleteOneID(id int) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Query returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{config: c.config}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id int) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id int) *Status {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Status.
func (c *StatusClient) QueryPhysicaltherapyrecord(s *Status) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, status.PhysicaltherapyrecordTable, status.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}
