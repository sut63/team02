// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/to63/app/ent/migrate"

	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/checksymptom"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/dentalkind"
	"github.com/to63/app/ent/disease"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/physicaltherapyrecord"
	"github.com/to63/app/ent/physicaltherapyroom"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/remedy"
	"github.com/to63/app/ent/risks"
	"github.com/to63/app/ent/status"
	"github.com/to63/app/ent/surgeryappointment"
	"github.com/to63/app/ent/surgerytype"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Antenatalinformation is the client for interacting with the Antenatalinformation builders.
	Antenatalinformation *AntenatalinformationClient
	// Bonedisease is the client for interacting with the Bonedisease builders.
	Bonedisease *BonediseaseClient
	// Checksymptom is the client for interacting with the Checksymptom builders.
	Checksymptom *ChecksymptomClient
	// Dentalappointment is the client for interacting with the Dentalappointment builders.
	Dentalappointment *DentalappointmentClient
	// Dentalkind is the client for interacting with the Dentalkind builders.
	Dentalkind *DentalkindClient
	// Disease is the client for interacting with the Disease builders.
	Disease *DiseaseClient
	// Doctorordersheet is the client for interacting with the Doctorordersheet builders.
	Doctorordersheet *DoctorordersheetClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Personnel is the client for interacting with the Personnel builders.
	Personnel *PersonnelClient
	// Physicaltherapyrecord is the client for interacting with the Physicaltherapyrecord builders.
	Physicaltherapyrecord *PhysicaltherapyrecordClient
	// Physicaltherapyroom is the client for interacting with the Physicaltherapyroom builders.
	Physicaltherapyroom *PhysicaltherapyroomClient
	// Pregnancystatus is the client for interacting with the Pregnancystatus builders.
	Pregnancystatus *PregnancystatusClient
	// Remedy is the client for interacting with the Remedy builders.
	Remedy *RemedyClient
	// Risks is the client for interacting with the Risks builders.
	Risks *RisksClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// Surgeryappointment is the client for interacting with the Surgeryappointment builders.
	Surgeryappointment *SurgeryappointmentClient
	// Surgerytype is the client for interacting with the Surgerytype builders.
	Surgerytype *SurgerytypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Antenatalinformation = NewAntenatalinformationClient(c.config)
	c.Bonedisease = NewBonediseaseClient(c.config)
	c.Checksymptom = NewChecksymptomClient(c.config)
	c.Dentalappointment = NewDentalappointmentClient(c.config)
	c.Dentalkind = NewDentalkindClient(c.config)
	c.Disease = NewDiseaseClient(c.config)
	c.Doctorordersheet = NewDoctorordersheetClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Personnel = NewPersonnelClient(c.config)
	c.Physicaltherapyrecord = NewPhysicaltherapyrecordClient(c.config)
	c.Physicaltherapyroom = NewPhysicaltherapyroomClient(c.config)
	c.Pregnancystatus = NewPregnancystatusClient(c.config)
	c.Remedy = NewRemedyClient(c.config)
	c.Risks = NewRisksClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.Surgeryappointment = NewSurgeryappointmentClient(c.config)
	c.Surgerytype = NewSurgerytypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Antenatalinformation:  NewAntenatalinformationClient(cfg),
		Bonedisease:           NewBonediseaseClient(cfg),
		Checksymptom:          NewChecksymptomClient(cfg),
		Dentalappointment:     NewDentalappointmentClient(cfg),
		Dentalkind:            NewDentalkindClient(cfg),
		Disease:               NewDiseaseClient(cfg),
		Doctorordersheet:      NewDoctorordersheetClient(cfg),
		Patient:               NewPatientClient(cfg),
		Personnel:             NewPersonnelClient(cfg),
		Physicaltherapyrecord: NewPhysicaltherapyrecordClient(cfg),
		Physicaltherapyroom:   NewPhysicaltherapyroomClient(cfg),
		Pregnancystatus:       NewPregnancystatusClient(cfg),
		Remedy:                NewRemedyClient(cfg),
		Risks:                 NewRisksClient(cfg),
		Status:                NewStatusClient(cfg),
		Surgeryappointment:    NewSurgeryappointmentClient(cfg),
		Surgerytype:           NewSurgerytypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:                cfg,
		Antenatalinformation:  NewAntenatalinformationClient(cfg),
		Bonedisease:           NewBonediseaseClient(cfg),
		Checksymptom:          NewChecksymptomClient(cfg),
		Dentalappointment:     NewDentalappointmentClient(cfg),
		Dentalkind:            NewDentalkindClient(cfg),
		Disease:               NewDiseaseClient(cfg),
		Doctorordersheet:      NewDoctorordersheetClient(cfg),
		Patient:               NewPatientClient(cfg),
		Personnel:             NewPersonnelClient(cfg),
		Physicaltherapyrecord: NewPhysicaltherapyrecordClient(cfg),
		Physicaltherapyroom:   NewPhysicaltherapyroomClient(cfg),
		Pregnancystatus:       NewPregnancystatusClient(cfg),
		Remedy:                NewRemedyClient(cfg),
		Risks:                 NewRisksClient(cfg),
		Status:                NewStatusClient(cfg),
		Surgeryappointment:    NewSurgeryappointmentClient(cfg),
		Surgerytype:           NewSurgerytypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Antenatalinformation.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Antenatalinformation.Use(hooks...)
	c.Bonedisease.Use(hooks...)
	c.Checksymptom.Use(hooks...)
	c.Dentalappointment.Use(hooks...)
	c.Dentalkind.Use(hooks...)
	c.Disease.Use(hooks...)
	c.Doctorordersheet.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Personnel.Use(hooks...)
	c.Physicaltherapyrecord.Use(hooks...)
	c.Physicaltherapyroom.Use(hooks...)
	c.Pregnancystatus.Use(hooks...)
	c.Remedy.Use(hooks...)
	c.Risks.Use(hooks...)
	c.Status.Use(hooks...)
	c.Surgeryappointment.Use(hooks...)
	c.Surgerytype.Use(hooks...)
}

// AntenatalinformationClient is a client for the Antenatalinformation schema.
type AntenatalinformationClient struct {
	config
}

// NewAntenatalinformationClient returns a client for the Antenatalinformation from the given config.
func NewAntenatalinformationClient(c config) *AntenatalinformationClient {
	return &AntenatalinformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `antenatalinformation.Hooks(f(g(h())))`.
func (c *AntenatalinformationClient) Use(hooks ...Hook) {
	c.hooks.Antenatalinformation = append(c.hooks.Antenatalinformation, hooks...)
}

// Create returns a create builder for Antenatalinformation.
func (c *AntenatalinformationClient) Create() *AntenatalinformationCreate {
	mutation := newAntenatalinformationMutation(c.config, OpCreate)
	return &AntenatalinformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Antenatalinformation entities.
func (c *AntenatalinformationClient) CreateBulk(builders ...*AntenatalinformationCreate) *AntenatalinformationCreateBulk {
	return &AntenatalinformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Antenatalinformation.
func (c *AntenatalinformationClient) Update() *AntenatalinformationUpdate {
	mutation := newAntenatalinformationMutation(c.config, OpUpdate)
	return &AntenatalinformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AntenatalinformationClient) UpdateOne(a *Antenatalinformation) *AntenatalinformationUpdateOne {
	mutation := newAntenatalinformationMutation(c.config, OpUpdateOne, withAntenatalinformation(a))
	return &AntenatalinformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AntenatalinformationClient) UpdateOneID(id int) *AntenatalinformationUpdateOne {
	mutation := newAntenatalinformationMutation(c.config, OpUpdateOne, withAntenatalinformationID(id))
	return &AntenatalinformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Antenatalinformation.
func (c *AntenatalinformationClient) Delete() *AntenatalinformationDelete {
	mutation := newAntenatalinformationMutation(c.config, OpDelete)
	return &AntenatalinformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AntenatalinformationClient) DeleteOne(a *Antenatalinformation) *AntenatalinformationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AntenatalinformationClient) DeleteOneID(id int) *AntenatalinformationDeleteOne {
	builder := c.Delete().Where(antenatalinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AntenatalinformationDeleteOne{builder}
}

// Query returns a query builder for Antenatalinformation.
func (c *AntenatalinformationClient) Query() *AntenatalinformationQuery {
	return &AntenatalinformationQuery{config: c.config}
}

// Get returns a Antenatalinformation entity by its id.
func (c *AntenatalinformationClient) Get(ctx context.Context, id int) (*Antenatalinformation, error) {
	return c.Query().Where(antenatalinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AntenatalinformationClient) GetX(ctx context.Context, id int) *Antenatalinformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the Personnel edge of a Antenatalinformation.
func (c *AntenatalinformationClient) QueryPersonnel(a *Antenatalinformation) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.PersonnelTable, antenatalinformation.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the Patient edge of a Antenatalinformation.
func (c *AntenatalinformationClient) QueryPatient(a *Antenatalinformation) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.PatientTable, antenatalinformation.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPregnancystatus queries the Pregnancystatus edge of a Antenatalinformation.
func (c *AntenatalinformationClient) QueryPregnancystatus(a *Antenatalinformation) *PregnancystatusQuery {
	query := &PregnancystatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, id),
			sqlgraph.To(pregnancystatus.Table, pregnancystatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.PregnancystatusTable, antenatalinformation.PregnancystatusColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRisks queries the Risks edge of a Antenatalinformation.
func (c *AntenatalinformationClient) QueryRisks(a *Antenatalinformation) *RisksQuery {
	query := &RisksQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, id),
			sqlgraph.To(risks.Table, risks.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.RisksTable, antenatalinformation.RisksColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AntenatalinformationClient) Hooks() []Hook {
	return c.hooks.Antenatalinformation
}

// BonediseaseClient is a client for the Bonedisease schema.
type BonediseaseClient struct {
	config
}

// NewBonediseaseClient returns a client for the Bonedisease from the given config.
func NewBonediseaseClient(c config) *BonediseaseClient {
	return &BonediseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bonedisease.Hooks(f(g(h())))`.
func (c *BonediseaseClient) Use(hooks ...Hook) {
	c.hooks.Bonedisease = append(c.hooks.Bonedisease, hooks...)
}

// Create returns a create builder for Bonedisease.
func (c *BonediseaseClient) Create() *BonediseaseCreate {
	mutation := newBonediseaseMutation(c.config, OpCreate)
	return &BonediseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bonedisease entities.
func (c *BonediseaseClient) CreateBulk(builders ...*BonediseaseCreate) *BonediseaseCreateBulk {
	return &BonediseaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bonedisease.
func (c *BonediseaseClient) Update() *BonediseaseUpdate {
	mutation := newBonediseaseMutation(c.config, OpUpdate)
	return &BonediseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BonediseaseClient) UpdateOne(b *Bonedisease) *BonediseaseUpdateOne {
	mutation := newBonediseaseMutation(c.config, OpUpdateOne, withBonedisease(b))
	return &BonediseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BonediseaseClient) UpdateOneID(id int) *BonediseaseUpdateOne {
	mutation := newBonediseaseMutation(c.config, OpUpdateOne, withBonediseaseID(id))
	return &BonediseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bonedisease.
func (c *BonediseaseClient) Delete() *BonediseaseDelete {
	mutation := newBonediseaseMutation(c.config, OpDelete)
	return &BonediseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BonediseaseClient) DeleteOne(b *Bonedisease) *BonediseaseDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BonediseaseClient) DeleteOneID(id int) *BonediseaseDeleteOne {
	builder := c.Delete().Where(bonedisease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BonediseaseDeleteOne{builder}
}

// Query returns a query builder for Bonedisease.
func (c *BonediseaseClient) Query() *BonediseaseQuery {
	return &BonediseaseQuery{config: c.config}
}

// Get returns a Bonedisease entity by its id.
func (c *BonediseaseClient) Get(ctx context.Context, id int) (*Bonedisease, error) {
	return c.Query().Where(bonedisease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BonediseaseClient) GetX(ctx context.Context, id int) *Bonedisease {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRemedy queries the remedy edge of a Bonedisease.
func (c *BonediseaseClient) QueryRemedy(b *Bonedisease) *RemedyQuery {
	query := &RemedyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(remedy.Table, remedy.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.RemedyTable, bonedisease.RemedyColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Bonedisease.
func (c *BonediseaseClient) QueryPatient(b *Bonedisease) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.PatientTable, bonedisease.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonnel queries the personnel edge of a Bonedisease.
func (c *BonediseaseClient) QueryPersonnel(b *Bonedisease) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bonedisease.Table, bonedisease.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bonedisease.PersonnelTable, bonedisease.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BonediseaseClient) Hooks() []Hook {
	return c.hooks.Bonedisease
}

// ChecksymptomClient is a client for the Checksymptom schema.
type ChecksymptomClient struct {
	config
}

// NewChecksymptomClient returns a client for the Checksymptom from the given config.
func NewChecksymptomClient(c config) *ChecksymptomClient {
	return &ChecksymptomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checksymptom.Hooks(f(g(h())))`.
func (c *ChecksymptomClient) Use(hooks ...Hook) {
	c.hooks.Checksymptom = append(c.hooks.Checksymptom, hooks...)
}

// Create returns a create builder for Checksymptom.
func (c *ChecksymptomClient) Create() *ChecksymptomCreate {
	mutation := newChecksymptomMutation(c.config, OpCreate)
	return &ChecksymptomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Checksymptom entities.
func (c *ChecksymptomClient) CreateBulk(builders ...*ChecksymptomCreate) *ChecksymptomCreateBulk {
	return &ChecksymptomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Checksymptom.
func (c *ChecksymptomClient) Update() *ChecksymptomUpdate {
	mutation := newChecksymptomMutation(c.config, OpUpdate)
	return &ChecksymptomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChecksymptomClient) UpdateOne(ch *Checksymptom) *ChecksymptomUpdateOne {
	mutation := newChecksymptomMutation(c.config, OpUpdateOne, withChecksymptom(ch))
	return &ChecksymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChecksymptomClient) UpdateOneID(id int) *ChecksymptomUpdateOne {
	mutation := newChecksymptomMutation(c.config, OpUpdateOne, withChecksymptomID(id))
	return &ChecksymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Checksymptom.
func (c *ChecksymptomClient) Delete() *ChecksymptomDelete {
	mutation := newChecksymptomMutation(c.config, OpDelete)
	return &ChecksymptomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChecksymptomClient) DeleteOne(ch *Checksymptom) *ChecksymptomDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChecksymptomClient) DeleteOneID(id int) *ChecksymptomDeleteOne {
	builder := c.Delete().Where(checksymptom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChecksymptomDeleteOne{builder}
}

// Query returns a query builder for Checksymptom.
func (c *ChecksymptomClient) Query() *ChecksymptomQuery {
	return &ChecksymptomQuery{config: c.config}
}

// Get returns a Checksymptom entity by its id.
func (c *ChecksymptomClient) Get(ctx context.Context, id int) (*Checksymptom, error) {
	return c.Query().Where(checksymptom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChecksymptomClient) GetX(ctx context.Context, id int) *Checksymptom {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPatient queries the patient edge of a Checksymptom.
func (c *ChecksymptomClient) QueryPatient(ch *Checksymptom) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checksymptom.Table, checksymptom.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checksymptom.PatientTable, checksymptom.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonnel queries the personnel edge of a Checksymptom.
func (c *ChecksymptomClient) QueryPersonnel(ch *Checksymptom) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checksymptom.Table, checksymptom.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checksymptom.PersonnelTable, checksymptom.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorordersheet queries the doctorordersheet edge of a Checksymptom.
func (c *ChecksymptomClient) QueryDoctorordersheet(ch *Checksymptom) *DoctorordersheetQuery {
	query := &DoctorordersheetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checksymptom.Table, checksymptom.FieldID, id),
			sqlgraph.To(doctorordersheet.Table, doctorordersheet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checksymptom.DoctorordersheetTable, checksymptom.DoctorordersheetColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisease queries the disease edge of a Checksymptom.
func (c *ChecksymptomClient) QueryDisease(ch *Checksymptom) *DiseaseQuery {
	query := &DiseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checksymptom.Table, checksymptom.FieldID, id),
			sqlgraph.To(disease.Table, disease.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checksymptom.DiseaseTable, checksymptom.DiseaseColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChecksymptomClient) Hooks() []Hook {
	return c.hooks.Checksymptom
}

// DentalappointmentClient is a client for the Dentalappointment schema.
type DentalappointmentClient struct {
	config
}

// NewDentalappointmentClient returns a client for the Dentalappointment from the given config.
func NewDentalappointmentClient(c config) *DentalappointmentClient {
	return &DentalappointmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dentalappointment.Hooks(f(g(h())))`.
func (c *DentalappointmentClient) Use(hooks ...Hook) {
	c.hooks.Dentalappointment = append(c.hooks.Dentalappointment, hooks...)
}

// Create returns a create builder for Dentalappointment.
func (c *DentalappointmentClient) Create() *DentalappointmentCreate {
	mutation := newDentalappointmentMutation(c.config, OpCreate)
	return &DentalappointmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dentalappointment entities.
func (c *DentalappointmentClient) CreateBulk(builders ...*DentalappointmentCreate) *DentalappointmentCreateBulk {
	return &DentalappointmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dentalappointment.
func (c *DentalappointmentClient) Update() *DentalappointmentUpdate {
	mutation := newDentalappointmentMutation(c.config, OpUpdate)
	return &DentalappointmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DentalappointmentClient) UpdateOne(d *Dentalappointment) *DentalappointmentUpdateOne {
	mutation := newDentalappointmentMutation(c.config, OpUpdateOne, withDentalappointment(d))
	return &DentalappointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DentalappointmentClient) UpdateOneID(id int) *DentalappointmentUpdateOne {
	mutation := newDentalappointmentMutation(c.config, OpUpdateOne, withDentalappointmentID(id))
	return &DentalappointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dentalappointment.
func (c *DentalappointmentClient) Delete() *DentalappointmentDelete {
	mutation := newDentalappointmentMutation(c.config, OpDelete)
	return &DentalappointmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DentalappointmentClient) DeleteOne(d *Dentalappointment) *DentalappointmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DentalappointmentClient) DeleteOneID(id int) *DentalappointmentDeleteOne {
	builder := c.Delete().Where(dentalappointment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DentalappointmentDeleteOne{builder}
}

// Query returns a query builder for Dentalappointment.
func (c *DentalappointmentClient) Query() *DentalappointmentQuery {
	return &DentalappointmentQuery{config: c.config}
}

// Get returns a Dentalappointment entity by its id.
func (c *DentalappointmentClient) Get(ctx context.Context, id int) (*Dentalappointment, error) {
	return c.Query().Where(dentalappointment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DentalappointmentClient) GetX(ctx context.Context, id int) *Dentalappointment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the Personnel edge of a Dentalappointment.
func (c *DentalappointmentClient) QueryPersonnel(d *Dentalappointment) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalappointment.Table, dentalappointment.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalappointment.PersonnelTable, dentalappointment.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the Patient edge of a Dentalappointment.
func (c *DentalappointmentClient) QueryPatient(d *Dentalappointment) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalappointment.Table, dentalappointment.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalappointment.PatientTable, dentalappointment.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDentalkind queries the Dentalkind edge of a Dentalappointment.
func (c *DentalappointmentClient) QueryDentalkind(d *Dentalappointment) *DentalkindQuery {
	query := &DentalkindQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalappointment.Table, dentalappointment.FieldID, id),
			sqlgraph.To(dentalkind.Table, dentalkind.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalappointment.DentalkindTable, dentalappointment.DentalkindColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DentalappointmentClient) Hooks() []Hook {
	return c.hooks.Dentalappointment
}

// DentalkindClient is a client for the Dentalkind schema.
type DentalkindClient struct {
	config
}

// NewDentalkindClient returns a client for the Dentalkind from the given config.
func NewDentalkindClient(c config) *DentalkindClient {
	return &DentalkindClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dentalkind.Hooks(f(g(h())))`.
func (c *DentalkindClient) Use(hooks ...Hook) {
	c.hooks.Dentalkind = append(c.hooks.Dentalkind, hooks...)
}

// Create returns a create builder for Dentalkind.
func (c *DentalkindClient) Create() *DentalkindCreate {
	mutation := newDentalkindMutation(c.config, OpCreate)
	return &DentalkindCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dentalkind entities.
func (c *DentalkindClient) CreateBulk(builders ...*DentalkindCreate) *DentalkindCreateBulk {
	return &DentalkindCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dentalkind.
func (c *DentalkindClient) Update() *DentalkindUpdate {
	mutation := newDentalkindMutation(c.config, OpUpdate)
	return &DentalkindUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DentalkindClient) UpdateOne(d *Dentalkind) *DentalkindUpdateOne {
	mutation := newDentalkindMutation(c.config, OpUpdateOne, withDentalkind(d))
	return &DentalkindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DentalkindClient) UpdateOneID(id int) *DentalkindUpdateOne {
	mutation := newDentalkindMutation(c.config, OpUpdateOne, withDentalkindID(id))
	return &DentalkindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dentalkind.
func (c *DentalkindClient) Delete() *DentalkindDelete {
	mutation := newDentalkindMutation(c.config, OpDelete)
	return &DentalkindDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DentalkindClient) DeleteOne(d *Dentalkind) *DentalkindDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DentalkindClient) DeleteOneID(id int) *DentalkindDeleteOne {
	builder := c.Delete().Where(dentalkind.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DentalkindDeleteOne{builder}
}

// Query returns a query builder for Dentalkind.
func (c *DentalkindClient) Query() *DentalkindQuery {
	return &DentalkindQuery{config: c.config}
}

// Get returns a Dentalkind entity by its id.
func (c *DentalkindClient) Get(ctx context.Context, id int) (*Dentalkind, error) {
	return c.Query().Where(dentalkind.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DentalkindClient) GetX(ctx context.Context, id int) *Dentalkind {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDentalappointment queries the Dentalappointment edge of a Dentalkind.
func (c *DentalkindClient) QueryDentalappointment(d *Dentalkind) *DentalappointmentQuery {
	query := &DentalappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalkind.Table, dentalkind.FieldID, id),
			sqlgraph.To(dentalappointment.Table, dentalappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dentalkind.DentalappointmentTable, dentalkind.DentalappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DentalkindClient) Hooks() []Hook {
	return c.hooks.Dentalkind
}

// DiseaseClient is a client for the Disease schema.
type DiseaseClient struct {
	config
}

// NewDiseaseClient returns a client for the Disease from the given config.
func NewDiseaseClient(c config) *DiseaseClient {
	return &DiseaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disease.Hooks(f(g(h())))`.
func (c *DiseaseClient) Use(hooks ...Hook) {
	c.hooks.Disease = append(c.hooks.Disease, hooks...)
}

// Create returns a create builder for Disease.
func (c *DiseaseClient) Create() *DiseaseCreate {
	mutation := newDiseaseMutation(c.config, OpCreate)
	return &DiseaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Disease entities.
func (c *DiseaseClient) CreateBulk(builders ...*DiseaseCreate) *DiseaseCreateBulk {
	return &DiseaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Disease.
func (c *DiseaseClient) Update() *DiseaseUpdate {
	mutation := newDiseaseMutation(c.config, OpUpdate)
	return &DiseaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiseaseClient) UpdateOne(d *Disease) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDisease(d))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiseaseClient) UpdateOneID(id int) *DiseaseUpdateOne {
	mutation := newDiseaseMutation(c.config, OpUpdateOne, withDiseaseID(id))
	return &DiseaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disease.
func (c *DiseaseClient) Delete() *DiseaseDelete {
	mutation := newDiseaseMutation(c.config, OpDelete)
	return &DiseaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiseaseClient) DeleteOne(d *Disease) *DiseaseDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiseaseClient) DeleteOneID(id int) *DiseaseDeleteOne {
	builder := c.Delete().Where(disease.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiseaseDeleteOne{builder}
}

// Query returns a query builder for Disease.
func (c *DiseaseClient) Query() *DiseaseQuery {
	return &DiseaseQuery{config: c.config}
}

// Get returns a Disease entity by its id.
func (c *DiseaseClient) Get(ctx context.Context, id int) (*Disease, error) {
	return c.Query().Where(disease.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiseaseClient) GetX(ctx context.Context, id int) *Disease {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecksymptom queries the Checksymptom edge of a Disease.
func (c *DiseaseClient) QueryChecksymptom(d *Disease) *ChecksymptomQuery {
	query := &ChecksymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disease.Table, disease.FieldID, id),
			sqlgraph.To(checksymptom.Table, checksymptom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disease.ChecksymptomTable, disease.ChecksymptomColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiseaseClient) Hooks() []Hook {
	return c.hooks.Disease
}

// DoctorordersheetClient is a client for the Doctorordersheet schema.
type DoctorordersheetClient struct {
	config
}

// NewDoctorordersheetClient returns a client for the Doctorordersheet from the given config.
func NewDoctorordersheetClient(c config) *DoctorordersheetClient {
	return &DoctorordersheetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctorordersheet.Hooks(f(g(h())))`.
func (c *DoctorordersheetClient) Use(hooks ...Hook) {
	c.hooks.Doctorordersheet = append(c.hooks.Doctorordersheet, hooks...)
}

// Create returns a create builder for Doctorordersheet.
func (c *DoctorordersheetClient) Create() *DoctorordersheetCreate {
	mutation := newDoctorordersheetMutation(c.config, OpCreate)
	return &DoctorordersheetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Doctorordersheet entities.
func (c *DoctorordersheetClient) CreateBulk(builders ...*DoctorordersheetCreate) *DoctorordersheetCreateBulk {
	return &DoctorordersheetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Doctorordersheet.
func (c *DoctorordersheetClient) Update() *DoctorordersheetUpdate {
	mutation := newDoctorordersheetMutation(c.config, OpUpdate)
	return &DoctorordersheetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorordersheetClient) UpdateOne(d *Doctorordersheet) *DoctorordersheetUpdateOne {
	mutation := newDoctorordersheetMutation(c.config, OpUpdateOne, withDoctorordersheet(d))
	return &DoctorordersheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorordersheetClient) UpdateOneID(id int) *DoctorordersheetUpdateOne {
	mutation := newDoctorordersheetMutation(c.config, OpUpdateOne, withDoctorordersheetID(id))
	return &DoctorordersheetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctorordersheet.
func (c *DoctorordersheetClient) Delete() *DoctorordersheetDelete {
	mutation := newDoctorordersheetMutation(c.config, OpDelete)
	return &DoctorordersheetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorordersheetClient) DeleteOne(d *Doctorordersheet) *DoctorordersheetDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorordersheetClient) DeleteOneID(id int) *DoctorordersheetDeleteOne {
	builder := c.Delete().Where(doctorordersheet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorordersheetDeleteOne{builder}
}

// Query returns a query builder for Doctorordersheet.
func (c *DoctorordersheetClient) Query() *DoctorordersheetQuery {
	return &DoctorordersheetQuery{config: c.config}
}

// Get returns a Doctorordersheet entity by its id.
func (c *DoctorordersheetClient) Get(ctx context.Context, id int) (*Doctorordersheet, error) {
	return c.Query().Where(doctorordersheet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorordersheetClient) GetX(ctx context.Context, id int) *Doctorordersheet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecksymptom queries the Checksymptom edge of a Doctorordersheet.
func (c *DoctorordersheetClient) QueryChecksymptom(d *Doctorordersheet) *ChecksymptomQuery {
	query := &ChecksymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctorordersheet.Table, doctorordersheet.FieldID, id),
			sqlgraph.To(checksymptom.Table, checksymptom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctorordersheet.ChecksymptomTable, doctorordersheet.ChecksymptomColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorordersheetClient) Hooks() []Hook {
	return c.hooks.Doctorordersheet
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Patient entities.
func (c *PatientClient) CreateBulk(builders ...*PatientCreate) *PatientCreateBulk {
	return &PatientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Query returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Patient.
func (c *PatientClient) QueryPhysicaltherapyrecord(pa *Patient) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PhysicaltherapyrecordTable, patient.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBonedisease queries the Bonedisease edge of a Patient.
func (c *PatientClient) QueryBonedisease(pa *Patient) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.BonediseaseTable, patient.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChecksymptom queries the Checksymptom edge of a Patient.
func (c *PatientClient) QueryChecksymptom(pa *Patient) *ChecksymptomQuery {
	query := &ChecksymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(checksymptom.Table, checksymptom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.ChecksymptomTable, patient.ChecksymptomColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDentalappointment queries the Dentalappointment edge of a Patient.
func (c *PatientClient) QueryDentalappointment(pa *Patient) *DentalappointmentQuery {
	query := &DentalappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(dentalappointment.Table, dentalappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.DentalappointmentTable, patient.DentalappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAntenatalinformation queries the Antenatalinformation edge of a Patient.
func (c *PatientClient) QueryAntenatalinformation(pa *Patient) *AntenatalinformationQuery {
	query := &AntenatalinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(antenatalinformation.Table, antenatalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.AntenatalinformationTable, patient.AntenatalinformationColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurgeryappointment queries the Surgeryappointment edge of a Patient.
func (c *PatientClient) QuerySurgeryappointment(pa *Patient) *SurgeryappointmentQuery {
	query := &SurgeryappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(surgeryappointment.Table, surgeryappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.SurgeryappointmentTable, patient.SurgeryappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PersonnelClient is a client for the Personnel schema.
type PersonnelClient struct {
	config
}

// NewPersonnelClient returns a client for the Personnel from the given config.
func NewPersonnelClient(c config) *PersonnelClient {
	return &PersonnelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personnel.Hooks(f(g(h())))`.
func (c *PersonnelClient) Use(hooks ...Hook) {
	c.hooks.Personnel = append(c.hooks.Personnel, hooks...)
}

// Create returns a create builder for Personnel.
func (c *PersonnelClient) Create() *PersonnelCreate {
	mutation := newPersonnelMutation(c.config, OpCreate)
	return &PersonnelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Personnel entities.
func (c *PersonnelClient) CreateBulk(builders ...*PersonnelCreate) *PersonnelCreateBulk {
	return &PersonnelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Personnel.
func (c *PersonnelClient) Update() *PersonnelUpdate {
	mutation := newPersonnelMutation(c.config, OpUpdate)
	return &PersonnelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonnelClient) UpdateOne(pe *Personnel) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnel(pe))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonnelClient) UpdateOneID(id int) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnelID(id))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Personnel.
func (c *PersonnelClient) Delete() *PersonnelDelete {
	mutation := newPersonnelMutation(c.config, OpDelete)
	return &PersonnelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonnelClient) DeleteOne(pe *Personnel) *PersonnelDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonnelClient) DeleteOneID(id int) *PersonnelDeleteOne {
	builder := c.Delete().Where(personnel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonnelDeleteOne{builder}
}

// Query returns a query builder for Personnel.
func (c *PersonnelClient) Query() *PersonnelQuery {
	return &PersonnelQuery{config: c.config}
}

// Get returns a Personnel entity by its id.
func (c *PersonnelClient) Get(ctx context.Context, id int) (*Personnel, error) {
	return c.Query().Where(personnel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonnelClient) GetX(ctx context.Context, id int) *Personnel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Personnel.
func (c *PersonnelClient) QueryPhysicaltherapyrecord(pe *Personnel) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.PhysicaltherapyrecordTable, personnel.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBonedisease queries the Bonedisease edge of a Personnel.
func (c *PersonnelClient) QueryBonedisease(pe *Personnel) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.BonediseaseTable, personnel.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChecksymptom queries the Checksymptom edge of a Personnel.
func (c *PersonnelClient) QueryChecksymptom(pe *Personnel) *ChecksymptomQuery {
	query := &ChecksymptomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(checksymptom.Table, checksymptom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.ChecksymptomTable, personnel.ChecksymptomColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDentalappointment queries the Dentalappointment edge of a Personnel.
func (c *PersonnelClient) QueryDentalappointment(pe *Personnel) *DentalappointmentQuery {
	query := &DentalappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(dentalappointment.Table, dentalappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.DentalappointmentTable, personnel.DentalappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurgeryappointment queries the Surgeryappointment edge of a Personnel.
func (c *PersonnelClient) QuerySurgeryappointment(pe *Personnel) *SurgeryappointmentQuery {
	query := &SurgeryappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(surgeryappointment.Table, surgeryappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.SurgeryappointmentTable, personnel.SurgeryappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAntenatalinformation queries the Antenatalinformation edge of a Personnel.
func (c *PersonnelClient) QueryAntenatalinformation(pe *Personnel) *AntenatalinformationQuery {
	query := &AntenatalinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(antenatalinformation.Table, antenatalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.AntenatalinformationTable, personnel.AntenatalinformationColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonnelClient) Hooks() []Hook {
	return c.hooks.Personnel
}

// PhysicaltherapyrecordClient is a client for the Physicaltherapyrecord schema.
type PhysicaltherapyrecordClient struct {
	config
}

// NewPhysicaltherapyrecordClient returns a client for the Physicaltherapyrecord from the given config.
func NewPhysicaltherapyrecordClient(c config) *PhysicaltherapyrecordClient {
	return &PhysicaltherapyrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physicaltherapyrecord.Hooks(f(g(h())))`.
func (c *PhysicaltherapyrecordClient) Use(hooks ...Hook) {
	c.hooks.Physicaltherapyrecord = append(c.hooks.Physicaltherapyrecord, hooks...)
}

// Create returns a create builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Create() *PhysicaltherapyrecordCreate {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpCreate)
	return &PhysicaltherapyrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Physicaltherapyrecord entities.
func (c *PhysicaltherapyrecordClient) CreateBulk(builders ...*PhysicaltherapyrecordCreate) *PhysicaltherapyrecordCreateBulk {
	return &PhysicaltherapyrecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Update() *PhysicaltherapyrecordUpdate {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdate)
	return &PhysicaltherapyrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicaltherapyrecordClient) UpdateOne(ph *Physicaltherapyrecord) *PhysicaltherapyrecordUpdateOne {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdateOne, withPhysicaltherapyrecord(ph))
	return &PhysicaltherapyrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicaltherapyrecordClient) UpdateOneID(id int) *PhysicaltherapyrecordUpdateOne {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpUpdateOne, withPhysicaltherapyrecordID(id))
	return &PhysicaltherapyrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Delete() *PhysicaltherapyrecordDelete {
	mutation := newPhysicaltherapyrecordMutation(c.config, OpDelete)
	return &PhysicaltherapyrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicaltherapyrecordClient) DeleteOne(ph *Physicaltherapyrecord) *PhysicaltherapyrecordDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicaltherapyrecordClient) DeleteOneID(id int) *PhysicaltherapyrecordDeleteOne {
	builder := c.Delete().Where(physicaltherapyrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicaltherapyrecordDeleteOne{builder}
}

// Query returns a query builder for Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) Query() *PhysicaltherapyrecordQuery {
	return &PhysicaltherapyrecordQuery{config: c.config}
}

// Get returns a Physicaltherapyrecord entity by its id.
func (c *PhysicaltherapyrecordClient) Get(ctx context.Context, id int) (*Physicaltherapyrecord, error) {
	return c.Query().Where(physicaltherapyrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicaltherapyrecordClient) GetX(ctx context.Context, id int) *Physicaltherapyrecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the personnel edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPersonnel(ph *Physicaltherapyrecord) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.PersonnelTable, physicaltherapyrecord.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPatient(ph *Physicaltherapyrecord) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.PatientTable, physicaltherapyrecord.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhysicaltherapyroom queries the physicaltherapyroom edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryPhysicaltherapyroom(ph *Physicaltherapyrecord) *PhysicaltherapyroomQuery {
	query := &PhysicaltherapyroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(physicaltherapyroom.Table, physicaltherapyroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.PhysicaltherapyroomTable, physicaltherapyrecord.PhysicaltherapyroomColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a Physicaltherapyrecord.
func (c *PhysicaltherapyrecordClient) QueryStatus(ph *Physicaltherapyrecord) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, physicaltherapyrecord.StatusTable, physicaltherapyrecord.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicaltherapyrecordClient) Hooks() []Hook {
	return c.hooks.Physicaltherapyrecord
}

// PhysicaltherapyroomClient is a client for the Physicaltherapyroom schema.
type PhysicaltherapyroomClient struct {
	config
}

// NewPhysicaltherapyroomClient returns a client for the Physicaltherapyroom from the given config.
func NewPhysicaltherapyroomClient(c config) *PhysicaltherapyroomClient {
	return &PhysicaltherapyroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physicaltherapyroom.Hooks(f(g(h())))`.
func (c *PhysicaltherapyroomClient) Use(hooks ...Hook) {
	c.hooks.Physicaltherapyroom = append(c.hooks.Physicaltherapyroom, hooks...)
}

// Create returns a create builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Create() *PhysicaltherapyroomCreate {
	mutation := newPhysicaltherapyroomMutation(c.config, OpCreate)
	return &PhysicaltherapyroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Physicaltherapyroom entities.
func (c *PhysicaltherapyroomClient) CreateBulk(builders ...*PhysicaltherapyroomCreate) *PhysicaltherapyroomCreateBulk {
	return &PhysicaltherapyroomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Update() *PhysicaltherapyroomUpdate {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdate)
	return &PhysicaltherapyroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicaltherapyroomClient) UpdateOne(ph *Physicaltherapyroom) *PhysicaltherapyroomUpdateOne {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdateOne, withPhysicaltherapyroom(ph))
	return &PhysicaltherapyroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicaltherapyroomClient) UpdateOneID(id int) *PhysicaltherapyroomUpdateOne {
	mutation := newPhysicaltherapyroomMutation(c.config, OpUpdateOne, withPhysicaltherapyroomID(id))
	return &PhysicaltherapyroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Delete() *PhysicaltherapyroomDelete {
	mutation := newPhysicaltherapyroomMutation(c.config, OpDelete)
	return &PhysicaltherapyroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicaltherapyroomClient) DeleteOne(ph *Physicaltherapyroom) *PhysicaltherapyroomDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicaltherapyroomClient) DeleteOneID(id int) *PhysicaltherapyroomDeleteOne {
	builder := c.Delete().Where(physicaltherapyroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicaltherapyroomDeleteOne{builder}
}

// Query returns a query builder for Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) Query() *PhysicaltherapyroomQuery {
	return &PhysicaltherapyroomQuery{config: c.config}
}

// Get returns a Physicaltherapyroom entity by its id.
func (c *PhysicaltherapyroomClient) Get(ctx context.Context, id int) (*Physicaltherapyroom, error) {
	return c.Query().Where(physicaltherapyroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicaltherapyroomClient) GetX(ctx context.Context, id int) *Physicaltherapyroom {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Physicaltherapyroom.
func (c *PhysicaltherapyroomClient) QueryPhysicaltherapyrecord(ph *Physicaltherapyroom) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physicaltherapyroom.Table, physicaltherapyroom.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, physicaltherapyroom.PhysicaltherapyrecordTable, physicaltherapyroom.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicaltherapyroomClient) Hooks() []Hook {
	return c.hooks.Physicaltherapyroom
}

// PregnancystatusClient is a client for the Pregnancystatus schema.
type PregnancystatusClient struct {
	config
}

// NewPregnancystatusClient returns a client for the Pregnancystatus from the given config.
func NewPregnancystatusClient(c config) *PregnancystatusClient {
	return &PregnancystatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pregnancystatus.Hooks(f(g(h())))`.
func (c *PregnancystatusClient) Use(hooks ...Hook) {
	c.hooks.Pregnancystatus = append(c.hooks.Pregnancystatus, hooks...)
}

// Create returns a create builder for Pregnancystatus.
func (c *PregnancystatusClient) Create() *PregnancystatusCreate {
	mutation := newPregnancystatusMutation(c.config, OpCreate)
	return &PregnancystatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pregnancystatus entities.
func (c *PregnancystatusClient) CreateBulk(builders ...*PregnancystatusCreate) *PregnancystatusCreateBulk {
	return &PregnancystatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pregnancystatus.
func (c *PregnancystatusClient) Update() *PregnancystatusUpdate {
	mutation := newPregnancystatusMutation(c.config, OpUpdate)
	return &PregnancystatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PregnancystatusClient) UpdateOne(pr *Pregnancystatus) *PregnancystatusUpdateOne {
	mutation := newPregnancystatusMutation(c.config, OpUpdateOne, withPregnancystatus(pr))
	return &PregnancystatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PregnancystatusClient) UpdateOneID(id int) *PregnancystatusUpdateOne {
	mutation := newPregnancystatusMutation(c.config, OpUpdateOne, withPregnancystatusID(id))
	return &PregnancystatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pregnancystatus.
func (c *PregnancystatusClient) Delete() *PregnancystatusDelete {
	mutation := newPregnancystatusMutation(c.config, OpDelete)
	return &PregnancystatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PregnancystatusClient) DeleteOne(pr *Pregnancystatus) *PregnancystatusDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PregnancystatusClient) DeleteOneID(id int) *PregnancystatusDeleteOne {
	builder := c.Delete().Where(pregnancystatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PregnancystatusDeleteOne{builder}
}

// Query returns a query builder for Pregnancystatus.
func (c *PregnancystatusClient) Query() *PregnancystatusQuery {
	return &PregnancystatusQuery{config: c.config}
}

// Get returns a Pregnancystatus entity by its id.
func (c *PregnancystatusClient) Get(ctx context.Context, id int) (*Pregnancystatus, error) {
	return c.Query().Where(pregnancystatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PregnancystatusClient) GetX(ctx context.Context, id int) *Pregnancystatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAntenatalinformation queries the Antenatalinformation edge of a Pregnancystatus.
func (c *PregnancystatusClient) QueryAntenatalinformation(pr *Pregnancystatus) *AntenatalinformationQuery {
	query := &AntenatalinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pregnancystatus.Table, pregnancystatus.FieldID, id),
			sqlgraph.To(antenatalinformation.Table, antenatalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pregnancystatus.AntenatalinformationTable, pregnancystatus.AntenatalinformationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PregnancystatusClient) Hooks() []Hook {
	return c.hooks.Pregnancystatus
}

// RemedyClient is a client for the Remedy schema.
type RemedyClient struct {
	config
}

// NewRemedyClient returns a client for the Remedy from the given config.
func NewRemedyClient(c config) *RemedyClient {
	return &RemedyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `remedy.Hooks(f(g(h())))`.
func (c *RemedyClient) Use(hooks ...Hook) {
	c.hooks.Remedy = append(c.hooks.Remedy, hooks...)
}

// Create returns a create builder for Remedy.
func (c *RemedyClient) Create() *RemedyCreate {
	mutation := newRemedyMutation(c.config, OpCreate)
	return &RemedyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Remedy entities.
func (c *RemedyClient) CreateBulk(builders ...*RemedyCreate) *RemedyCreateBulk {
	return &RemedyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Remedy.
func (c *RemedyClient) Update() *RemedyUpdate {
	mutation := newRemedyMutation(c.config, OpUpdate)
	return &RemedyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RemedyClient) UpdateOne(r *Remedy) *RemedyUpdateOne {
	mutation := newRemedyMutation(c.config, OpUpdateOne, withRemedy(r))
	return &RemedyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RemedyClient) UpdateOneID(id int) *RemedyUpdateOne {
	mutation := newRemedyMutation(c.config, OpUpdateOne, withRemedyID(id))
	return &RemedyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Remedy.
func (c *RemedyClient) Delete() *RemedyDelete {
	mutation := newRemedyMutation(c.config, OpDelete)
	return &RemedyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RemedyClient) DeleteOne(r *Remedy) *RemedyDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RemedyClient) DeleteOneID(id int) *RemedyDeleteOne {
	builder := c.Delete().Where(remedy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RemedyDeleteOne{builder}
}

// Query returns a query builder for Remedy.
func (c *RemedyClient) Query() *RemedyQuery {
	return &RemedyQuery{config: c.config}
}

// Get returns a Remedy entity by its id.
func (c *RemedyClient) Get(ctx context.Context, id int) (*Remedy, error) {
	return c.Query().Where(remedy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RemedyClient) GetX(ctx context.Context, id int) *Remedy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBonedisease queries the Bonedisease edge of a Remedy.
func (c *RemedyClient) QueryBonedisease(r *Remedy) *BonediseaseQuery {
	query := &BonediseaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(remedy.Table, remedy.FieldID, id),
			sqlgraph.To(bonedisease.Table, bonedisease.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, remedy.BonediseaseTable, remedy.BonediseaseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RemedyClient) Hooks() []Hook {
	return c.hooks.Remedy
}

// RisksClient is a client for the Risks schema.
type RisksClient struct {
	config
}

// NewRisksClient returns a client for the Risks from the given config.
func NewRisksClient(c config) *RisksClient {
	return &RisksClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `risks.Hooks(f(g(h())))`.
func (c *RisksClient) Use(hooks ...Hook) {
	c.hooks.Risks = append(c.hooks.Risks, hooks...)
}

// Create returns a create builder for Risks.
func (c *RisksClient) Create() *RisksCreate {
	mutation := newRisksMutation(c.config, OpCreate)
	return &RisksCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Risks entities.
func (c *RisksClient) CreateBulk(builders ...*RisksCreate) *RisksCreateBulk {
	return &RisksCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Risks.
func (c *RisksClient) Update() *RisksUpdate {
	mutation := newRisksMutation(c.config, OpUpdate)
	return &RisksUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RisksClient) UpdateOne(r *Risks) *RisksUpdateOne {
	mutation := newRisksMutation(c.config, OpUpdateOne, withRisks(r))
	return &RisksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RisksClient) UpdateOneID(id int) *RisksUpdateOne {
	mutation := newRisksMutation(c.config, OpUpdateOne, withRisksID(id))
	return &RisksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Risks.
func (c *RisksClient) Delete() *RisksDelete {
	mutation := newRisksMutation(c.config, OpDelete)
	return &RisksDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RisksClient) DeleteOne(r *Risks) *RisksDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RisksClient) DeleteOneID(id int) *RisksDeleteOne {
	builder := c.Delete().Where(risks.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RisksDeleteOne{builder}
}

// Query returns a query builder for Risks.
func (c *RisksClient) Query() *RisksQuery {
	return &RisksQuery{config: c.config}
}

// Get returns a Risks entity by its id.
func (c *RisksClient) Get(ctx context.Context, id int) (*Risks, error) {
	return c.Query().Where(risks.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RisksClient) GetX(ctx context.Context, id int) *Risks {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAntenatalinformation queries the Antenatalinformation edge of a Risks.
func (c *RisksClient) QueryAntenatalinformation(r *Risks) *AntenatalinformationQuery {
	query := &AntenatalinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(risks.Table, risks.FieldID, id),
			sqlgraph.To(antenatalinformation.Table, antenatalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, risks.AntenatalinformationTable, risks.AntenatalinformationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RisksClient) Hooks() []Hook {
	return c.hooks.Risks
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Create returns a create builder for Status.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Status entities.
func (c *StatusClient) CreateBulk(builders ...*StatusCreate) *StatusCreateBulk {
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id int) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusClient) DeleteOneID(id int) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Query returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{config: c.config}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id int) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id int) *Status {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPhysicaltherapyrecord queries the physicaltherapyrecord edge of a Status.
func (c *StatusClient) QueryPhysicaltherapyrecord(s *Status) *PhysicaltherapyrecordQuery {
	query := &PhysicaltherapyrecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(physicaltherapyrecord.Table, physicaltherapyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, status.PhysicaltherapyrecordTable, status.PhysicaltherapyrecordColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// SurgeryappointmentClient is a client for the Surgeryappointment schema.
type SurgeryappointmentClient struct {
	config
}

// NewSurgeryappointmentClient returns a client for the Surgeryappointment from the given config.
func NewSurgeryappointmentClient(c config) *SurgeryappointmentClient {
	return &SurgeryappointmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surgeryappointment.Hooks(f(g(h())))`.
func (c *SurgeryappointmentClient) Use(hooks ...Hook) {
	c.hooks.Surgeryappointment = append(c.hooks.Surgeryappointment, hooks...)
}

// Create returns a create builder for Surgeryappointment.
func (c *SurgeryappointmentClient) Create() *SurgeryappointmentCreate {
	mutation := newSurgeryappointmentMutation(c.config, OpCreate)
	return &SurgeryappointmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Surgeryappointment entities.
func (c *SurgeryappointmentClient) CreateBulk(builders ...*SurgeryappointmentCreate) *SurgeryappointmentCreateBulk {
	return &SurgeryappointmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Surgeryappointment.
func (c *SurgeryappointmentClient) Update() *SurgeryappointmentUpdate {
	mutation := newSurgeryappointmentMutation(c.config, OpUpdate)
	return &SurgeryappointmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurgeryappointmentClient) UpdateOne(s *Surgeryappointment) *SurgeryappointmentUpdateOne {
	mutation := newSurgeryappointmentMutation(c.config, OpUpdateOne, withSurgeryappointment(s))
	return &SurgeryappointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurgeryappointmentClient) UpdateOneID(id int) *SurgeryappointmentUpdateOne {
	mutation := newSurgeryappointmentMutation(c.config, OpUpdateOne, withSurgeryappointmentID(id))
	return &SurgeryappointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Surgeryappointment.
func (c *SurgeryappointmentClient) Delete() *SurgeryappointmentDelete {
	mutation := newSurgeryappointmentMutation(c.config, OpDelete)
	return &SurgeryappointmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurgeryappointmentClient) DeleteOne(s *Surgeryappointment) *SurgeryappointmentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurgeryappointmentClient) DeleteOneID(id int) *SurgeryappointmentDeleteOne {
	builder := c.Delete().Where(surgeryappointment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurgeryappointmentDeleteOne{builder}
}

// Query returns a query builder for Surgeryappointment.
func (c *SurgeryappointmentClient) Query() *SurgeryappointmentQuery {
	return &SurgeryappointmentQuery{config: c.config}
}

// Get returns a Surgeryappointment entity by its id.
func (c *SurgeryappointmentClient) Get(ctx context.Context, id int) (*Surgeryappointment, error) {
	return c.Query().Where(surgeryappointment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurgeryappointmentClient) GetX(ctx context.Context, id int) *Surgeryappointment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the Personnel edge of a Surgeryappointment.
func (c *SurgeryappointmentClient) QueryPersonnel(s *Surgeryappointment) *PersonnelQuery {
	query := &PersonnelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surgeryappointment.Table, surgeryappointment.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surgeryappointment.PersonnelTable, surgeryappointment.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the Patient edge of a Surgeryappointment.
func (c *SurgeryappointmentClient) QueryPatient(s *Surgeryappointment) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surgeryappointment.Table, surgeryappointment.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surgeryappointment.PatientTable, surgeryappointment.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurgerytype queries the Surgerytype edge of a Surgeryappointment.
func (c *SurgeryappointmentClient) QuerySurgerytype(s *Surgeryappointment) *SurgerytypeQuery {
	query := &SurgerytypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surgeryappointment.Table, surgeryappointment.FieldID, id),
			sqlgraph.To(surgerytype.Table, surgerytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surgeryappointment.SurgerytypeTable, surgeryappointment.SurgerytypeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurgeryappointmentClient) Hooks() []Hook {
	return c.hooks.Surgeryappointment
}

// SurgerytypeClient is a client for the Surgerytype schema.
type SurgerytypeClient struct {
	config
}

// NewSurgerytypeClient returns a client for the Surgerytype from the given config.
func NewSurgerytypeClient(c config) *SurgerytypeClient {
	return &SurgerytypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surgerytype.Hooks(f(g(h())))`.
func (c *SurgerytypeClient) Use(hooks ...Hook) {
	c.hooks.Surgerytype = append(c.hooks.Surgerytype, hooks...)
}

// Create returns a create builder for Surgerytype.
func (c *SurgerytypeClient) Create() *SurgerytypeCreate {
	mutation := newSurgerytypeMutation(c.config, OpCreate)
	return &SurgerytypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Surgerytype entities.
func (c *SurgerytypeClient) CreateBulk(builders ...*SurgerytypeCreate) *SurgerytypeCreateBulk {
	return &SurgerytypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Surgerytype.
func (c *SurgerytypeClient) Update() *SurgerytypeUpdate {
	mutation := newSurgerytypeMutation(c.config, OpUpdate)
	return &SurgerytypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurgerytypeClient) UpdateOne(s *Surgerytype) *SurgerytypeUpdateOne {
	mutation := newSurgerytypeMutation(c.config, OpUpdateOne, withSurgerytype(s))
	return &SurgerytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurgerytypeClient) UpdateOneID(id int) *SurgerytypeUpdateOne {
	mutation := newSurgerytypeMutation(c.config, OpUpdateOne, withSurgerytypeID(id))
	return &SurgerytypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Surgerytype.
func (c *SurgerytypeClient) Delete() *SurgerytypeDelete {
	mutation := newSurgerytypeMutation(c.config, OpDelete)
	return &SurgerytypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurgerytypeClient) DeleteOne(s *Surgerytype) *SurgerytypeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurgerytypeClient) DeleteOneID(id int) *SurgerytypeDeleteOne {
	builder := c.Delete().Where(surgerytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurgerytypeDeleteOne{builder}
}

// Query returns a query builder for Surgerytype.
func (c *SurgerytypeClient) Query() *SurgerytypeQuery {
	return &SurgerytypeQuery{config: c.config}
}

// Get returns a Surgerytype entity by its id.
func (c *SurgerytypeClient) Get(ctx context.Context, id int) (*Surgerytype, error) {
	return c.Query().Where(surgerytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurgerytypeClient) GetX(ctx context.Context, id int) *Surgerytype {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurgeryappointment queries the Surgeryappointment edge of a Surgerytype.
func (c *SurgerytypeClient) QuerySurgeryappointment(s *Surgerytype) *SurgeryappointmentQuery {
	query := &SurgeryappointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surgerytype.Table, surgerytype.FieldID, id),
			sqlgraph.To(surgeryappointment.Table, surgeryappointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, surgerytype.SurgeryappointmentTable, surgerytype.SurgeryappointmentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurgerytypeClient) Hooks() []Hook {
	return c.hooks.Surgerytype
}
