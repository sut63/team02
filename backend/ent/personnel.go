// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/department"
	"github.com/to63/app/ent/personnel"
)

// Personnel is the model entity for the Personnel schema.
type Personnel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonnelQuery when eager-loading is set.
	Edges       PersonnelEdges `json:"edges"`
	_Department *int
}

// PersonnelEdges holds the relations/edges for other nodes in the graph.
type PersonnelEdges struct {
	// Physicaltherapyrecord holds the value of the physicaltherapyrecord edge.
	Physicaltherapyrecord []*Physicaltherapyrecord
	// Bonedisease holds the value of the Bonedisease edge.
	Bonedisease []*Bonedisease
	// Checksymptom holds the value of the Checksymptom edge.
	Checksymptom []*Checksymptom
	// Dentalappointment holds the value of the Dentalappointment edge.
	Dentalappointment []*Dentalappointment
	// Surgeryappointment holds the value of the Surgeryappointment edge.
	Surgeryappointment []*Surgeryappointment
	// Antenatalinformation holds the value of the Antenatalinformation edge.
	Antenatalinformation []*Antenatalinformation
	// Department holds the value of the Department edge.
	Department *Department
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// PhysicaltherapyrecordOrErr returns the Physicaltherapyrecord value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) PhysicaltherapyrecordOrErr() ([]*Physicaltherapyrecord, error) {
	if e.loadedTypes[0] {
		return e.Physicaltherapyrecord, nil
	}
	return nil, &NotLoadedError{edge: "physicaltherapyrecord"}
}

// BonediseaseOrErr returns the Bonedisease value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) BonediseaseOrErr() ([]*Bonedisease, error) {
	if e.loadedTypes[1] {
		return e.Bonedisease, nil
	}
	return nil, &NotLoadedError{edge: "Bonedisease"}
}

// ChecksymptomOrErr returns the Checksymptom value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) ChecksymptomOrErr() ([]*Checksymptom, error) {
	if e.loadedTypes[2] {
		return e.Checksymptom, nil
	}
	return nil, &NotLoadedError{edge: "Checksymptom"}
}

// DentalappointmentOrErr returns the Dentalappointment value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) DentalappointmentOrErr() ([]*Dentalappointment, error) {
	if e.loadedTypes[3] {
		return e.Dentalappointment, nil
	}
	return nil, &NotLoadedError{edge: "Dentalappointment"}
}

// SurgeryappointmentOrErr returns the Surgeryappointment value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) SurgeryappointmentOrErr() ([]*Surgeryappointment, error) {
	if e.loadedTypes[4] {
		return e.Surgeryappointment, nil
	}
	return nil, &NotLoadedError{edge: "Surgeryappointment"}
}

// AntenatalinformationOrErr returns the Antenatalinformation value or an error if the edge
// was not loaded in eager-loading.
func (e PersonnelEdges) AntenatalinformationOrErr() ([]*Antenatalinformation, error) {
	if e.loadedTypes[5] {
		return e.Antenatalinformation, nil
	}
	return nil, &NotLoadedError{edge: "Antenatalinformation"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonnelEdges) DepartmentOrErr() (*Department, error) {
	if e.loadedTypes[6] {
		if e.Department == nil {
			// The edge Department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Department, nil
	}
	return nil, &NotLoadedError{edge: "Department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Personnel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case personnel.FieldID:
			values[i] = &sql.NullInt64{}
		case personnel.FieldName, personnel.FieldUser, personnel.FieldPassword:
			values[i] = &sql.NullString{}
		case personnel.ForeignKeys[0]: // _Department
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Personnel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Personnel fields.
func (pe *Personnel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personnel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case personnel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case personnel.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				pe.User = value.String
			}
		case personnel.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pe.Password = value.String
			}
		case personnel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Department", value)
			} else if value.Valid {
				pe._Department = new(int)
				*pe._Department = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPhysicaltherapyrecord queries the "physicaltherapyrecord" edge of the Personnel entity.
func (pe *Personnel) QueryPhysicaltherapyrecord() *PhysicaltherapyrecordQuery {
	return (&PersonnelClient{config: pe.config}).QueryPhysicaltherapyrecord(pe)
}

// QueryBonedisease queries the "Bonedisease" edge of the Personnel entity.
func (pe *Personnel) QueryBonedisease() *BonediseaseQuery {
	return (&PersonnelClient{config: pe.config}).QueryBonedisease(pe)
}

// QueryChecksymptom queries the "Checksymptom" edge of the Personnel entity.
func (pe *Personnel) QueryChecksymptom() *ChecksymptomQuery {
	return (&PersonnelClient{config: pe.config}).QueryChecksymptom(pe)
}

// QueryDentalappointment queries the "Dentalappointment" edge of the Personnel entity.
func (pe *Personnel) QueryDentalappointment() *DentalappointmentQuery {
	return (&PersonnelClient{config: pe.config}).QueryDentalappointment(pe)
}

// QuerySurgeryappointment queries the "Surgeryappointment" edge of the Personnel entity.
func (pe *Personnel) QuerySurgeryappointment() *SurgeryappointmentQuery {
	return (&PersonnelClient{config: pe.config}).QuerySurgeryappointment(pe)
}

// QueryAntenatalinformation queries the "Antenatalinformation" edge of the Personnel entity.
func (pe *Personnel) QueryAntenatalinformation() *AntenatalinformationQuery {
	return (&PersonnelClient{config: pe.config}).QueryAntenatalinformation(pe)
}

// QueryDepartment queries the "Department" edge of the Personnel entity.
func (pe *Personnel) QueryDepartment() *DepartmentQuery {
	return (&PersonnelClient{config: pe.config}).QueryDepartment(pe)
}

// Update returns a builder for updating this Personnel.
// Note that you need to call Personnel.Unwrap() before calling this method if this Personnel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Personnel) Update() *PersonnelUpdateOne {
	return (&PersonnelClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the Personnel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Personnel) Unwrap() *Personnel {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Personnel is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Personnel) String() string {
	var builder strings.Builder
	builder.WriteString("Personnel(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", user=")
	builder.WriteString(pe.User)
	builder.WriteString(", password=")
	builder.WriteString(pe.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Personnels is a parsable slice of Personnel.
type Personnels []*Personnel

func (pe Personnels) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
