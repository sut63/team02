// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/checksymptoms"
	"github.com/to63/app/ent/disease"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
)

// ChecksymptomsCreate is the builder for creating a Checksymptoms entity.
type ChecksymptomsCreate struct {
	config
	mutation *ChecksymptomsMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (cc *ChecksymptomsCreate) SetDate(t time.Time) *ChecksymptomsCreate {
	cc.mutation.SetDate(t)
	return cc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (cc *ChecksymptomsCreate) SetNillableDate(t *time.Time) *ChecksymptomsCreate {
	if t != nil {
		cc.SetDate(*t)
	}
	return cc
}

// SetDiseaseID sets the "disease" edge to the Disease entity by ID.
func (cc *ChecksymptomsCreate) SetDiseaseID(id int) *ChecksymptomsCreate {
	cc.mutation.SetDiseaseID(id)
	return cc
}

// SetNillableDiseaseID sets the "disease" edge to the Disease entity by ID if the given value is not nil.
func (cc *ChecksymptomsCreate) SetNillableDiseaseID(id *int) *ChecksymptomsCreate {
	if id != nil {
		cc = cc.SetDiseaseID(*id)
	}
	return cc
}

// SetDisease sets the "disease" edge to the Disease entity.
func (cc *ChecksymptomsCreate) SetDisease(d *Disease) *ChecksymptomsCreate {
	return cc.SetDiseaseID(d.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (cc *ChecksymptomsCreate) SetPatientID(id int) *ChecksymptomsCreate {
	cc.mutation.SetPatientID(id)
	return cc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (cc *ChecksymptomsCreate) SetNillablePatientID(id *int) *ChecksymptomsCreate {
	if id != nil {
		cc = cc.SetPatientID(*id)
	}
	return cc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cc *ChecksymptomsCreate) SetPatient(p *Patient) *ChecksymptomsCreate {
	return cc.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (cc *ChecksymptomsCreate) SetPersonnelID(id int) *ChecksymptomsCreate {
	cc.mutation.SetPersonnelID(id)
	return cc
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (cc *ChecksymptomsCreate) SetNillablePersonnelID(id *int) *ChecksymptomsCreate {
	if id != nil {
		cc = cc.SetPersonnelID(*id)
	}
	return cc
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (cc *ChecksymptomsCreate) SetPersonnel(p *Personnel) *ChecksymptomsCreate {
	return cc.SetPersonnelID(p.ID)
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID.
func (cc *ChecksymptomsCreate) SetDoctorordersheetID(id int) *ChecksymptomsCreate {
	cc.mutation.SetDoctorordersheetID(id)
	return cc
}

// SetNillableDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID if the given value is not nil.
func (cc *ChecksymptomsCreate) SetNillableDoctorordersheetID(id *int) *ChecksymptomsCreate {
	if id != nil {
		cc = cc.SetDoctorordersheetID(*id)
	}
	return cc
}

// SetDoctorordersheet sets the "doctorordersheet" edge to the DoctorOrderSheet entity.
func (cc *ChecksymptomsCreate) SetDoctorordersheet(d *DoctorOrderSheet) *ChecksymptomsCreate {
	return cc.SetDoctorordersheetID(d.ID)
}

// Mutation returns the ChecksymptomsMutation object of the builder.
func (cc *ChecksymptomsCreate) Mutation() *ChecksymptomsMutation {
	return cc.mutation
}

// Save creates the Checksymptoms in the database.
func (cc *ChecksymptomsCreate) Save(ctx context.Context) (*Checksymptoms, error) {
	var (
		err  error
		node *Checksymptoms
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChecksymptomsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChecksymptomsCreate) SaveX(ctx context.Context) *Checksymptoms {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *ChecksymptomsCreate) defaults() {
	if _, ok := cc.mutation.Date(); !ok {
		v := checksymptoms.DefaultDate()
		cc.mutation.SetDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChecksymptomsCreate) check() error {
	if _, ok := cc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	return nil
}

func (cc *ChecksymptomsCreate) sqlSave(ctx context.Context) (*Checksymptoms, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ChecksymptomsCreate) createSpec() (*Checksymptoms, *sqlgraph.CreateSpec) {
	var (
		_node = &Checksymptoms{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checksymptoms.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checksymptoms.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checksymptoms.FieldDate,
		})
		_node.Date = value
	}
	if nodes := cc.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DiseaseTable,
			Columns: []string{checksymptoms.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PatientTable,
			Columns: []string{checksymptoms.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PersonnelTable,
			Columns: []string{checksymptoms.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DoctorordersheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DoctorordersheetTable,
			Columns: []string{checksymptoms.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChecksymptomsCreateBulk is the builder for creating many Checksymptoms entities in bulk.
type ChecksymptomsCreateBulk struct {
	config
	builders []*ChecksymptomsCreate
}

// Save creates the Checksymptoms entities in the database.
func (ccb *ChecksymptomsCreateBulk) Save(ctx context.Context) ([]*Checksymptoms, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Checksymptoms, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChecksymptomsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChecksymptomsCreateBulk) SaveX(ctx context.Context) []*Checksymptoms {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
