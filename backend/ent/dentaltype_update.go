// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/dentaltype"
	"github.com/to63/app/ent/predicate"
)

// DentaltypeUpdate is the builder for updating Dentaltype entities.
type DentaltypeUpdate struct {
	config
	hooks    []Hook
	mutation *DentaltypeMutation
}

// Where adds a new predicate for the DentaltypeUpdate builder.
func (du *DentaltypeUpdate) Where(ps ...predicate.Dentaltype) *DentaltypeUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetTypename sets the "typename" field.
func (du *DentaltypeUpdate) SetTypename(s string) *DentaltypeUpdate {
	du.mutation.SetTypename(s)
	return du
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (du *DentaltypeUpdate) AddDentalappointmentIDs(ids ...int) *DentaltypeUpdate {
	du.mutation.AddDentalappointmentIDs(ids...)
	return du
}

// AddDentalappointment adds the "Dentalappointment" edges to the Dentalappointment entity.
func (du *DentaltypeUpdate) AddDentalappointment(d ...*Dentalappointment) *DentaltypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDentalappointmentIDs(ids...)
}

// Mutation returns the DentaltypeMutation object of the builder.
func (du *DentaltypeUpdate) Mutation() *DentaltypeMutation {
	return du.mutation
}

// ClearDentalappointment clears all "Dentalappointment" edges to the Dentalappointment entity.
func (du *DentaltypeUpdate) ClearDentalappointment() *DentaltypeUpdate {
	du.mutation.ClearDentalappointment()
	return du
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to Dentalappointment entities by IDs.
func (du *DentaltypeUpdate) RemoveDentalappointmentIDs(ids ...int) *DentaltypeUpdate {
	du.mutation.RemoveDentalappointmentIDs(ids...)
	return du
}

// RemoveDentalappointment removes "Dentalappointment" edges to Dentalappointment entities.
func (du *DentaltypeUpdate) RemoveDentalappointment(d ...*Dentalappointment) *DentaltypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDentalappointmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DentaltypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentaltypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DentaltypeUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DentaltypeUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DentaltypeUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DentaltypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentaltype.Table,
			Columns: dentaltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentaltype.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Typename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentaltype.FieldTypename,
		})
	}
	if du.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDentalappointmentIDs(); len(nodes) > 0 && !du.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DentalappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentaltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DentaltypeUpdateOne is the builder for updating a single Dentaltype entity.
type DentaltypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *DentaltypeMutation
}

// SetTypename sets the "typename" field.
func (duo *DentaltypeUpdateOne) SetTypename(s string) *DentaltypeUpdateOne {
	duo.mutation.SetTypename(s)
	return duo
}

// AddDentalappointmentIDs adds the "Dentalappointment" edge to the Dentalappointment entity by IDs.
func (duo *DentaltypeUpdateOne) AddDentalappointmentIDs(ids ...int) *DentaltypeUpdateOne {
	duo.mutation.AddDentalappointmentIDs(ids...)
	return duo
}

// AddDentalappointment adds the "Dentalappointment" edges to the Dentalappointment entity.
func (duo *DentaltypeUpdateOne) AddDentalappointment(d ...*Dentalappointment) *DentaltypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDentalappointmentIDs(ids...)
}

// Mutation returns the DentaltypeMutation object of the builder.
func (duo *DentaltypeUpdateOne) Mutation() *DentaltypeMutation {
	return duo.mutation
}

// ClearDentalappointment clears all "Dentalappointment" edges to the Dentalappointment entity.
func (duo *DentaltypeUpdateOne) ClearDentalappointment() *DentaltypeUpdateOne {
	duo.mutation.ClearDentalappointment()
	return duo
}

// RemoveDentalappointmentIDs removes the "Dentalappointment" edge to Dentalappointment entities by IDs.
func (duo *DentaltypeUpdateOne) RemoveDentalappointmentIDs(ids ...int) *DentaltypeUpdateOne {
	duo.mutation.RemoveDentalappointmentIDs(ids...)
	return duo
}

// RemoveDentalappointment removes "Dentalappointment" edges to Dentalappointment entities.
func (duo *DentaltypeUpdateOne) RemoveDentalappointment(d ...*Dentalappointment) *DentaltypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDentalappointmentIDs(ids...)
}

// Save executes the query and returns the updated Dentaltype entity.
func (duo *DentaltypeUpdateOne) Save(ctx context.Context) (*Dentaltype, error) {
	var (
		err  error
		node *Dentaltype
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentaltypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DentaltypeUpdateOne) SaveX(ctx context.Context) *Dentaltype {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DentaltypeUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DentaltypeUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DentaltypeUpdateOne) sqlSave(ctx context.Context) (_node *Dentaltype, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentaltype.Table,
			Columns: dentaltype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentaltype.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Dentaltype.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Typename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentaltype.FieldTypename,
		})
	}
	if duo.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDentalappointmentIDs(); len(nodes) > 0 && !duo.mutation.DentalappointmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DentalappointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentaltype.DentalappointmentTable,
			Columns: []string{dentaltype.DentalappointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentalappointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dentaltype{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentaltype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
