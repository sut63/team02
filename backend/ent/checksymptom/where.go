// Code generated by entc, DO NOT EDIT.

package checksymptom

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/to63/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// Times applies equality check predicate on the "times" field. It's identical to TimesEQ.
func Times(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// TimesEQ applies the EQ predicate on the "times" field.
func TimesEQ(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimes), v))
	})
}

// TimesNEQ applies the NEQ predicate on the "times" field.
func TimesNEQ(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimes), v))
	})
}

// TimesIn applies the In predicate on the "times" field.
func TimesIn(vs ...string) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimes), v...))
	})
}

// TimesNotIn applies the NotIn predicate on the "times" field.
func TimesNotIn(vs ...string) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimes), v...))
	})
}

// TimesGT applies the GT predicate on the "times" field.
func TimesGT(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimes), v))
	})
}

// TimesGTE applies the GTE predicate on the "times" field.
func TimesGTE(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimes), v))
	})
}

// TimesLT applies the LT predicate on the "times" field.
func TimesLT(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimes), v))
	})
}

// TimesLTE applies the LTE predicate on the "times" field.
func TimesLTE(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimes), v))
	})
}

// TimesContains applies the Contains predicate on the "times" field.
func TimesContains(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimes), v))
	})
}

// TimesHasPrefix applies the HasPrefix predicate on the "times" field.
func TimesHasPrefix(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimes), v))
	})
}

// TimesHasSuffix applies the HasSuffix predicate on the "times" field.
func TimesHasSuffix(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimes), v))
	})
}

// TimesEqualFold applies the EqualFold predicate on the "times" field.
func TimesEqualFold(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimes), v))
	})
}

// TimesContainsFold applies the ContainsFold predicate on the "times" field.
func TimesContainsFold(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimes), v))
	})
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Checksymptom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Checksymptom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonnel applies the HasEdge predicate on the "personnel" edge.
func HasPersonnel() predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonnelWith applies the HasEdge predicate on the "personnel" edge with a given conditions (other predicates).
func HasPersonnelWith(preds ...predicate.Personnel) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctorordersheet applies the HasEdge predicate on the "doctorordersheet" edge.
func HasDoctorordersheet() predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorordersheetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorordersheetTable, DoctorordersheetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorordersheetWith applies the HasEdge predicate on the "doctorordersheet" edge with a given conditions (other predicates).
func HasDoctorordersheetWith(preds ...predicate.Doctorordersheet) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorordersheetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorordersheetTable, DoctorordersheetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Checksymptom) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Checksymptom) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Checksymptom) predicate.Checksymptom {
	return predicate.Checksymptom(func(s *sql.Selector) {
		p(s.Not())
	})
}
