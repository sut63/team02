// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/risks"
)

// AntenatalinformationCreate is the builder for creating a Antenatalinformation entity.
type AntenatalinformationCreate struct {
	config
	mutation *AntenatalinformationMutation
	hooks    []Hook
}

// SetGestationalage sets the "gestationalage" field.
func (ac *AntenatalinformationCreate) SetGestationalage(s string) *AntenatalinformationCreate {
	ac.mutation.SetGestationalage(s)
	return ac
}

// SetAddedTime sets the "added_time" field.
func (ac *AntenatalinformationCreate) SetAddedTime(t time.Time) *AntenatalinformationCreate {
	ac.mutation.SetAddedTime(t)
	return ac
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by ID.
func (ac *AntenatalinformationCreate) SetPersonnelID(id int) *AntenatalinformationCreate {
	ac.mutation.SetPersonnelID(id)
	return ac
}

// SetNillablePersonnelID sets the "Personnel" edge to the Personnel entity by ID if the given value is not nil.
func (ac *AntenatalinformationCreate) SetNillablePersonnelID(id *int) *AntenatalinformationCreate {
	if id != nil {
		ac = ac.SetPersonnelID(*id)
	}
	return ac
}

// SetPersonnel sets the "Personnel" edge to the Personnel entity.
func (ac *AntenatalinformationCreate) SetPersonnel(p *Personnel) *AntenatalinformationCreate {
	return ac.SetPersonnelID(p.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (ac *AntenatalinformationCreate) SetPatientID(id int) *AntenatalinformationCreate {
	ac.mutation.SetPatientID(id)
	return ac
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (ac *AntenatalinformationCreate) SetNillablePatientID(id *int) *AntenatalinformationCreate {
	if id != nil {
		ac = ac.SetPatientID(*id)
	}
	return ac
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (ac *AntenatalinformationCreate) SetPatient(p *Patient) *AntenatalinformationCreate {
	return ac.SetPatientID(p.ID)
}

// SetPregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID.
func (ac *AntenatalinformationCreate) SetPregnancystatusidID(id int) *AntenatalinformationCreate {
	ac.mutation.SetPregnancystatusidID(id)
	return ac
}

// SetNillablePregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID if the given value is not nil.
func (ac *AntenatalinformationCreate) SetNillablePregnancystatusidID(id *int) *AntenatalinformationCreate {
	if id != nil {
		ac = ac.SetPregnancystatusidID(*id)
	}
	return ac
}

// SetPregnancystatusid sets the "Pregnancystatusid" edge to the Pregnancystatus entity.
func (ac *AntenatalinformationCreate) SetPregnancystatusid(p *Pregnancystatus) *AntenatalinformationCreate {
	return ac.SetPregnancystatusidID(p.ID)
}

// SetRisksidID sets the "Risksid" edge to the Risks entity by ID.
func (ac *AntenatalinformationCreate) SetRisksidID(id int) *AntenatalinformationCreate {
	ac.mutation.SetRisksidID(id)
	return ac
}

// SetNillableRisksidID sets the "Risksid" edge to the Risks entity by ID if the given value is not nil.
func (ac *AntenatalinformationCreate) SetNillableRisksidID(id *int) *AntenatalinformationCreate {
	if id != nil {
		ac = ac.SetRisksidID(*id)
	}
	return ac
}

// SetRisksid sets the "Risksid" edge to the Risks entity.
func (ac *AntenatalinformationCreate) SetRisksid(r *Risks) *AntenatalinformationCreate {
	return ac.SetRisksidID(r.ID)
}

// Mutation returns the AntenatalinformationMutation object of the builder.
func (ac *AntenatalinformationCreate) Mutation() *AntenatalinformationMutation {
	return ac.mutation
}

// Save creates the Antenatalinformation in the database.
func (ac *AntenatalinformationCreate) Save(ctx context.Context) (*Antenatalinformation, error) {
	var (
		err  error
		node *Antenatalinformation
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalinformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AntenatalinformationCreate) SaveX(ctx context.Context) *Antenatalinformation {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ac *AntenatalinformationCreate) check() error {
	if _, ok := ac.mutation.Gestationalage(); !ok {
		return &ValidationError{Name: "gestationalage", err: errors.New("ent: missing required field \"gestationalage\"")}
	}
	if v, ok := ac.mutation.Gestationalage(); ok {
		if err := antenatalinformation.GestationalageValidator(v); err != nil {
			return &ValidationError{Name: "gestationalage", err: fmt.Errorf("ent: validator failed for field \"gestationalage\": %w", err)}
		}
	}
	if _, ok := ac.mutation.AddedTime(); !ok {
		return &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	return nil
}

func (ac *AntenatalinformationCreate) sqlSave(ctx context.Context) (*Antenatalinformation, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AntenatalinformationCreate) createSpec() (*Antenatalinformation, *sqlgraph.CreateSpec) {
	var (
		_node = &Antenatalinformation{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: antenatalinformation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatalinformation.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Gestationalage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: antenatalinformation.FieldGestationalage,
		})
		_node.Gestationalage = value
	}
	if value, ok := ac.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatalinformation.FieldAddedTime,
		})
		_node.AddedTime = value
	}
	if nodes := ac.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PersonnelTable,
			Columns: []string{antenatalinformation.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PatientTable,
			Columns: []string{antenatalinformation.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PregnancystatusidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.PregnancystatusidTable,
			Columns: []string{antenatalinformation.PregnancystatusidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pregnancystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RisksidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.RisksidTable,
			Columns: []string{antenatalinformation.RisksidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: risks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AntenatalinformationCreateBulk is the builder for creating many Antenatalinformation entities in bulk.
type AntenatalinformationCreateBulk struct {
	config
	builders []*AntenatalinformationCreate
}

// Save creates the Antenatalinformation entities in the database.
func (acb *AntenatalinformationCreateBulk) Save(ctx context.Context) ([]*Antenatalinformation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Antenatalinformation, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AntenatalinformationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AntenatalinformationCreateBulk) SaveX(ctx context.Context) []*Antenatalinformation {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
