// Code generated by entc, DO NOT EDIT.

package antenatalinformation

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/to63/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Gestationalage applies equality check predicate on the "gestationalage" field. It's identical to GestationalageEQ.
func Gestationalage(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGestationalage), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// GestationalageEQ applies the EQ predicate on the "gestationalage" field.
func GestationalageEQ(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGestationalage), v))
	})
}

// GestationalageNEQ applies the NEQ predicate on the "gestationalage" field.
func GestationalageNEQ(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGestationalage), v))
	})
}

// GestationalageIn applies the In predicate on the "gestationalage" field.
func GestationalageIn(vs ...int) predicate.Antenatalinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGestationalage), v...))
	})
}

// GestationalageNotIn applies the NotIn predicate on the "gestationalage" field.
func GestationalageNotIn(vs ...int) predicate.Antenatalinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGestationalage), v...))
	})
}

// GestationalageGT applies the GT predicate on the "gestationalage" field.
func GestationalageGT(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGestationalage), v))
	})
}

// GestationalageGTE applies the GTE predicate on the "gestationalage" field.
func GestationalageGTE(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGestationalage), v))
	})
}

// GestationalageLT applies the LT predicate on the "gestationalage" field.
func GestationalageLT(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGestationalage), v))
	})
}

// GestationalageLTE applies the LTE predicate on the "gestationalage" field.
func GestationalageLTE(v int) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGestationalage), v))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Antenatalinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Antenatalinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// HasPersonnel applies the HasEdge predicate on the "Personnel" edge.
func HasPersonnel() predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonnelWith applies the HasEdge predicate on the "Personnel" edge with a given conditions (other predicates).
func HasPersonnelWith(preds ...predicate.Personnel) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "Patient" edge.
func HasPatient() predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "Patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPregnancystatus applies the HasEdge predicate on the "Pregnancystatus" edge.
func HasPregnancystatus() predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PregnancystatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PregnancystatusTable, PregnancystatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPregnancystatusWith applies the HasEdge predicate on the "Pregnancystatus" edge with a given conditions (other predicates).
func HasPregnancystatusWith(preds ...predicate.Pregnancystatus) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PregnancystatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PregnancystatusTable, PregnancystatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRisks applies the HasEdge predicate on the "Risks" edge.
func HasRisks() predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RisksTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RisksTable, RisksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRisksWith applies the HasEdge predicate on the "Risks" edge with a given conditions (other predicates).
func HasRisksWith(preds ...predicate.Risks) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RisksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RisksTable, RisksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Antenatalinformation) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Antenatalinformation) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Antenatalinformation) predicate.Antenatalinformation {
	return predicate.Antenatalinformation(func(s *sql.Selector) {
		p(s.Not())
	})
}
