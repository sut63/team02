// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/risks"
)

// Antenatalinformation is the model entity for the Antenatalinformation schema.
type Antenatalinformation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Gestationalage holds the value of the "gestationalage" field.
	Gestationalage string `json:"gestationalage,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AntenatalinformationQuery when eager-loading is set.
	Edges                                AntenatalinformationEdges `json:"edges"`
	_Patient_id                          *int
	_Personnel_id                        *int
	pregnancystatus_antenatalinformation *int
	risks_antenatalinformation           *int
}

// AntenatalinformationEdges holds the relations/edges for other nodes in the graph.
type AntenatalinformationEdges struct {
	// Personnel holds the value of the Personnel edge.
	Personnel *Personnel
	// Patient holds the value of the Patient edge.
	Patient *Patient
	// Pregnancystatusid holds the value of the Pregnancystatusid edge.
	Pregnancystatusid *Pregnancystatus
	// Risksid holds the value of the Risksid edge.
	Risksid *Risks
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PersonnelOrErr returns the Personnel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalinformationEdges) PersonnelOrErr() (*Personnel, error) {
	if e.loadedTypes[0] {
		if e.Personnel == nil {
			// The edge Personnel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personnel.Label}
		}
		return e.Personnel, nil
	}
	return nil, &NotLoadedError{edge: "Personnel"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalinformationEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge Patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "Patient"}
}

// PregnancystatusidOrErr returns the Pregnancystatusid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalinformationEdges) PregnancystatusidOrErr() (*Pregnancystatus, error) {
	if e.loadedTypes[2] {
		if e.Pregnancystatusid == nil {
			// The edge Pregnancystatusid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pregnancystatus.Label}
		}
		return e.Pregnancystatusid, nil
	}
	return nil, &NotLoadedError{edge: "Pregnancystatusid"}
}

// RisksidOrErr returns the Risksid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AntenatalinformationEdges) RisksidOrErr() (*Risks, error) {
	if e.loadedTypes[3] {
		if e.Risksid == nil {
			// The edge Risksid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: risks.Label}
		}
		return e.Risksid, nil
	}
	return nil, &NotLoadedError{edge: "Risksid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Antenatalinformation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case antenatalinformation.FieldID:
			values[i] = &sql.NullInt64{}
		case antenatalinformation.FieldGestationalage:
			values[i] = &sql.NullString{}
		case antenatalinformation.FieldAddedTime:
			values[i] = &sql.NullTime{}
		case antenatalinformation.ForeignKeys[0]: // _Patient_id
			values[i] = &sql.NullInt64{}
		case antenatalinformation.ForeignKeys[1]: // _Personnel_id
			values[i] = &sql.NullInt64{}
		case antenatalinformation.ForeignKeys[2]: // pregnancystatus_antenatalinformation
			values[i] = &sql.NullInt64{}
		case antenatalinformation.ForeignKeys[3]: // risks_antenatalinformation
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Antenatalinformation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Antenatalinformation fields.
func (a *Antenatalinformation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case antenatalinformation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case antenatalinformation.FieldGestationalage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gestationalage", values[i])
			} else if value.Valid {
				a.Gestationalage = value.String
			}
		case antenatalinformation.FieldAddedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_time", values[i])
			} else if value.Valid {
				a.AddedTime = value.Time
			}
		case antenatalinformation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Patient_id", value)
			} else if value.Valid {
				a._Patient_id = new(int)
				*a._Patient_id = int(value.Int64)
			}
		case antenatalinformation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Personnel_id", value)
			} else if value.Valid {
				a._Personnel_id = new(int)
				*a._Personnel_id = int(value.Int64)
			}
		case antenatalinformation.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pregnancystatus_antenatalinformation", value)
			} else if value.Valid {
				a.pregnancystatus_antenatalinformation = new(int)
				*a.pregnancystatus_antenatalinformation = int(value.Int64)
			}
		case antenatalinformation.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field risks_antenatalinformation", value)
			} else if value.Valid {
				a.risks_antenatalinformation = new(int)
				*a.risks_antenatalinformation = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPersonnel queries the "Personnel" edge of the Antenatalinformation entity.
func (a *Antenatalinformation) QueryPersonnel() *PersonnelQuery {
	return (&AntenatalinformationClient{config: a.config}).QueryPersonnel(a)
}

// QueryPatient queries the "Patient" edge of the Antenatalinformation entity.
func (a *Antenatalinformation) QueryPatient() *PatientQuery {
	return (&AntenatalinformationClient{config: a.config}).QueryPatient(a)
}

// QueryPregnancystatusid queries the "Pregnancystatusid" edge of the Antenatalinformation entity.
func (a *Antenatalinformation) QueryPregnancystatusid() *PregnancystatusQuery {
	return (&AntenatalinformationClient{config: a.config}).QueryPregnancystatusid(a)
}

// QueryRisksid queries the "Risksid" edge of the Antenatalinformation entity.
func (a *Antenatalinformation) QueryRisksid() *RisksQuery {
	return (&AntenatalinformationClient{config: a.config}).QueryRisksid(a)
}

// Update returns a builder for updating this Antenatalinformation.
// Note that you need to call Antenatalinformation.Unwrap() before calling this method if this Antenatalinformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Antenatalinformation) Update() *AntenatalinformationUpdateOne {
	return (&AntenatalinformationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Antenatalinformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Antenatalinformation) Unwrap() *Antenatalinformation {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Antenatalinformation is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Antenatalinformation) String() string {
	var builder strings.Builder
	builder.WriteString("Antenatalinformation(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", gestationalage=")
	builder.WriteString(a.Gestationalage)
	builder.WriteString(", added_time=")
	builder.WriteString(a.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Antenatalinformations is a parsable slice of Antenatalinformation.
type Antenatalinformations []*Antenatalinformation

func (a Antenatalinformations) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
