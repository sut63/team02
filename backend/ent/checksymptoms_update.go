// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/checksymptoms"
	"github.com/to63/app/ent/disease"
	"github.com/to63/app/ent/doctorordersheet"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
)

// ChecksymptomsUpdate is the builder for updating Checksymptoms entities.
type ChecksymptomsUpdate struct {
	config
	hooks    []Hook
	mutation *ChecksymptomsMutation
}

// Where adds a new predicate for the ChecksymptomsUpdate builder.
func (cu *ChecksymptomsUpdate) Where(ps ...predicate.Checksymptoms) *ChecksymptomsUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetDiseaseID sets the "disease" edge to the Disease entity by ID.
func (cu *ChecksymptomsUpdate) SetDiseaseID(id int) *ChecksymptomsUpdate {
	cu.mutation.SetDiseaseID(id)
	return cu
}

// SetNillableDiseaseID sets the "disease" edge to the Disease entity by ID if the given value is not nil.
func (cu *ChecksymptomsUpdate) SetNillableDiseaseID(id *int) *ChecksymptomsUpdate {
	if id != nil {
		cu = cu.SetDiseaseID(*id)
	}
	return cu
}

// SetDisease sets the "disease" edge to the Disease entity.
func (cu *ChecksymptomsUpdate) SetDisease(d *Disease) *ChecksymptomsUpdate {
	return cu.SetDiseaseID(d.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (cu *ChecksymptomsUpdate) SetPatientID(id int) *ChecksymptomsUpdate {
	cu.mutation.SetPatientID(id)
	return cu
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (cu *ChecksymptomsUpdate) SetNillablePatientID(id *int) *ChecksymptomsUpdate {
	if id != nil {
		cu = cu.SetPatientID(*id)
	}
	return cu
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cu *ChecksymptomsUpdate) SetPatient(p *Patient) *ChecksymptomsUpdate {
	return cu.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (cu *ChecksymptomsUpdate) SetPersonnelID(id int) *ChecksymptomsUpdate {
	cu.mutation.SetPersonnelID(id)
	return cu
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (cu *ChecksymptomsUpdate) SetNillablePersonnelID(id *int) *ChecksymptomsUpdate {
	if id != nil {
		cu = cu.SetPersonnelID(*id)
	}
	return cu
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (cu *ChecksymptomsUpdate) SetPersonnel(p *Personnel) *ChecksymptomsUpdate {
	return cu.SetPersonnelID(p.ID)
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID.
func (cu *ChecksymptomsUpdate) SetDoctorordersheetID(id int) *ChecksymptomsUpdate {
	cu.mutation.SetDoctorordersheetID(id)
	return cu
}

// SetNillableDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID if the given value is not nil.
func (cu *ChecksymptomsUpdate) SetNillableDoctorordersheetID(id *int) *ChecksymptomsUpdate {
	if id != nil {
		cu = cu.SetDoctorordersheetID(*id)
	}
	return cu
}

// SetDoctorordersheet sets the "doctorordersheet" edge to the DoctorOrderSheet entity.
func (cu *ChecksymptomsUpdate) SetDoctorordersheet(d *DoctorOrderSheet) *ChecksymptomsUpdate {
	return cu.SetDoctorordersheetID(d.ID)
}

// Mutation returns the ChecksymptomsMutation object of the builder.
func (cu *ChecksymptomsUpdate) Mutation() *ChecksymptomsMutation {
	return cu.mutation
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (cu *ChecksymptomsUpdate) ClearDisease() *ChecksymptomsUpdate {
	cu.mutation.ClearDisease()
	return cu
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cu *ChecksymptomsUpdate) ClearPatient() *ChecksymptomsUpdate {
	cu.mutation.ClearPatient()
	return cu
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (cu *ChecksymptomsUpdate) ClearPersonnel() *ChecksymptomsUpdate {
	cu.mutation.ClearPersonnel()
	return cu
}

// ClearDoctorordersheet clears the "doctorordersheet" edge to the DoctorOrderSheet entity.
func (cu *ChecksymptomsUpdate) ClearDoctorordersheet() *ChecksymptomsUpdate {
	cu.mutation.ClearDoctorordersheet()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChecksymptomsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChecksymptomsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChecksymptomsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChecksymptomsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChecksymptomsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChecksymptomsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checksymptoms.Table,
			Columns: checksymptoms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checksymptoms.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DiseaseTable,
			Columns: []string{checksymptoms.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DiseaseTable,
			Columns: []string{checksymptoms.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PatientTable,
			Columns: []string{checksymptoms.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PatientTable,
			Columns: []string{checksymptoms.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PersonnelTable,
			Columns: []string{checksymptoms.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PersonnelTable,
			Columns: []string{checksymptoms.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DoctorordersheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DoctorordersheetTable,
			Columns: []string{checksymptoms.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DoctorordersheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DoctorordersheetTable,
			Columns: []string{checksymptoms.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checksymptoms.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChecksymptomsUpdateOne is the builder for updating a single Checksymptoms entity.
type ChecksymptomsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ChecksymptomsMutation
}

// SetDiseaseID sets the "disease" edge to the Disease entity by ID.
func (cuo *ChecksymptomsUpdateOne) SetDiseaseID(id int) *ChecksymptomsUpdateOne {
	cuo.mutation.SetDiseaseID(id)
	return cuo
}

// SetNillableDiseaseID sets the "disease" edge to the Disease entity by ID if the given value is not nil.
func (cuo *ChecksymptomsUpdateOne) SetNillableDiseaseID(id *int) *ChecksymptomsUpdateOne {
	if id != nil {
		cuo = cuo.SetDiseaseID(*id)
	}
	return cuo
}

// SetDisease sets the "disease" edge to the Disease entity.
func (cuo *ChecksymptomsUpdateOne) SetDisease(d *Disease) *ChecksymptomsUpdateOne {
	return cuo.SetDiseaseID(d.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (cuo *ChecksymptomsUpdateOne) SetPatientID(id int) *ChecksymptomsUpdateOne {
	cuo.mutation.SetPatientID(id)
	return cuo
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (cuo *ChecksymptomsUpdateOne) SetNillablePatientID(id *int) *ChecksymptomsUpdateOne {
	if id != nil {
		cuo = cuo.SetPatientID(*id)
	}
	return cuo
}

// SetPatient sets the "patient" edge to the Patient entity.
func (cuo *ChecksymptomsUpdateOne) SetPatient(p *Patient) *ChecksymptomsUpdateOne {
	return cuo.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (cuo *ChecksymptomsUpdateOne) SetPersonnelID(id int) *ChecksymptomsUpdateOne {
	cuo.mutation.SetPersonnelID(id)
	return cuo
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (cuo *ChecksymptomsUpdateOne) SetNillablePersonnelID(id *int) *ChecksymptomsUpdateOne {
	if id != nil {
		cuo = cuo.SetPersonnelID(*id)
	}
	return cuo
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (cuo *ChecksymptomsUpdateOne) SetPersonnel(p *Personnel) *ChecksymptomsUpdateOne {
	return cuo.SetPersonnelID(p.ID)
}

// SetDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID.
func (cuo *ChecksymptomsUpdateOne) SetDoctorordersheetID(id int) *ChecksymptomsUpdateOne {
	cuo.mutation.SetDoctorordersheetID(id)
	return cuo
}

// SetNillableDoctorordersheetID sets the "doctorordersheet" edge to the DoctorOrderSheet entity by ID if the given value is not nil.
func (cuo *ChecksymptomsUpdateOne) SetNillableDoctorordersheetID(id *int) *ChecksymptomsUpdateOne {
	if id != nil {
		cuo = cuo.SetDoctorordersheetID(*id)
	}
	return cuo
}

// SetDoctorordersheet sets the "doctorordersheet" edge to the DoctorOrderSheet entity.
func (cuo *ChecksymptomsUpdateOne) SetDoctorordersheet(d *DoctorOrderSheet) *ChecksymptomsUpdateOne {
	return cuo.SetDoctorordersheetID(d.ID)
}

// Mutation returns the ChecksymptomsMutation object of the builder.
func (cuo *ChecksymptomsUpdateOne) Mutation() *ChecksymptomsMutation {
	return cuo.mutation
}

// ClearDisease clears the "disease" edge to the Disease entity.
func (cuo *ChecksymptomsUpdateOne) ClearDisease() *ChecksymptomsUpdateOne {
	cuo.mutation.ClearDisease()
	return cuo
}

// ClearPatient clears the "patient" edge to the Patient entity.
func (cuo *ChecksymptomsUpdateOne) ClearPatient() *ChecksymptomsUpdateOne {
	cuo.mutation.ClearPatient()
	return cuo
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (cuo *ChecksymptomsUpdateOne) ClearPersonnel() *ChecksymptomsUpdateOne {
	cuo.mutation.ClearPersonnel()
	return cuo
}

// ClearDoctorordersheet clears the "doctorordersheet" edge to the DoctorOrderSheet entity.
func (cuo *ChecksymptomsUpdateOne) ClearDoctorordersheet() *ChecksymptomsUpdateOne {
	cuo.mutation.ClearDoctorordersheet()
	return cuo
}

// Save executes the query and returns the updated Checksymptoms entity.
func (cuo *ChecksymptomsUpdateOne) Save(ctx context.Context) (*Checksymptoms, error) {
	var (
		err  error
		node *Checksymptoms
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChecksymptomsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChecksymptomsUpdateOne) SaveX(ctx context.Context) *Checksymptoms {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChecksymptomsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChecksymptomsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChecksymptomsUpdateOne) sqlSave(ctx context.Context) (_node *Checksymptoms, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checksymptoms.Table,
			Columns: checksymptoms.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checksymptoms.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Checksymptoms.ID for update")}
	}
	_spec.Node.ID.Value = id
	if cuo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DiseaseTable,
			Columns: []string{checksymptoms.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DiseaseTable,
			Columns: []string{checksymptoms.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PatientTable,
			Columns: []string{checksymptoms.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PatientTable,
			Columns: []string{checksymptoms.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PersonnelTable,
			Columns: []string{checksymptoms.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.PersonnelTable,
			Columns: []string{checksymptoms.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DoctorordersheetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DoctorordersheetTable,
			Columns: []string{checksymptoms.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DoctorordersheetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checksymptoms.DoctorordersheetTable,
			Columns: []string{checksymptoms.DoctorordersheetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctorordersheet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Checksymptoms{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checksymptoms.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
