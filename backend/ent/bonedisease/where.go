// Code generated by entc, DO NOT EDIT.

package bonedisease

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/to63/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AddedTime applies equality check predicate on the "addedTime" field. It's identical to AddedTimeEQ.
func AddedTime(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime), v))
	})
}

// Advice applies equality check predicate on the "advice" field. It's identical to AdviceEQ.
func Advice(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdvice), v))
	})
}

// AddedTimeEQ applies the EQ predicate on the "addedTime" field.
func AddedTimeEQ(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddedTime), v))
	})
}

// AddedTimeNEQ applies the NEQ predicate on the "addedTime" field.
func AddedTimeNEQ(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddedTime), v))
	})
}

// AddedTimeIn applies the In predicate on the "addedTime" field.
func AddedTimeIn(vs ...time.Time) predicate.Bonedisease {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddedTime), v...))
	})
}

// AddedTimeNotIn applies the NotIn predicate on the "addedTime" field.
func AddedTimeNotIn(vs ...time.Time) predicate.Bonedisease {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddedTime), v...))
	})
}

// AddedTimeGT applies the GT predicate on the "addedTime" field.
func AddedTimeGT(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddedTime), v))
	})
}

// AddedTimeGTE applies the GTE predicate on the "addedTime" field.
func AddedTimeGTE(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddedTime), v))
	})
}

// AddedTimeLT applies the LT predicate on the "addedTime" field.
func AddedTimeLT(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddedTime), v))
	})
}

// AddedTimeLTE applies the LTE predicate on the "addedTime" field.
func AddedTimeLTE(v time.Time) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddedTime), v))
	})
}

// AdviceEQ applies the EQ predicate on the "advice" field.
func AdviceEQ(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdvice), v))
	})
}

// AdviceNEQ applies the NEQ predicate on the "advice" field.
func AdviceNEQ(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdvice), v))
	})
}

// AdviceIn applies the In predicate on the "advice" field.
func AdviceIn(vs ...string) predicate.Bonedisease {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdvice), v...))
	})
}

// AdviceNotIn applies the NotIn predicate on the "advice" field.
func AdviceNotIn(vs ...string) predicate.Bonedisease {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Bonedisease(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdvice), v...))
	})
}

// AdviceGT applies the GT predicate on the "advice" field.
func AdviceGT(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdvice), v))
	})
}

// AdviceGTE applies the GTE predicate on the "advice" field.
func AdviceGTE(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdvice), v))
	})
}

// AdviceLT applies the LT predicate on the "advice" field.
func AdviceLT(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdvice), v))
	})
}

// AdviceLTE applies the LTE predicate on the "advice" field.
func AdviceLTE(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdvice), v))
	})
}

// AdviceContains applies the Contains predicate on the "advice" field.
func AdviceContains(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdvice), v))
	})
}

// AdviceHasPrefix applies the HasPrefix predicate on the "advice" field.
func AdviceHasPrefix(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdvice), v))
	})
}

// AdviceHasSuffix applies the HasSuffix predicate on the "advice" field.
func AdviceHasSuffix(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdvice), v))
	})
}

// AdviceEqualFold applies the EqualFold predicate on the "advice" field.
func AdviceEqualFold(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdvice), v))
	})
}

// AdviceContainsFold applies the ContainsFold predicate on the "advice" field.
func AdviceContainsFold(v string) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdvice), v))
	})
}

// HasRemedy applies the HasEdge predicate on the "remedy" edge.
func HasRemedy() predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RemedyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RemedyTable, RemedyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRemedyWith applies the HasEdge predicate on the "remedy" edge with a given conditions (other predicates).
func HasRemedyWith(preds ...predicate.Remedy) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RemedyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RemedyTable, RemedyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonnel applies the HasEdge predicate on the "personnel" edge.
func HasPersonnel() predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonnelWith applies the HasEdge predicate on the "personnel" edge with a given conditions (other predicates).
func HasPersonnelWith(preds ...predicate.Personnel) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bonedisease) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bonedisease) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bonedisease) predicate.Bonedisease {
	return predicate.Bonedisease(func(s *sql.Selector) {
		p(s.Not())
	})
}
