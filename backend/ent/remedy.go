// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/remedy"
)

// Remedy is the model entity for the Remedy schema.
type Remedy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Remedy holds the value of the "remedy" field.
	Remedy string `json:"remedy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RemedyQuery when eager-loading is set.
	Edges RemedyEdges `json:"edges"`
}

// RemedyEdges holds the relations/edges for other nodes in the graph.
type RemedyEdges struct {
	// Bonedisease holds the value of the Bonedisease edge.
	Bonedisease []*Bonedisease
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BonediseaseOrErr returns the Bonedisease value or an error if the edge
// was not loaded in eager-loading.
func (e RemedyEdges) BonediseaseOrErr() ([]*Bonedisease, error) {
	if e.loadedTypes[0] {
		return e.Bonedisease, nil
	}
	return nil, &NotLoadedError{edge: "Bonedisease"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Remedy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case remedy.FieldID:
			values[i] = &sql.NullInt64{}
		case remedy.FieldRemedy:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Remedy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Remedy fields.
func (r *Remedy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case remedy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case remedy.FieldRemedy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remedy", values[i])
			} else if value.Valid {
				r.Remedy = value.String
			}
		}
	}
	return nil
}

// QueryBonedisease queries the "Bonedisease" edge of the Remedy entity.
func (r *Remedy) QueryBonedisease() *BonediseaseQuery {
	return (&RemedyClient{config: r.config}).QueryBonedisease(r)
}

// Update returns a builder for updating this Remedy.
// Note that you need to call Remedy.Unwrap() before calling this method if this Remedy
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Remedy) Update() *RemedyUpdateOne {
	return (&RemedyClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Remedy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Remedy) Unwrap() *Remedy {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Remedy is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Remedy) String() string {
	var builder strings.Builder
	builder.WriteString("Remedy(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", remedy=")
	builder.WriteString(r.Remedy)
	builder.WriteByte(')')
	return builder.String()
}

// Remedies is a parsable slice of Remedy.
type Remedies []*Remedy

func (r Remedies) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
