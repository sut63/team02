// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/dentalappointment"
	"github.com/to63/app/ent/dentalkind"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
)

// Dentalappointment is the model entity for the Dentalappointment schema.
type Dentalappointment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Appointtime holds the value of the "appointtime" field.
	Appointtime time.Time `json:"appointtime,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DentalappointmentQuery when eager-loading is set.
	Edges         DentalappointmentEdges `json:"edges"`
	kindname      *int
	_Patient_id   *int
	_Personnel_id *int
}

// DentalappointmentEdges holds the relations/edges for other nodes in the graph.
type DentalappointmentEdges struct {
	// Personnel holds the value of the Personnel edge.
	Personnel *Personnel
	// Patient holds the value of the Patient edge.
	Patient *Patient
	// Dentalkind holds the value of the Dentalkind edge.
	Dentalkind *Dentalkind
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PersonnelOrErr returns the Personnel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalappointmentEdges) PersonnelOrErr() (*Personnel, error) {
	if e.loadedTypes[0] {
		if e.Personnel == nil {
			// The edge Personnel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personnel.Label}
		}
		return e.Personnel, nil
	}
	return nil, &NotLoadedError{edge: "Personnel"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalappointmentEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge Patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "Patient"}
}

// DentalkindOrErr returns the Dentalkind value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalappointmentEdges) DentalkindOrErr() (*Dentalkind, error) {
	if e.loadedTypes[2] {
		if e.Dentalkind == nil {
			// The edge Dentalkind was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dentalkind.Label}
		}
		return e.Dentalkind, nil
	}
	return nil, &NotLoadedError{edge: "Dentalkind"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dentalappointment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dentalappointment.FieldID, dentalappointment.FieldAmount, dentalappointment.FieldPrice:
			values[i] = &sql.NullInt64{}
		case dentalappointment.FieldNote:
			values[i] = &sql.NullString{}
		case dentalappointment.FieldAppointtime:
			values[i] = &sql.NullTime{}
		case dentalappointment.ForeignKeys[0]: // kindname
			values[i] = &sql.NullInt64{}
		case dentalappointment.ForeignKeys[1]: // _Patient_id
			values[i] = &sql.NullInt64{}
		case dentalappointment.ForeignKeys[2]: // _Personnel_id
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dentalappointment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dentalappointment fields.
func (d *Dentalappointment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dentalappointment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dentalappointment.FieldAppointtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field appointtime", values[i])
			} else if value.Valid {
				d.Appointtime = value.Time
			}
		case dentalappointment.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = int(value.Int64)
			}
		case dentalappointment.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				d.Price = int(value.Int64)
			}
		case dentalappointment.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				d.Note = value.String
			}
		case dentalappointment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kindname", value)
			} else if value.Valid {
				d.kindname = new(int)
				*d.kindname = int(value.Int64)
			}
		case dentalappointment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Patient_id", value)
			} else if value.Valid {
				d._Patient_id = new(int)
				*d._Patient_id = int(value.Int64)
			}
		case dentalappointment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Personnel_id", value)
			} else if value.Valid {
				d._Personnel_id = new(int)
				*d._Personnel_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPersonnel queries the "Personnel" edge of the Dentalappointment entity.
func (d *Dentalappointment) QueryPersonnel() *PersonnelQuery {
	return (&DentalappointmentClient{config: d.config}).QueryPersonnel(d)
}

// QueryPatient queries the "Patient" edge of the Dentalappointment entity.
func (d *Dentalappointment) QueryPatient() *PatientQuery {
	return (&DentalappointmentClient{config: d.config}).QueryPatient(d)
}

// QueryDentalkind queries the "Dentalkind" edge of the Dentalappointment entity.
func (d *Dentalappointment) QueryDentalkind() *DentalkindQuery {
	return (&DentalappointmentClient{config: d.config}).QueryDentalkind(d)
}

// Update returns a builder for updating this Dentalappointment.
// Note that you need to call Dentalappointment.Unwrap() before calling this method if this Dentalappointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dentalappointment) Update() *DentalappointmentUpdateOne {
	return (&DentalappointmentClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dentalappointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dentalappointment) Unwrap() *Dentalappointment {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dentalappointment is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dentalappointment) String() string {
	var builder strings.Builder
	builder.WriteString("Dentalappointment(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", appointtime=")
	builder.WriteString(d.Appointtime.Format(time.ANSIC))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", d.Amount))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", d.Price))
	builder.WriteString(", note=")
	builder.WriteString(d.Note)
	builder.WriteByte(')')
	return builder.String()
}

// Dentalappointments is a parsable slice of Dentalappointment.
type Dentalappointments []*Dentalappointment

func (d Dentalappointments) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
