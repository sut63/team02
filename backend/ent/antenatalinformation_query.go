// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/risks"
)

// AntenatalinformationQuery is the builder for querying Antenatalinformation entities.
type AntenatalinformationQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.Antenatalinformation
	// eager-loading edges.
	withPersonnel       *PersonnelQuery
	withPatient         *PatientQuery
	withPregnancystatus *PregnancystatusQuery
	withRisks           *RisksQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AntenatalinformationQuery builder.
func (aq *AntenatalinformationQuery) Where(ps ...predicate.Antenatalinformation) *AntenatalinformationQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *AntenatalinformationQuery) Limit(limit int) *AntenatalinformationQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *AntenatalinformationQuery) Offset(offset int) *AntenatalinformationQuery {
	aq.offset = &offset
	return aq
}

// Order adds an order step to the query.
func (aq *AntenatalinformationQuery) Order(o ...OrderFunc) *AntenatalinformationQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryPersonnel chains the current query on the "Personnel" edge.
func (aq *AntenatalinformationQuery) QueryPersonnel() *PersonnelQuery {
	query := &PersonnelQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, selector),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.PersonnelTable, antenatalinformation.PersonnelColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPatient chains the current query on the "Patient" edge.
func (aq *AntenatalinformationQuery) QueryPatient() *PatientQuery {
	query := &PatientQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, antenatalinformation.PatientTable, antenatalinformation.PatientColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPregnancystatus chains the current query on the "Pregnancystatus" edge.
func (aq *AntenatalinformationQuery) QueryPregnancystatus() *PregnancystatusQuery {
	query := &PregnancystatusQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, selector),
			sqlgraph.To(pregnancystatus.Table, pregnancystatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, antenatalinformation.PregnancystatusTable, antenatalinformation.PregnancystatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "Risks" edge.
func (aq *AntenatalinformationQuery) QueryRisks() *RisksQuery {
	query := &RisksQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(antenatalinformation.Table, antenatalinformation.FieldID, selector),
			sqlgraph.To(risks.Table, risks.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, antenatalinformation.RisksTable, antenatalinformation.RisksColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Antenatalinformation entity from the query.
// Returns a *NotFoundError when no Antenatalinformation was found.
func (aq *AntenatalinformationQuery) First(ctx context.Context) (*Antenatalinformation, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{antenatalinformation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AntenatalinformationQuery) FirstX(ctx context.Context) *Antenatalinformation {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Antenatalinformation ID from the query.
// Returns a *NotFoundError when no Antenatalinformation ID was found.
func (aq *AntenatalinformationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{antenatalinformation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AntenatalinformationQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Antenatalinformation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Antenatalinformation entity is not found.
// Returns a *NotFoundError when no Antenatalinformation entities are found.
func (aq *AntenatalinformationQuery) Only(ctx context.Context) (*Antenatalinformation, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{antenatalinformation.Label}
	default:
		return nil, &NotSingularError{antenatalinformation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AntenatalinformationQuery) OnlyX(ctx context.Context) *Antenatalinformation {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Antenatalinformation ID in the query.
// Returns a *NotSingularError when exactly one Antenatalinformation ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aq *AntenatalinformationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = &NotSingularError{antenatalinformation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AntenatalinformationQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Antenatalinformations.
func (aq *AntenatalinformationQuery) All(ctx context.Context) ([]*Antenatalinformation, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *AntenatalinformationQuery) AllX(ctx context.Context) []*Antenatalinformation {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Antenatalinformation IDs.
func (aq *AntenatalinformationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(antenatalinformation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AntenatalinformationQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AntenatalinformationQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AntenatalinformationQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AntenatalinformationQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AntenatalinformationQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AntenatalinformationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AntenatalinformationQuery) Clone() *AntenatalinformationQuery {
	if aq == nil {
		return nil
	}
	return &AntenatalinformationQuery{
		config:              aq.config,
		limit:               aq.limit,
		offset:              aq.offset,
		order:               append([]OrderFunc{}, aq.order...),
		predicates:          append([]predicate.Antenatalinformation{}, aq.predicates...),
		withPersonnel:       aq.withPersonnel.Clone(),
		withPatient:         aq.withPatient.Clone(),
		withPregnancystatus: aq.withPregnancystatus.Clone(),
		withRisks:           aq.withRisks.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithPersonnel tells the query-builder to eager-load the nodes that are connected to
// the "Personnel" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AntenatalinformationQuery) WithPersonnel(opts ...func(*PersonnelQuery)) *AntenatalinformationQuery {
	query := &PersonnelQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withPersonnel = query
	return aq
}

// WithPatient tells the query-builder to eager-load the nodes that are connected to
// the "Patient" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AntenatalinformationQuery) WithPatient(opts ...func(*PatientQuery)) *AntenatalinformationQuery {
	query := &PatientQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withPatient = query
	return aq
}

// WithPregnancystatus tells the query-builder to eager-load the nodes that are connected to
// the "Pregnancystatus" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AntenatalinformationQuery) WithPregnancystatus(opts ...func(*PregnancystatusQuery)) *AntenatalinformationQuery {
	query := &PregnancystatusQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withPregnancystatus = query
	return aq
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "Risks" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AntenatalinformationQuery) WithRisks(opts ...func(*RisksQuery)) *AntenatalinformationQuery {
	query := &RisksQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withRisks = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Gestationalage int `json:"gestationalage,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Antenatalinformation.Query().
//		GroupBy(antenatalinformation.FieldGestationalage).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aq *AntenatalinformationQuery) GroupBy(field string, fields ...string) *AntenatalinformationGroupBy {
	group := &AntenatalinformationGroupBy{config: aq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Gestationalage int `json:"gestationalage,omitempty"`
//	}
//
//	client.Antenatalinformation.Query().
//		Select(antenatalinformation.FieldGestationalage).
//		Scan(ctx, &v)
//
func (aq *AntenatalinformationQuery) Select(field string, fields ...string) *AntenatalinformationSelect {
	aq.fields = append([]string{field}, fields...)
	return &AntenatalinformationSelect{AntenatalinformationQuery: aq}
}

func (aq *AntenatalinformationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !antenatalinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AntenatalinformationQuery) sqlAll(ctx context.Context) ([]*Antenatalinformation, error) {
	var (
		nodes       = []*Antenatalinformation{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [4]bool{
			aq.withPersonnel != nil,
			aq.withPatient != nil,
			aq.withPregnancystatus != nil,
			aq.withRisks != nil,
		}
	)
	if aq.withPersonnel != nil || aq.withPatient != nil || aq.withPregnancystatus != nil || aq.withRisks != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, antenatalinformation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Antenatalinformation{config: aq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aq.withPersonnel; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Antenatalinformation)
		for i := range nodes {
			if fk := nodes[i]._Personnel_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(personnel.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "_Personnel_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Personnel = n
			}
		}
	}

	if query := aq.withPatient; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Antenatalinformation)
		for i := range nodes {
			if fk := nodes[i]._Patient_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(patient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "_Patient_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Patient = n
			}
		}
	}

	if query := aq.withPregnancystatus; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Antenatalinformation)
		for i := range nodes {
			if fk := nodes[i].pregnancystatus_antenatalinformation; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(pregnancystatus.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pregnancystatus_antenatalinformation" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pregnancystatus = n
			}
		}
	}

	if query := aq.withRisks; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Antenatalinformation)
		for i := range nodes {
			if fk := nodes[i].risks_antenatalinformation; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(risks.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "risks_antenatalinformation" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Risks = n
			}
		}
	}

	return nodes, nil
}

func (aq *AntenatalinformationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AntenatalinformationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (aq *AntenatalinformationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatalinformation.Table,
			Columns: antenatalinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatalinformation.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, antenatalinformation.FieldID)
		for i := range fields {
			if fields[i] != antenatalinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, antenatalinformation.ValidColumn)
			}
		}
	}
	return _spec
}

func (aq *AntenatalinformationQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(antenatalinformation.Table)
	selector := builder.Select(t1.Columns(antenatalinformation.Columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(antenatalinformation.Columns...)...)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector, antenatalinformation.ValidColumn)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AntenatalinformationGroupBy is the group-by builder for Antenatalinformation entities.
type AntenatalinformationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AntenatalinformationGroupBy) Aggregate(fns ...AggregateFunc) *AntenatalinformationGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *AntenatalinformationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := agb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) StringsX(ctx context.Context) []string {
	v, err := agb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = agb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) StringX(ctx context.Context) string {
	v, err := agb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) IntsX(ctx context.Context) []int {
	v, err := agb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = agb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) IntX(ctx context.Context) int {
	v, err := agb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := agb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = agb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := agb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(agb.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := agb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := agb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agb *AntenatalinformationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = agb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (agb *AntenatalinformationGroupBy) BoolX(ctx context.Context) bool {
	v, err := agb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agb *AntenatalinformationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agb.fields {
		if !antenatalinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *AntenatalinformationGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql
	columns := make([]string, 0, len(agb.fields)+len(agb.fns))
	columns = append(columns, agb.fields...)
	for _, fn := range agb.fns {
		columns = append(columns, fn(selector, antenatalinformation.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(agb.fields...)
}

// AntenatalinformationSelect is the builder for selecting fields of Antenatalinformation entities.
type AntenatalinformationSelect struct {
	*AntenatalinformationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *AntenatalinformationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.AntenatalinformationQuery.sqlQuery()
	return as.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (as *AntenatalinformationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := as.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (as *AntenatalinformationSelect) StringsX(ctx context.Context) []string {
	v, err := as.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = as.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (as *AntenatalinformationSelect) StringX(ctx context.Context) string {
	v, err := as.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (as *AntenatalinformationSelect) IntsX(ctx context.Context) []int {
	v, err := as.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = as.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (as *AntenatalinformationSelect) IntX(ctx context.Context) int {
	v, err := as.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (as *AntenatalinformationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := as.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = as.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (as *AntenatalinformationSelect) Float64X(ctx context.Context) float64 {
	v, err := as.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(as.fields) > 1 {
		return nil, errors.New("ent: AntenatalinformationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := as.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (as *AntenatalinformationSelect) BoolsX(ctx context.Context) []bool {
	v, err := as.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (as *AntenatalinformationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = as.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{antenatalinformation.Label}
	default:
		err = fmt.Errorf("ent: AntenatalinformationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (as *AntenatalinformationSelect) BoolX(ctx context.Context) bool {
	v, err := as.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (as *AntenatalinformationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sqlQuery().Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (as *AntenatalinformationSelect) sqlQuery() sql.Querier {
	selector := as.sql
	selector.Select(selector.Columns(as.fields...)...)
	return selector
}
