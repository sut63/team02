// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/pregnancystatus"
	"github.com/to63/app/ent/risks"
)

// AntenatalinformationUpdate is the builder for updating Antenatalinformation entities.
type AntenatalinformationUpdate struct {
	config
	hooks    []Hook
	mutation *AntenatalinformationMutation
}

// Where adds a new predicate for the AntenatalinformationUpdate builder.
func (au *AntenatalinformationUpdate) Where(ps ...predicate.Antenatalinformation) *AntenatalinformationUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetGestationalage sets the "gestationalage" field.
func (au *AntenatalinformationUpdate) SetGestationalage(s string) *AntenatalinformationUpdate {
	au.mutation.SetGestationalage(s)
	return au
}

// SetAddedTime sets the "added_time" field.
func (au *AntenatalinformationUpdate) SetAddedTime(t time.Time) *AntenatalinformationUpdate {
	au.mutation.SetAddedTime(t)
	return au
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by ID.
func (au *AntenatalinformationUpdate) SetPersonnelID(id int) *AntenatalinformationUpdate {
	au.mutation.SetPersonnelID(id)
	return au
}

// SetNillablePersonnelID sets the "Personnel" edge to the Personnel entity by ID if the given value is not nil.
func (au *AntenatalinformationUpdate) SetNillablePersonnelID(id *int) *AntenatalinformationUpdate {
	if id != nil {
		au = au.SetPersonnelID(*id)
	}
	return au
}

// SetPersonnel sets the "Personnel" edge to the Personnel entity.
func (au *AntenatalinformationUpdate) SetPersonnel(p *Personnel) *AntenatalinformationUpdate {
	return au.SetPersonnelID(p.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (au *AntenatalinformationUpdate) SetPatientID(id int) *AntenatalinformationUpdate {
	au.mutation.SetPatientID(id)
	return au
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (au *AntenatalinformationUpdate) SetNillablePatientID(id *int) *AntenatalinformationUpdate {
	if id != nil {
		au = au.SetPatientID(*id)
	}
	return au
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (au *AntenatalinformationUpdate) SetPatient(p *Patient) *AntenatalinformationUpdate {
	return au.SetPatientID(p.ID)
}

// SetPregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID.
func (au *AntenatalinformationUpdate) SetPregnancystatusidID(id int) *AntenatalinformationUpdate {
	au.mutation.SetPregnancystatusidID(id)
	return au
}

// SetNillablePregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID if the given value is not nil.
func (au *AntenatalinformationUpdate) SetNillablePregnancystatusidID(id *int) *AntenatalinformationUpdate {
	if id != nil {
		au = au.SetPregnancystatusidID(*id)
	}
	return au
}

// SetPregnancystatusid sets the "Pregnancystatusid" edge to the Pregnancystatus entity.
func (au *AntenatalinformationUpdate) SetPregnancystatusid(p *Pregnancystatus) *AntenatalinformationUpdate {
	return au.SetPregnancystatusidID(p.ID)
}

// SetRisksidID sets the "Risksid" edge to the Risks entity by ID.
func (au *AntenatalinformationUpdate) SetRisksidID(id int) *AntenatalinformationUpdate {
	au.mutation.SetRisksidID(id)
	return au
}

// SetNillableRisksidID sets the "Risksid" edge to the Risks entity by ID if the given value is not nil.
func (au *AntenatalinformationUpdate) SetNillableRisksidID(id *int) *AntenatalinformationUpdate {
	if id != nil {
		au = au.SetRisksidID(*id)
	}
	return au
}

// SetRisksid sets the "Risksid" edge to the Risks entity.
func (au *AntenatalinformationUpdate) SetRisksid(r *Risks) *AntenatalinformationUpdate {
	return au.SetRisksidID(r.ID)
}

// Mutation returns the AntenatalinformationMutation object of the builder.
func (au *AntenatalinformationUpdate) Mutation() *AntenatalinformationMutation {
	return au.mutation
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (au *AntenatalinformationUpdate) ClearPersonnel() *AntenatalinformationUpdate {
	au.mutation.ClearPersonnel()
	return au
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (au *AntenatalinformationUpdate) ClearPatient() *AntenatalinformationUpdate {
	au.mutation.ClearPatient()
	return au
}

// ClearPregnancystatusid clears the "Pregnancystatusid" edge to the Pregnancystatus entity.
func (au *AntenatalinformationUpdate) ClearPregnancystatusid() *AntenatalinformationUpdate {
	au.mutation.ClearPregnancystatusid()
	return au
}

// ClearRisksid clears the "Risksid" edge to the Risks entity.
func (au *AntenatalinformationUpdate) ClearRisksid() *AntenatalinformationUpdate {
	au.mutation.ClearRisksid()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AntenatalinformationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalinformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AntenatalinformationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AntenatalinformationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AntenatalinformationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AntenatalinformationUpdate) check() error {
	if v, ok := au.mutation.Gestationalage(); ok {
		if err := antenatalinformation.GestationalageValidator(v); err != nil {
			return &ValidationError{Name: "gestationalage", err: fmt.Errorf("ent: validator failed for field \"gestationalage\": %w", err)}
		}
	}
	return nil
}

func (au *AntenatalinformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatalinformation.Table,
			Columns: antenatalinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatalinformation.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Gestationalage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: antenatalinformation.FieldGestationalage,
		})
	}
	if value, ok := au.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatalinformation.FieldAddedTime,
		})
	}
	if au.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PersonnelTable,
			Columns: []string{antenatalinformation.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PersonnelTable,
			Columns: []string{antenatalinformation.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PatientTable,
			Columns: []string{antenatalinformation.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PatientTable,
			Columns: []string{antenatalinformation.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PregnancystatusidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.PregnancystatusidTable,
			Columns: []string{antenatalinformation.PregnancystatusidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pregnancystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PregnancystatusidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.PregnancystatusidTable,
			Columns: []string{antenatalinformation.PregnancystatusidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pregnancystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RisksidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.RisksidTable,
			Columns: []string{antenatalinformation.RisksidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: risks.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RisksidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.RisksidTable,
			Columns: []string{antenatalinformation.RisksidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: risks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatalinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AntenatalinformationUpdateOne is the builder for updating a single Antenatalinformation entity.
type AntenatalinformationUpdateOne struct {
	config
	hooks    []Hook
	mutation *AntenatalinformationMutation
}

// SetGestationalage sets the "gestationalage" field.
func (auo *AntenatalinformationUpdateOne) SetGestationalage(s string) *AntenatalinformationUpdateOne {
	auo.mutation.SetGestationalage(s)
	return auo
}

// SetAddedTime sets the "added_time" field.
func (auo *AntenatalinformationUpdateOne) SetAddedTime(t time.Time) *AntenatalinformationUpdateOne {
	auo.mutation.SetAddedTime(t)
	return auo
}

// SetPersonnelID sets the "Personnel" edge to the Personnel entity by ID.
func (auo *AntenatalinformationUpdateOne) SetPersonnelID(id int) *AntenatalinformationUpdateOne {
	auo.mutation.SetPersonnelID(id)
	return auo
}

// SetNillablePersonnelID sets the "Personnel" edge to the Personnel entity by ID if the given value is not nil.
func (auo *AntenatalinformationUpdateOne) SetNillablePersonnelID(id *int) *AntenatalinformationUpdateOne {
	if id != nil {
		auo = auo.SetPersonnelID(*id)
	}
	return auo
}

// SetPersonnel sets the "Personnel" edge to the Personnel entity.
func (auo *AntenatalinformationUpdateOne) SetPersonnel(p *Personnel) *AntenatalinformationUpdateOne {
	return auo.SetPersonnelID(p.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (auo *AntenatalinformationUpdateOne) SetPatientID(id int) *AntenatalinformationUpdateOne {
	auo.mutation.SetPatientID(id)
	return auo
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (auo *AntenatalinformationUpdateOne) SetNillablePatientID(id *int) *AntenatalinformationUpdateOne {
	if id != nil {
		auo = auo.SetPatientID(*id)
	}
	return auo
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (auo *AntenatalinformationUpdateOne) SetPatient(p *Patient) *AntenatalinformationUpdateOne {
	return auo.SetPatientID(p.ID)
}

// SetPregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID.
func (auo *AntenatalinformationUpdateOne) SetPregnancystatusidID(id int) *AntenatalinformationUpdateOne {
	auo.mutation.SetPregnancystatusidID(id)
	return auo
}

// SetNillablePregnancystatusidID sets the "Pregnancystatusid" edge to the Pregnancystatus entity by ID if the given value is not nil.
func (auo *AntenatalinformationUpdateOne) SetNillablePregnancystatusidID(id *int) *AntenatalinformationUpdateOne {
	if id != nil {
		auo = auo.SetPregnancystatusidID(*id)
	}
	return auo
}

// SetPregnancystatusid sets the "Pregnancystatusid" edge to the Pregnancystatus entity.
func (auo *AntenatalinformationUpdateOne) SetPregnancystatusid(p *Pregnancystatus) *AntenatalinformationUpdateOne {
	return auo.SetPregnancystatusidID(p.ID)
}

// SetRisksidID sets the "Risksid" edge to the Risks entity by ID.
func (auo *AntenatalinformationUpdateOne) SetRisksidID(id int) *AntenatalinformationUpdateOne {
	auo.mutation.SetRisksidID(id)
	return auo
}

// SetNillableRisksidID sets the "Risksid" edge to the Risks entity by ID if the given value is not nil.
func (auo *AntenatalinformationUpdateOne) SetNillableRisksidID(id *int) *AntenatalinformationUpdateOne {
	if id != nil {
		auo = auo.SetRisksidID(*id)
	}
	return auo
}

// SetRisksid sets the "Risksid" edge to the Risks entity.
func (auo *AntenatalinformationUpdateOne) SetRisksid(r *Risks) *AntenatalinformationUpdateOne {
	return auo.SetRisksidID(r.ID)
}

// Mutation returns the AntenatalinformationMutation object of the builder.
func (auo *AntenatalinformationUpdateOne) Mutation() *AntenatalinformationMutation {
	return auo.mutation
}

// ClearPersonnel clears the "Personnel" edge to the Personnel entity.
func (auo *AntenatalinformationUpdateOne) ClearPersonnel() *AntenatalinformationUpdateOne {
	auo.mutation.ClearPersonnel()
	return auo
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (auo *AntenatalinformationUpdateOne) ClearPatient() *AntenatalinformationUpdateOne {
	auo.mutation.ClearPatient()
	return auo
}

// ClearPregnancystatusid clears the "Pregnancystatusid" edge to the Pregnancystatus entity.
func (auo *AntenatalinformationUpdateOne) ClearPregnancystatusid() *AntenatalinformationUpdateOne {
	auo.mutation.ClearPregnancystatusid()
	return auo
}

// ClearRisksid clears the "Risksid" edge to the Risks entity.
func (auo *AntenatalinformationUpdateOne) ClearRisksid() *AntenatalinformationUpdateOne {
	auo.mutation.ClearRisksid()
	return auo
}

// Save executes the query and returns the updated Antenatalinformation entity.
func (auo *AntenatalinformationUpdateOne) Save(ctx context.Context) (*Antenatalinformation, error) {
	var (
		err  error
		node *Antenatalinformation
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AntenatalinformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AntenatalinformationUpdateOne) SaveX(ctx context.Context) *Antenatalinformation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AntenatalinformationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AntenatalinformationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AntenatalinformationUpdateOne) check() error {
	if v, ok := auo.mutation.Gestationalage(); ok {
		if err := antenatalinformation.GestationalageValidator(v); err != nil {
			return &ValidationError{Name: "gestationalage", err: fmt.Errorf("ent: validator failed for field \"gestationalage\": %w", err)}
		}
	}
	return nil
}

func (auo *AntenatalinformationUpdateOne) sqlSave(ctx context.Context) (_node *Antenatalinformation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   antenatalinformation.Table,
			Columns: antenatalinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: antenatalinformation.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Antenatalinformation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Gestationalage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: antenatalinformation.FieldGestationalage,
		})
	}
	if value, ok := auo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: antenatalinformation.FieldAddedTime,
		})
	}
	if auo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PersonnelTable,
			Columns: []string{antenatalinformation.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PersonnelTable,
			Columns: []string{antenatalinformation.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PatientTable,
			Columns: []string{antenatalinformation.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   antenatalinformation.PatientTable,
			Columns: []string{antenatalinformation.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PregnancystatusidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.PregnancystatusidTable,
			Columns: []string{antenatalinformation.PregnancystatusidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pregnancystatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PregnancystatusidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.PregnancystatusidTable,
			Columns: []string{antenatalinformation.PregnancystatusidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pregnancystatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RisksidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.RisksidTable,
			Columns: []string{antenatalinformation.RisksidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: risks.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RisksidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   antenatalinformation.RisksidTable,
			Columns: []string{antenatalinformation.RisksidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: risks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Antenatalinformation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{antenatalinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
