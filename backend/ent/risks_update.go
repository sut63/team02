// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/antenatalinformation"
	"github.com/to63/app/ent/predicate"
	"github.com/to63/app/ent/risks"
)

// RisksUpdate is the builder for updating Risks entities.
type RisksUpdate struct {
	config
	hooks    []Hook
	mutation *RisksMutation
}

// Where adds a new predicate for the RisksUpdate builder.
func (ru *RisksUpdate) Where(ps ...predicate.Risks) *RisksUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetRisks sets the "Risks" field.
func (ru *RisksUpdate) SetRisks(s string) *RisksUpdate {
	ru.mutation.SetRisks(s)
	return ru
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (ru *RisksUpdate) AddAntenatalinformationIDs(ids ...int) *RisksUpdate {
	ru.mutation.AddAntenatalinformationIDs(ids...)
	return ru
}

// AddAntenatalinformation adds the "Antenatalinformation" edges to the Antenatalinformation entity.
func (ru *RisksUpdate) AddAntenatalinformation(a ...*Antenatalinformation) *RisksUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAntenatalinformationIDs(ids...)
}

// Mutation returns the RisksMutation object of the builder.
func (ru *RisksUpdate) Mutation() *RisksMutation {
	return ru.mutation
}

// ClearAntenatalinformation clears all "Antenatalinformation" edges to the Antenatalinformation entity.
func (ru *RisksUpdate) ClearAntenatalinformation() *RisksUpdate {
	ru.mutation.ClearAntenatalinformation()
	return ru
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to Antenatalinformation entities by IDs.
func (ru *RisksUpdate) RemoveAntenatalinformationIDs(ids ...int) *RisksUpdate {
	ru.mutation.RemoveAntenatalinformationIDs(ids...)
	return ru
}

// RemoveAntenatalinformation removes "Antenatalinformation" edges to Antenatalinformation entities.
func (ru *RisksUpdate) RemoveAntenatalinformation(a ...*Antenatalinformation) *RisksUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAntenatalinformationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RisksUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RisksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RisksUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RisksUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RisksUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RisksUpdate) check() error {
	if v, ok := ru.mutation.Risks(); ok {
		if err := risks.RisksValidator(v); err != nil {
			return &ValidationError{Name: "Risks", err: fmt.Errorf("ent: validator failed for field \"Risks\": %w", err)}
		}
	}
	return nil
}

func (ru *RisksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   risks.Table,
			Columns: risks.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risks.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Risks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: risks.FieldRisks,
		})
	}
	if ru.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAntenatalinformationIDs(); len(nodes) > 0 && !ru.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AntenatalinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risks.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RisksUpdateOne is the builder for updating a single Risks entity.
type RisksUpdateOne struct {
	config
	hooks    []Hook
	mutation *RisksMutation
}

// SetRisks sets the "Risks" field.
func (ruo *RisksUpdateOne) SetRisks(s string) *RisksUpdateOne {
	ruo.mutation.SetRisks(s)
	return ruo
}

// AddAntenatalinformationIDs adds the "Antenatalinformation" edge to the Antenatalinformation entity by IDs.
func (ruo *RisksUpdateOne) AddAntenatalinformationIDs(ids ...int) *RisksUpdateOne {
	ruo.mutation.AddAntenatalinformationIDs(ids...)
	return ruo
}

// AddAntenatalinformation adds the "Antenatalinformation" edges to the Antenatalinformation entity.
func (ruo *RisksUpdateOne) AddAntenatalinformation(a ...*Antenatalinformation) *RisksUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAntenatalinformationIDs(ids...)
}

// Mutation returns the RisksMutation object of the builder.
func (ruo *RisksUpdateOne) Mutation() *RisksMutation {
	return ruo.mutation
}

// ClearAntenatalinformation clears all "Antenatalinformation" edges to the Antenatalinformation entity.
func (ruo *RisksUpdateOne) ClearAntenatalinformation() *RisksUpdateOne {
	ruo.mutation.ClearAntenatalinformation()
	return ruo
}

// RemoveAntenatalinformationIDs removes the "Antenatalinformation" edge to Antenatalinformation entities by IDs.
func (ruo *RisksUpdateOne) RemoveAntenatalinformationIDs(ids ...int) *RisksUpdateOne {
	ruo.mutation.RemoveAntenatalinformationIDs(ids...)
	return ruo
}

// RemoveAntenatalinformation removes "Antenatalinformation" edges to Antenatalinformation entities.
func (ruo *RisksUpdateOne) RemoveAntenatalinformation(a ...*Antenatalinformation) *RisksUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAntenatalinformationIDs(ids...)
}

// Save executes the query and returns the updated Risks entity.
func (ruo *RisksUpdateOne) Save(ctx context.Context) (*Risks, error) {
	var (
		err  error
		node *Risks
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RisksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RisksUpdateOne) SaveX(ctx context.Context) *Risks {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RisksUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RisksUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RisksUpdateOne) check() error {
	if v, ok := ruo.mutation.Risks(); ok {
		if err := risks.RisksValidator(v); err != nil {
			return &ValidationError{Name: "Risks", err: fmt.Errorf("ent: validator failed for field \"Risks\": %w", err)}
		}
	}
	return nil
}

func (ruo *RisksUpdateOne) sqlSave(ctx context.Context) (_node *Risks, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   risks.Table,
			Columns: risks.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: risks.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Risks.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Risks(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: risks.FieldRisks,
		})
	}
	if ruo.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAntenatalinformationIDs(); len(nodes) > 0 && !ruo.mutation.AntenatalinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AntenatalinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risks.AntenatalinformationTable,
			Columns: []string{risks.AntenatalinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: antenatalinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Risks{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risks.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
