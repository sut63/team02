// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/remedy"
	"github.com/to63/app/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bonediseaseFields := schema.Bonedisease{}.Fields()
	_ = bonediseaseFields
	// bonediseaseDescAddedTime is the schema descriptor for addedTime field.
	bonediseaseDescAddedTime := bonediseaseFields[0].Descriptor()
	// bonedisease.DefaultAddedTime holds the default value on creation for the addedTime field.
	bonedisease.DefaultAddedTime = bonediseaseDescAddedTime.Default.(func() time.Time)
	// bonediseaseDescAdvice is the schema descriptor for advice field.
	bonediseaseDescAdvice := bonediseaseFields[1].Descriptor()
	// bonedisease.AdviceValidator is a validator for the "advice" field. It is called by the builders before save.
	bonedisease.AdviceValidator = bonediseaseDescAdvice.Validators[0].(func(string) error)
	patientFields := schema.Patient{}.Fields()
	_ = patientFields
	// patientDescName is the schema descriptor for name field.
	patientDescName := patientFields[0].Descriptor()
	// patient.NameValidator is a validator for the "name" field. It is called by the builders before save.
	patient.NameValidator = patientDescName.Validators[0].(func(string) error)
	// patientDescBirthday is the schema descriptor for birthday field.
	patientDescBirthday := patientFields[1].Descriptor()
	// patient.BirthdayValidator is a validator for the "birthday" field. It is called by the builders before save.
	patient.BirthdayValidator = patientDescBirthday.Validators[0].(func(string) error)
	// patientDescGender is the schema descriptor for gender field.
	patientDescGender := patientFields[2].Descriptor()
	// patient.GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	patient.GenderValidator = patientDescGender.Validators[0].(func(string) error)
	personnelFields := schema.Personnel{}.Fields()
	_ = personnelFields
	// personnelDescName is the schema descriptor for name field.
	personnelDescName := personnelFields[0].Descriptor()
	// personnel.NameValidator is a validator for the "name" field. It is called by the builders before save.
	personnel.NameValidator = personnelDescName.Validators[0].(func(string) error)
	// personnelDescDepartment is the schema descriptor for department field.
	personnelDescDepartment := personnelFields[1].Descriptor()
	// personnel.DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	personnel.DepartmentValidator = personnelDescDepartment.Validators[0].(func(string) error)
	// personnelDescUser is the schema descriptor for user field.
	personnelDescUser := personnelFields[2].Descriptor()
	// personnel.UserValidator is a validator for the "user" field. It is called by the builders before save.
	personnel.UserValidator = personnelDescUser.Validators[0].(func(string) error)
	// personnelDescPassword is the schema descriptor for password field.
	personnelDescPassword := personnelFields[3].Descriptor()
	// personnel.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	personnel.PasswordValidator = personnelDescPassword.Validators[0].(func(string) error)
	remedyFields := schema.Remedy{}.Fields()
	_ = remedyFields
	// remedyDescRemedy is the schema descriptor for remedy field.
	remedyDescRemedy := remedyFields[0].Descriptor()
	// remedy.RemedyValidator is a validator for the "remedy" field. It is called by the builders before save.
	remedy.RemedyValidator = remedyDescRemedy.Validators[0].(func(string) error)
}
