// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/doctorordersheet"
)

// DoctorOrderSheet is the model entity for the DoctorOrderSheet schema.
type DoctorOrderSheet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorOrderSheetQuery when eager-loading is set.
	Edges DoctorOrderSheetEdges `json:"edges"`
}

// DoctorOrderSheetEdges holds the relations/edges for other nodes in the graph.
type DoctorOrderSheetEdges struct {
	// Checksymptoms holds the value of the Checksymptoms edge.
	Checksymptoms []*Checksymptoms
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChecksymptomsOrErr returns the Checksymptoms value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorOrderSheetEdges) ChecksymptomsOrErr() ([]*Checksymptoms, error) {
	if e.loadedTypes[0] {
		return e.Checksymptoms, nil
	}
	return nil, &NotLoadedError{edge: "Checksymptoms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DoctorOrderSheet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case doctorordersheet.FieldID:
			values[i] = &sql.NullInt64{}
		case doctorordersheet.FieldTime:
			values[i] = &sql.NullString{}
		case doctorordersheet.FieldDate:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DoctorOrderSheet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DoctorOrderSheet fields.
func (dos *DoctorOrderSheet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case doctorordersheet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dos.ID = int(value.Int64)
		case doctorordersheet.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				dos.Date = value.Time
			}
		case doctorordersheet.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				dos.Time = value.String
			}
		}
	}
	return nil
}

// QueryChecksymptoms queries the "Checksymptoms" edge of the DoctorOrderSheet entity.
func (dos *DoctorOrderSheet) QueryChecksymptoms() *ChecksymptomsQuery {
	return (&DoctorOrderSheetClient{config: dos.config}).QueryChecksymptoms(dos)
}

// Update returns a builder for updating this DoctorOrderSheet.
// Note that you need to call DoctorOrderSheet.Unwrap() before calling this method if this DoctorOrderSheet
// was returned from a transaction, and the transaction was committed or rolled back.
func (dos *DoctorOrderSheet) Update() *DoctorOrderSheetUpdateOne {
	return (&DoctorOrderSheetClient{config: dos.config}).UpdateOne(dos)
}

// Unwrap unwraps the DoctorOrderSheet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dos *DoctorOrderSheet) Unwrap() *DoctorOrderSheet {
	tx, ok := dos.config.driver.(*txDriver)
	if !ok {
		panic("ent: DoctorOrderSheet is not a transactional entity")
	}
	dos.config.driver = tx.drv
	return dos
}

// String implements the fmt.Stringer.
func (dos *DoctorOrderSheet) String() string {
	var builder strings.Builder
	builder.WriteString("DoctorOrderSheet(")
	builder.WriteString(fmt.Sprintf("id=%v", dos.ID))
	builder.WriteString(", date=")
	builder.WriteString(dos.Date.Format(time.ANSIC))
	builder.WriteString(", time=")
	builder.WriteString(dos.Time)
	builder.WriteByte(')')
	return builder.String()
}

// DoctorOrderSheets is a parsable slice of DoctorOrderSheet.
type DoctorOrderSheets []*DoctorOrderSheet

func (dos DoctorOrderSheets) config(cfg config) {
	for _i := range dos {
		dos[_i].config = cfg
	}
}
