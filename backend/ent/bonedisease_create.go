// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/remedy"
)

// BonediseaseCreate is the builder for creating a Bonedisease entity.
type BonediseaseCreate struct {
	config
	mutation *BonediseaseMutation
	hooks    []Hook
}

// SetAddedTime sets the "addedTime" field.
func (bc *BonediseaseCreate) SetAddedTime(t time.Time) *BonediseaseCreate {
	bc.mutation.SetAddedTime(t)
	return bc
}

// SetNillableAddedTime sets the "addedTime" field if the given value is not nil.
func (bc *BonediseaseCreate) SetNillableAddedTime(t *time.Time) *BonediseaseCreate {
	if t != nil {
		bc.SetAddedTime(*t)
	}
	return bc
}

// SetAdvice sets the "advice" field.
func (bc *BonediseaseCreate) SetAdvice(s string) *BonediseaseCreate {
	bc.mutation.SetAdvice(s)
	return bc
}

// SetRemedyID sets the "remedy" edge to the Remedy entity by ID.
func (bc *BonediseaseCreate) SetRemedyID(id int) *BonediseaseCreate {
	bc.mutation.SetRemedyID(id)
	return bc
}

// SetNillableRemedyID sets the "remedy" edge to the Remedy entity by ID if the given value is not nil.
func (bc *BonediseaseCreate) SetNillableRemedyID(id *int) *BonediseaseCreate {
	if id != nil {
		bc = bc.SetRemedyID(*id)
	}
	return bc
}

// SetRemedy sets the "remedy" edge to the Remedy entity.
func (bc *BonediseaseCreate) SetRemedy(r *Remedy) *BonediseaseCreate {
	return bc.SetRemedyID(r.ID)
}

// SetPatientID sets the "patient" edge to the Patient entity by ID.
func (bc *BonediseaseCreate) SetPatientID(id int) *BonediseaseCreate {
	bc.mutation.SetPatientID(id)
	return bc
}

// SetNillablePatientID sets the "patient" edge to the Patient entity by ID if the given value is not nil.
func (bc *BonediseaseCreate) SetNillablePatientID(id *int) *BonediseaseCreate {
	if id != nil {
		bc = bc.SetPatientID(*id)
	}
	return bc
}

// SetPatient sets the "patient" edge to the Patient entity.
func (bc *BonediseaseCreate) SetPatient(p *Patient) *BonediseaseCreate {
	return bc.SetPatientID(p.ID)
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (bc *BonediseaseCreate) SetPersonnelID(id int) *BonediseaseCreate {
	bc.mutation.SetPersonnelID(id)
	return bc
}

// SetNillablePersonnelID sets the "personnel" edge to the Personnel entity by ID if the given value is not nil.
func (bc *BonediseaseCreate) SetNillablePersonnelID(id *int) *BonediseaseCreate {
	if id != nil {
		bc = bc.SetPersonnelID(*id)
	}
	return bc
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (bc *BonediseaseCreate) SetPersonnel(p *Personnel) *BonediseaseCreate {
	return bc.SetPersonnelID(p.ID)
}

// Mutation returns the BonediseaseMutation object of the builder.
func (bc *BonediseaseCreate) Mutation() *BonediseaseMutation {
	return bc.mutation
}

// Save creates the Bonedisease in the database.
func (bc *BonediseaseCreate) Save(ctx context.Context) (*Bonedisease, error) {
	var (
		err  error
		node *Bonedisease
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BonediseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BonediseaseCreate) SaveX(ctx context.Context) *Bonedisease {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bc *BonediseaseCreate) defaults() {
	if _, ok := bc.mutation.AddedTime(); !ok {
		v := bonedisease.DefaultAddedTime()
		bc.mutation.SetAddedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BonediseaseCreate) check() error {
	if _, ok := bc.mutation.AddedTime(); !ok {
		return &ValidationError{Name: "addedTime", err: errors.New("ent: missing required field \"addedTime\"")}
	}
	if _, ok := bc.mutation.Advice(); !ok {
		return &ValidationError{Name: "advice", err: errors.New("ent: missing required field \"advice\"")}
	}
	if v, ok := bc.mutation.Advice(); ok {
		if err := bonedisease.AdviceValidator(v); err != nil {
			return &ValidationError{Name: "advice", err: fmt.Errorf("ent: validator failed for field \"advice\": %w", err)}
		}
	}
	return nil
}

func (bc *BonediseaseCreate) sqlSave(ctx context.Context) (*Bonedisease, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BonediseaseCreate) createSpec() (*Bonedisease, *sqlgraph.CreateSpec) {
	var (
		_node = &Bonedisease{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bonedisease.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bonedisease.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bonedisease.FieldAddedTime,
		})
		_node.AddedTime = value
	}
	if value, ok := bc.mutation.Advice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bonedisease.FieldAdvice,
		})
		_node.Advice = value
	}
	if nodes := bc.mutation.RemedyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.RemedyTable,
			Columns: []string{bonedisease.RemedyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: remedy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PatientTable,
			Columns: []string{bonedisease.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bonedisease.PersonnelTable,
			Columns: []string{bonedisease.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personnel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BonediseaseCreateBulk is the builder for creating many Bonedisease entities in bulk.
type BonediseaseCreateBulk struct {
	config
	builders []*BonediseaseCreate
}

// Save creates the Bonedisease entities in the database.
func (bcb *BonediseaseCreateBulk) Save(ctx context.Context) ([]*Bonedisease, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bonedisease, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BonediseaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BonediseaseCreateBulk) SaveX(ctx context.Context) []*Bonedisease {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
