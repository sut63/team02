// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/to63/app/ent/bonedisease"
	"github.com/to63/app/ent/patient"
	"github.com/to63/app/ent/personnel"
	"github.com/to63/app/ent/remedy"
)

// Bonedisease is the model entity for the Bonedisease schema.
type Bonedisease struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "addedTime" field.
	AddedTime time.Time `json:"addedTime,omitempty"`
	// Advice holds the value of the "advice" field.
	Advice string `json:"advice,omitempty"`
	// Tel holds the value of the "tel" field.
	Tel string `json:"tel,omitempty"`
	// IdentificationCard holds the value of the "identificationCard" field.
	IdentificationCard string `json:"identificationCard,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BonediseaseQuery when eager-loading is set.
	Edges         BonediseaseEdges `json:"edges"`
	_Patient_id   *int
	_Personnel_id *int
	remedy_id     *int
}

// BonediseaseEdges holds the relations/edges for other nodes in the graph.
type BonediseaseEdges struct {
	// Remedy holds the value of the remedy edge.
	Remedy *Remedy
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Personnel holds the value of the personnel edge.
	Personnel *Personnel
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RemedyOrErr returns the Remedy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BonediseaseEdges) RemedyOrErr() (*Remedy, error) {
	if e.loadedTypes[0] {
		if e.Remedy == nil {
			// The edge remedy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: remedy.Label}
		}
		return e.Remedy, nil
	}
	return nil, &NotLoadedError{edge: "remedy"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BonediseaseEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// PersonnelOrErr returns the Personnel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BonediseaseEdges) PersonnelOrErr() (*Personnel, error) {
	if e.loadedTypes[2] {
		if e.Personnel == nil {
			// The edge personnel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personnel.Label}
		}
		return e.Personnel, nil
	}
	return nil, &NotLoadedError{edge: "personnel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bonedisease) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bonedisease.FieldID:
			values[i] = &sql.NullInt64{}
		case bonedisease.FieldAdvice, bonedisease.FieldTel, bonedisease.FieldIdentificationCard:
			values[i] = &sql.NullString{}
		case bonedisease.FieldAddedTime:
			values[i] = &sql.NullTime{}
		case bonedisease.ForeignKeys[0]: // _Patient_id
			values[i] = &sql.NullInt64{}
		case bonedisease.ForeignKeys[1]: // _Personnel_id
			values[i] = &sql.NullInt64{}
		case bonedisease.ForeignKeys[2]: // remedy_id
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bonedisease", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bonedisease fields.
func (b *Bonedisease) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bonedisease.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bonedisease.FieldAddedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field addedTime", values[i])
			} else if value.Valid {
				b.AddedTime = value.Time
			}
		case bonedisease.FieldAdvice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field advice", values[i])
			} else if value.Valid {
				b.Advice = value.String
			}
		case bonedisease.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				b.Tel = value.String
			}
		case bonedisease.FieldIdentificationCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identificationCard", values[i])
			} else if value.Valid {
				b.IdentificationCard = value.String
			}
		case bonedisease.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Patient_id", value)
			} else if value.Valid {
				b._Patient_id = new(int)
				*b._Patient_id = int(value.Int64)
			}
		case bonedisease.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field _Personnel_id", value)
			} else if value.Valid {
				b._Personnel_id = new(int)
				*b._Personnel_id = int(value.Int64)
			}
		case bonedisease.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field remedy_id", value)
			} else if value.Valid {
				b.remedy_id = new(int)
				*b.remedy_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRemedy queries the "remedy" edge of the Bonedisease entity.
func (b *Bonedisease) QueryRemedy() *RemedyQuery {
	return (&BonediseaseClient{config: b.config}).QueryRemedy(b)
}

// QueryPatient queries the "patient" edge of the Bonedisease entity.
func (b *Bonedisease) QueryPatient() *PatientQuery {
	return (&BonediseaseClient{config: b.config}).QueryPatient(b)
}

// QueryPersonnel queries the "personnel" edge of the Bonedisease entity.
func (b *Bonedisease) QueryPersonnel() *PersonnelQuery {
	return (&BonediseaseClient{config: b.config}).QueryPersonnel(b)
}

// Update returns a builder for updating this Bonedisease.
// Note that you need to call Bonedisease.Unwrap() before calling this method if this Bonedisease
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bonedisease) Update() *BonediseaseUpdateOne {
	return (&BonediseaseClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bonedisease entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bonedisease) Unwrap() *Bonedisease {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bonedisease is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bonedisease) String() string {
	var builder strings.Builder
	builder.WriteString("Bonedisease(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", addedTime=")
	builder.WriteString(b.AddedTime.Format(time.ANSIC))
	builder.WriteString(", advice=")
	builder.WriteString(b.Advice)
	builder.WriteString(", tel=")
	builder.WriteString(b.Tel)
	builder.WriteString(", identificationCard=")
	builder.WriteString(b.IdentificationCard)
	builder.WriteByte(')')
	return builder.String()
}

// Bonediseases is a parsable slice of Bonedisease.
type Bonediseases []*Bonedisease

func (b Bonediseases) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
