// Code generated by entc, DO NOT EDIT.

package physicaltherapyrecord

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/to63/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Idnumber applies equality check predicate on the "idnumber" field. It's identical to IdnumberEQ.
func Idnumber(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdnumber), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// Telephone applies equality check predicate on the "telephone" field. It's identical to TelephoneEQ.
func Telephone(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelephone), v))
	})
}

// Appointtime applies equality check predicate on the "appointtime" field. It's identical to AppointtimeEQ.
func Appointtime(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppointtime), v))
	})
}

// IdnumberEQ applies the EQ predicate on the "idnumber" field.
func IdnumberEQ(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdnumber), v))
	})
}

// IdnumberNEQ applies the NEQ predicate on the "idnumber" field.
func IdnumberNEQ(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdnumber), v))
	})
}

// IdnumberIn applies the In predicate on the "idnumber" field.
func IdnumberIn(vs ...string) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdnumber), v...))
	})
}

// IdnumberNotIn applies the NotIn predicate on the "idnumber" field.
func IdnumberNotIn(vs ...string) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdnumber), v...))
	})
}

// IdnumberGT applies the GT predicate on the "idnumber" field.
func IdnumberGT(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdnumber), v))
	})
}

// IdnumberGTE applies the GTE predicate on the "idnumber" field.
func IdnumberGTE(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdnumber), v))
	})
}

// IdnumberLT applies the LT predicate on the "idnumber" field.
func IdnumberLT(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdnumber), v))
	})
}

// IdnumberLTE applies the LTE predicate on the "idnumber" field.
func IdnumberLTE(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdnumber), v))
	})
}

// IdnumberContains applies the Contains predicate on the "idnumber" field.
func IdnumberContains(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdnumber), v))
	})
}

// IdnumberHasPrefix applies the HasPrefix predicate on the "idnumber" field.
func IdnumberHasPrefix(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdnumber), v))
	})
}

// IdnumberHasSuffix applies the HasSuffix predicate on the "idnumber" field.
func IdnumberHasSuffix(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdnumber), v))
	})
}

// IdnumberEqualFold applies the EqualFold predicate on the "idnumber" field.
func IdnumberEqualFold(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdnumber), v))
	})
}

// IdnumberContainsFold applies the ContainsFold predicate on the "idnumber" field.
func IdnumberContainsFold(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdnumber), v))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// TelephoneEQ applies the EQ predicate on the "telephone" field.
func TelephoneEQ(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelephone), v))
	})
}

// TelephoneNEQ applies the NEQ predicate on the "telephone" field.
func TelephoneNEQ(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTelephone), v))
	})
}

// TelephoneIn applies the In predicate on the "telephone" field.
func TelephoneIn(vs ...string) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTelephone), v...))
	})
}

// TelephoneNotIn applies the NotIn predicate on the "telephone" field.
func TelephoneNotIn(vs ...string) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTelephone), v...))
	})
}

// TelephoneGT applies the GT predicate on the "telephone" field.
func TelephoneGT(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTelephone), v))
	})
}

// TelephoneGTE applies the GTE predicate on the "telephone" field.
func TelephoneGTE(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTelephone), v))
	})
}

// TelephoneLT applies the LT predicate on the "telephone" field.
func TelephoneLT(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTelephone), v))
	})
}

// TelephoneLTE applies the LTE predicate on the "telephone" field.
func TelephoneLTE(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTelephone), v))
	})
}

// TelephoneContains applies the Contains predicate on the "telephone" field.
func TelephoneContains(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTelephone), v))
	})
}

// TelephoneHasPrefix applies the HasPrefix predicate on the "telephone" field.
func TelephoneHasPrefix(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTelephone), v))
	})
}

// TelephoneHasSuffix applies the HasSuffix predicate on the "telephone" field.
func TelephoneHasSuffix(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTelephone), v))
	})
}

// TelephoneEqualFold applies the EqualFold predicate on the "telephone" field.
func TelephoneEqualFold(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTelephone), v))
	})
}

// TelephoneContainsFold applies the ContainsFold predicate on the "telephone" field.
func TelephoneContainsFold(v string) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTelephone), v))
	})
}

// AppointtimeEQ applies the EQ predicate on the "appointtime" field.
func AppointtimeEQ(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppointtime), v))
	})
}

// AppointtimeNEQ applies the NEQ predicate on the "appointtime" field.
func AppointtimeNEQ(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppointtime), v))
	})
}

// AppointtimeIn applies the In predicate on the "appointtime" field.
func AppointtimeIn(vs ...time.Time) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppointtime), v...))
	})
}

// AppointtimeNotIn applies the NotIn predicate on the "appointtime" field.
func AppointtimeNotIn(vs ...time.Time) predicate.Physicaltherapyrecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppointtime), v...))
	})
}

// AppointtimeGT applies the GT predicate on the "appointtime" field.
func AppointtimeGT(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppointtime), v))
	})
}

// AppointtimeGTE applies the GTE predicate on the "appointtime" field.
func AppointtimeGTE(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppointtime), v))
	})
}

// AppointtimeLT applies the LT predicate on the "appointtime" field.
func AppointtimeLT(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppointtime), v))
	})
}

// AppointtimeLTE applies the LTE predicate on the "appointtime" field.
func AppointtimeLTE(v time.Time) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppointtime), v))
	})
}

// HasPersonnel applies the HasEdge predicate on the "personnel" edge.
func HasPersonnel() predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonnelWith applies the HasEdge predicate on the "personnel" edge with a given conditions (other predicates).
func HasPersonnelWith(preds ...predicate.Personnel) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonnelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonnelTable, PersonnelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPhysicaltherapyroom applies the HasEdge predicate on the "physicaltherapyroom" edge.
func HasPhysicaltherapyroom() predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicaltherapyroomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PhysicaltherapyroomTable, PhysicaltherapyroomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhysicaltherapyroomWith applies the HasEdge predicate on the "physicaltherapyroom" edge with a given conditions (other predicates).
func HasPhysicaltherapyroomWith(preds ...predicate.Physicaltherapyroom) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicaltherapyroomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PhysicaltherapyroomTable, PhysicaltherapyroomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Physicaltherapyrecord) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Physicaltherapyrecord) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Physicaltherapyrecord) predicate.Physicaltherapyrecord {
	return predicate.Physicaltherapyrecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
